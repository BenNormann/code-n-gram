Commit Hash,File Name,Method Name,Method Code,Commit Link
7f31c4c95056efa9df145290976aaeabba11b7f9,Control.java,main,"public static void main(String[] args) { System.out.println(""Hello, world!""); }",https://www.github.com/sethm/symon/commit/7f31c4c95056efa9df145290976aaeabba11b7f9
7f31c4c95056efa9df145290976aaeabba11b7f9,ControlTest.java,suite,public static Test suite() { return new TestSuite(ControlTest.class); },https://www.github.com/sethm/symon/commit/7f31c4c95056efa9df145290976aaeabba11b7f9
7f31c4c95056efa9df145290976aaeabba11b7f9,ControlTest.java,testControl,public void testControl() { assertTrue(true); },https://www.github.com/sethm/symon/commit/7f31c4c95056efa9df145290976aaeabba11b7f9
a74322459a68e225bcf9521651000592d6c87a81,CommandParser.java,run,"public void run() { try { String command = null; greeting(); prompt(); while (!shouldQuit(command = readLine())) { dispatch(command); prompt(); } writeLine(""Goodbye!""); } catch (IOException ex) { System.err.println(""Error: "" + ex.toString()); System.exit(1); } }",https://www.github.com/sethm/symon/commit/a74322459a68e225bcf9521651000592d6c87a81
a74322459a68e225bcf9521651000592d6c87a81,CommandParser.java,dispatch,"public void dispatch(String command) throws IOException { writeLine(""You entered: "" + command); }",https://www.github.com/sethm/symon/commit/a74322459a68e225bcf9521651000592d6c87a81
a74322459a68e225bcf9521651000592d6c87a81,CommandParser.java,greeting,"private void greeting() throws IOException { writeLine(""Welcome to the j6502 Simulator!""); }",https://www.github.com/sethm/symon/commit/a74322459a68e225bcf9521651000592d6c87a81
a74322459a68e225bcf9521651000592d6c87a81,CommandParser.java,prompt,"private void prompt() throws IOException { m_out.write(""> ""); m_out.flush(); }",https://www.github.com/sethm/symon/commit/a74322459a68e225bcf9521651000592d6c87a81
a74322459a68e225bcf9521651000592d6c87a81,CommandParser.java,readLine,private String readLine() throws IOException { String line = m_in.readLine(); if (line == null) { return null; } return line.trim(); },https://www.github.com/sethm/symon/commit/a74322459a68e225bcf9521651000592d6c87a81
a74322459a68e225bcf9521651000592d6c87a81,CommandParser.java,writeLine,private void writeLine(String line) throws IOException { m_out.write(line); m_out.newLine(); m_out.flush(); },https://www.github.com/sethm/symon/commit/a74322459a68e225bcf9521651000592d6c87a81
a74322459a68e225bcf9521651000592d6c87a81,CommandParser.java,shouldQuit,"private boolean shouldQuit(String line) { return (line == null || ""q"".equals(line.toLowerCase())); }",https://www.github.com/sethm/symon/commit/a74322459a68e225bcf9521651000592d6c87a81
a74322459a68e225bcf9521651000592d6c87a81,Control.java,main,"public static void main(String[] args) { CommandParser parser = new CommandParser(System.in, System.out); parser.run(); }",https://www.github.com/sethm/symon/commit/a74322459a68e225bcf9521651000592d6c87a81
0163ae47b43cbbe24c7b6ed718a4017c6c5c1f7c,CommandParser.java,prompt,"private void prompt() throws IOException { m_out.write(""j6502> ""); m_out.flush(); }",https://www.github.com/sethm/symon/commit/0163ae47b43cbbe24c7b6ed718a4017c6c5c1f7c
a6abc2cd235063affaad8133146e6a3e322615c3,AddressDecoder.java,addDevice,public void addDevice(Device d),https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,AddressDecoder.java,isComplete,public boolean isComplete() { return true; },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,AddressDecoder.java,isSparse,public boolean isSparse() { return !isComplete(); },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,AddressDecoder.java,includes,public boolean includes(int address) { return (address <= m_endAddress && address >= m_startAddress); },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,AddressDecoder.java,setStartAddress,public void setStartAddress(int startAddress) { m_startAddress = startAddress; },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,AddressDecoder.java,setEndAddress,public void setEndAddress(int endAddress) { m_endAddress = endAddress; },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,AddressDecoder.java,getStartAddress,public int getStartAddress() { return m_startAddress; },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,AddressDecoder.java,getEndAddress,public int getEndAddress() { return m_endAddress; },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,CommandParser.java,run,"public void run() { try { String command = null; greeting(); prompt(); while (!shouldQuit(command = readLine())) { dispatch(command); prompt(); } writeLine(""\n\nGoodbye!""); } catch (IOException ex) { System.err.println(""Error: "" + ex.toString()); System.exit(1); } }",https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,Cpu.java,reset,public void reset() { },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,Cpu.java,interrupt,public void interrupt() { },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,Cpu.java,nmiInterrupt,public void nmiInterrupt() { },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,Device.java,generateInterrupt,public void generateInterrupt() { m_cpu.interrupt(); },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,Device.java,generateNonMaskableInterrupt,public void generateNonMaskableInterrupt() { m_cpu.nmiInterrupt(); },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,Simulator.java,run,public void run() { m_parser.run(); },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,Simulator.java,main,public static void main(String[] args) { new Simulator().run(); },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,Simulator.java,step,public void step() { },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,SimulatorTest.java,suite,public static Test suite() { return new TestSuite(SimulatorTest.class); },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
a6abc2cd235063affaad8133146e6a3e322615c3,SimulatorTest.java,testSimulator,public void testSimulator() { assertTrue(true); },https://www.github.com/sethm/symon/commit/a6abc2cd235063affaad8133146e6a3e322615c3
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,Cpu.java,reset,public void reset() { m_sp = 0x01ff; m_pc = 0xfffc; },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,Cpu.java,readAddress,private int readAddress() { return readAddress(m_pc); },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,Cpu.java,readAddress,private int readAddress(int address) { return (m_sim.read(address)<<8 & m_sim.read(address+1)); },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,Cpu.java,getSimulator,public Simulator getSimulator() { return m_sim; },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,Device.java,getMemoryRange,public MemoryRange getMemoryRange() { return m_memoryRange; },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,Device.java,getEndAddress,public int getEndAddress() { return m_memoryRange.getEndAddress(); },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,Device.java,getStartAddress,public int getStartAddress() { return m_memoryRange.getStartAddress(); },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,Simulator.java,read,public int read(int address) { return 0; },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,Simulator.java,write,"public void write(int address, int value) { }",https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,CpuTest.java,testCpu,public void testCpu() { Cpu cpu = new Cpu(new Simulator()); assertNotNull(cpu); },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,CpuTest.java,testReset,"public void testReset() { fail(""Not yet implemented""); }",https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,CpuTest.java,testInterrupt,"public void testInterrupt() { fail(""Not yet implemented""); }",https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,CpuTest.java,testNmiInterrupt,"public void testNmiInterrupt() { fail(""Not yet implemented""); }",https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,CpuTest.java,testGetSimulator,"public void testGetSimulator() { Simulator sim = new Simulator(); Cpu cpu = new Cpu(sim); assertEquals(sim, cpu.getSimulator()); }",https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,CpuTest.java,read,"public int read(int address) { Integer val = memory.get(new Integer(address)); if (val == null) { throw new NullPointerException(""Read from a non-existent memory location""); } else { return val.intValue(); } }",https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,CpuTest.java,run,public void run() { hasRun = true; },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,CpuTest.java,step,public void step() { step++; },https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
e3300d3166e6ff2e02af483c44efcf92d8a9cd73,CpuTest.java,write,"public void write(int address, int value) { super.write(address, value); }",https://www.github.com/sethm/symon/commit/e3300d3166e6ff2e02af483c44efcf92d8a9cd73
316d0feac62842aa781cfc65fe412c4b19310564,CpuTest.java,suite,public static Test suite() { return new TestSuite(CpuTest.class); },https://www.github.com/sethm/symon/commit/316d0feac62842aa781cfc65fe412c4b19310564
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,AddressDecoder.java,isComplete,public boolean isComplete() { if (ioMap.isEmpty()) { return false; } MemoryRange prev = null; int i = 0; int size = ioMap.size(); for (Map.Entry e : ioMap.entrySet()) { MemoryRange cur = (MemoryRange)e.getKey(); if (i == 0) { if (cur.getStartAddress() != MEMORY_BOTTOM) { return false; } } else if (i < size - 1) { if (cur.getStartAddress() - 1 != prev.getEndAddress()) { return false; } } else { if (cur.getEndAddress() != MEMORY_TOP) { return false; } } i++; prev = cur; } return true; },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,AddressDecoder.java,hasGaps,public boolean hasGaps() { return !isComplete(); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,CommandParser.java,prompt,"private void prompt() throws IOException { out.write(""j6502> ""); out.flush(); }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,CommandParser.java,readLine,private String readLine() throws IOException { String line = in.readLine(); if (line == null) { return null; } return line.trim(); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,CommandParser.java,writeLine,private void writeLine(String line) throws IOException { out.write(line); out.newLine(); out.flush(); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,Cpu.java,reset,public void reset() { sp = 0x01ff; pc = 0xfffc; },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,Cpu.java,readAddress,private int readAddress() { return readAddress(pc); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,Cpu.java,readAddress,private int readAddress(int address) { return (sim.read(address)<<8 & sim.read(address+1)); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,Cpu.java,getSimulator,public Simulator getSimulator() { return sim; },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,Device.java,getMemoryRange,public MemoryRange getMemoryRange() { return memoryRange; },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,Device.java,getEndAddress,public int getEndAddress() { return memoryRange.getEndAddress(); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,Device.java,getStartAddress,public int getStartAddress() { return memoryRange.getStartAddress(); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,Device.java,generateInterrupt,public void generateInterrupt() { cpu.interrupt(); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,Device.java,generateNonMaskableInterrupt,public void generateNonMaskableInterrupt() { cpu.nmiInterrupt(); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRange.java,getStartAddress,public int getStartAddress() { return startAddress; },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRange.java,getEndAddress,public int getEndAddress() { return endAddress; },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRange.java,includes,public boolean includes(int address) { return (address <= endAddress && address >= startAddress); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRange.java,overlapsWith,public boolean overlapsWith(MemoryRange other) { return ((this.getEndAddress() >= other.getStartAddress() && this.getEndAddress() <= other.getEndAddress()) || (other.getEndAddress() >= this.getStartAddress() && other.getEndAddress() <= this.getEndAddress()) || (this.getStartAddress() <= other.getStartAddress() && this.getEndAddress() >= other.getEndAddress()) || (other.getStartAddress() <= this.getStartAddress() && other.getEndAddress() >= this.getEndAddress())); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRange.java,compareTo,"public int compareTo(MemoryRange other) { if (other == null) { throw new NullPointerException(""Cannot compare to null.""); } if (this == other) { return 0; } Integer thisStartAddr = new Integer(this.getStartAddress()); Integer thatStartAddr = new Integer(other.getStartAddress()); return thisStartAddr.compareTo(thatStartAddr); }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRangeTest.java,suite,public static Test suite() { return new TestSuite(MemoryRangeTest.class); },https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRangeTest.java,testConstructorThrowsWhenInvalid,"public void testConstructorThrowsWhenInvalid() { doInvalidMemoryRangeTest(0, -1); doInvalidMemoryRangeTest(-1, 0); doInvalidMemoryRangeTest(0, 0); doInvalidMemoryRangeTest(1, 1); doInvalidMemoryRangeTest(1, 0); doInvalidMemoryRangeTest(2, 1); }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRangeTest.java,testConstructorShouldNotThrow,"public void testConstructorShouldNotThrow() throws MemoryRangeException { new MemoryRange(0, 1); new MemoryRange(0, 2); new MemoryRange(1, 2); new MemoryRange(2, 10); }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRangeTest.java,testGetStartAddress,"public void testGetStartAddress() throws MemoryRangeException { MemoryRange r = new MemoryRange(0x101, 0x202); assertEquals(0x101, r.getStartAddress()); }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRangeTest.java,testGetEndAddress,"public void testGetEndAddress() throws MemoryRangeException { MemoryRange r = new MemoryRange(0x101, 0x202); assertEquals(0x202, r.getEndAddress()); }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRangeTest.java,testOverlapsWith,"public void testOverlapsWith() throws MemoryRangeException { MemoryRange a = new MemoryRange(0x0000, 0x0fff); MemoryRange b = new MemoryRange(0x2000, 0x2fff); MemoryRange c = new MemoryRange(0x1000, 0x1fff); MemoryRange d = new MemoryRange(0x0f00, 0x10ff); MemoryRange e = new MemoryRange(0x1fff, 0x20ff); MemoryRange f = new MemoryRange(0x0fff, 0x2000); MemoryRange g = new MemoryRange(0x00ff, 0x0100); MemoryRange h = new MemoryRange(0x20ff, 0x2100); assertFalse(c.overlapsWith(a)); assertFalse(c.overlapsWith(b)); assertFalse(a.overlapsWith(c)); assertFalse(b.overlapsWith(c)); assertFalse(a.overlapsWith(b)); assertFalse(b.overlapsWith(a)); assertTrue(d.overlapsWith(a)); assertTrue(a.overlapsWith(d)); assertTrue(e.overlapsWith(b)); assertTrue(b.overlapsWith(e)); assertTrue(f.overlapsWith(a)); assertTrue(a.overlapsWith(f)); assertTrue(f.overlapsWith(b)); assertTrue(b.overlapsWith(f)); assertTrue(a.overlapsWith(g)); assertTrue(g.overlapsWith(a)); assertFalse(b.overlapsWith(g)); assertFalse(g.overlapsWith(b)); assertFalse(a.overlapsWith(h)); assertFalse(h.overlapsWith(a)); assertTrue(b.overlapsWith(h)); assertTrue(h.overlapsWith(b)); }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRangeTest.java,testIncluded,"public void testIncluded() throws MemoryRangeException { MemoryRange a = new MemoryRange(0x0100, 0x0fff); assertFalse(a.includes(0x0000)); assertFalse(a.includes(0x00ff)); assertTrue(a.includes(0x0100)); assertTrue(a.includes(0x0fff)); assertFalse(a.includes(0x1000)); assertFalse(a.includes(0xffff)); }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRangeTest.java,testCompareTo,"public void testCompareTo() throws MemoryRangeException { MemoryRange a = new MemoryRange(0x0000, 0x0100); MemoryRange b = new MemoryRange(0x0200, 0x0300); MemoryRange c = new MemoryRange(0x0200, 0x0300); assertTrue(a.compareTo(b) == -1); assertTrue(b.compareTo(a) == 1); assertTrue(a.compareTo(a) == 0); assertTrue(b.compareTo(b) == 0); assertTrue(b.compareTo(c) == 0); assertTrue(c.compareTo(b) == 0); try { a.compareTo(null); fail(""Should have thrown NullPointerException""); } catch (NullPointerException ex) { } }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
5bbd72d44e8b5d928c9c847c5391fa86199d78fb,MemoryRangeTest.java,doInvalidMemoryRangeTest,"public void doInvalidMemoryRangeTest(int start, int end) { try { new MemoryRange(start, end); fail(""MemoryRangeException should have been thrown.""); } catch (MemoryRangeException e) { } }",https://www.github.com/sethm/symon/commit/5bbd72d44e8b5d928c9c847c5391fa86199d78fb
af7743b3857b2005c3bd2f4d20c6534e71839579,MemoryRange.java,overlaps,public boolean overlaps(MemoryRange other) { return (this.includes(other.getStartAddress()) || other.includes(this.getStartAddress())); },https://www.github.com/sethm/symon/commit/af7743b3857b2005c3bd2f4d20c6534e71839579
af7743b3857b2005c3bd2f4d20c6534e71839579,MemoryRangeTest.java,testOverlaps,"public void testOverlaps() throws MemoryRangeException { MemoryRange a = new MemoryRange(0x0100, 0x01ff); MemoryRange b = new MemoryRange(0x0200, 0x02ff); MemoryRange c = new MemoryRange(0x01a0, 0x01af); MemoryRange d = new MemoryRange(0x00ff, 0x01a0); MemoryRange e = new MemoryRange(0x01a0, 0x02ff); MemoryRange f = new MemoryRange(0x02a0, 0x02af); MemoryRange g = new MemoryRange(0x01ff, 0x02a0); MemoryRange h = new MemoryRange(0x02a0, 0x03ff); assertFalse(a.overlaps(b)); assertFalse(b.overlaps(a)); assertTrue(a.overlaps(c)); assertTrue(c.overlaps(a)); assertTrue(a.overlaps(d)); assertTrue(d.overlaps(a)); assertTrue(a.overlaps(e)); assertTrue(e.overlaps(a)); assertTrue(b.overlaps(f)); assertTrue(f.overlaps(b)); assertTrue(b.overlaps(g)); assertTrue(g.overlaps(b)); assertTrue(b.overlaps(h)); assertTrue(h.overlaps(b)); }",https://www.github.com/sethm/symon/commit/af7743b3857b2005c3bd2f4d20c6534e71839579
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoder.java,bottom,public int bottom() { return bottom; },https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoder.java,top,public int top() { return top; },https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoder.java,addDevice,public void addDevice(Device device),https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoder.java,isComplete,public boolean isComplete() { if (devices.isEmpty()) { return false; } MemoryRange prev = null; int i = 0; int length = devices.size(); for (Device d : devices) { MemoryRange cur = d.getMemoryRange(); if (i == 0) { if (cur.getStartAddress() != bottom) { return false; } } if (prev != null && i < length - 1) { if (cur.getStartAddress() - 1 != prev.getEndAddress()) { return false; } } if (i == length - 1) { if (cur.getEndAddress() != top) { return false; } } i++; prev = cur; } return true; },https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoder.java,getDevices,public List getDevices() { return new ArrayList(devices); },https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,Device.java,write,"public abstract void write(int address, int data);",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,Device.java,read,public abstract int read(int address);,https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,Device.java,getName,public String getName() { return name; },https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,Device.java,setName,public void setName(String name) { this.name = name; },https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,MemoryRange.java,toString,"public String toString() { StringBuffer desc = new StringBuffer(""@""); desc.append(String.format(""0x%04x"", startAddress)); desc.append(""-""); desc.append(String.format(""0x%04x"", endAddress)); return desc.toString(); }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,Memory.java,write,"public void write(int address, int data) { }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoderTest.java,suite,public static Test suite() { return new TestSuite(AddressDecoderTest.class); },https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoderTest.java,testCreatingWithTopAndBottom,"public void testCreatingWithTopAndBottom() { AddressDecoder ad = null; ad = new AddressDecoder(0x00, 0xff); assertEquals(0x00, ad.bottom()); assertEquals(0xff, ad.top()); ad = new AddressDecoder(0x20, 0xea); assertEquals(0x20, ad.bottom()); assertEquals(0xea, ad.top()); }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoderTest.java,testCreatingWithSize,"public void testCreatingWithSize() { AddressDecoder ad = null; ad = new AddressDecoder(256); assertEquals(0x00, ad.bottom()); assertEquals(0xff, ad.top()); ad = new AddressDecoder(4096); assertEquals(0x000, ad.bottom()); assertEquals(0xfff, ad.top()); ad = new AddressDecoder(65536); assertEquals(0x0000, ad.bottom()); assertEquals(0xffff, ad.top()); }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoderTest.java,testAddDevice,"public void testAddDevice() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x0100, null, true); Device rom = new Memory(0x0100, 0x0200, null, false); AddressDecoder ad = new AddressDecoder(0x0000, 0xffff); assertEquals(0, ad.getDevices().size()); ad.addDevice(memory); assertEquals(1, ad.getDevices().size()); ad.addDevice(rom); assertEquals(2, ad.getDevices().size()); }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoderTest.java,testOverlappingDevicesShouldFail,"public void testOverlappingDevicesShouldFail() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x0100, null, true); Device rom = new Memory(0x00ff, 0x0200, null, false); AddressDecoder ad = new AddressDecoder(0x0000, 0xffff); ad.addDevice(memory); try { ad.addDevice(rom); fail(""Should have thrown a MemoryRangeException.""); } catch (MemoryRangeException ex) { } }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoderTest.java,testIsCompleteWithFirstDeviceNotStartingAtBottom,"public void testIsCompleteWithFirstDeviceNotStartingAtBottom() throws MemoryRangeException { Device memory = new Memory(0x00ff, 0xff00, null, true); AddressDecoder ad = new AddressDecoder(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", ad.isComplete()); ad.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", ad.isComplete()); }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoderTest.java,testIsCompleteWithOneDevice,"public void testIsCompleteWithOneDevice() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x10000, null, true); AddressDecoder ad = new AddressDecoder(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", ad.isComplete()); ad.addDevice(memory); assertTrue(""Address space should have been complete!"", ad.isComplete()); }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoderTest.java,testIsCompleteWithTwoDevices,"public void testIsCompleteWithTwoDevices() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x8000, null, true); Device rom = new Memory(0x8000, 0x8000, null, false); AddressDecoder ad = new AddressDecoder(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", ad.isComplete()); ad.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", ad.isComplete()); ad.addDevice(rom); assertTrue(""Address space should have been complete!"", ad.isComplete()); }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,AddressDecoderTest.java,testIsCompleteWithThreeDevices,"public void testIsCompleteWithThreeDevices() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x8000, null, true); Device rom1 = new Memory(0x8000, 0x4000, null, false); Device rom2 = new Memory(0xC000, 0x4000, null, false); AddressDecoder ad = new AddressDecoder(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", ad.isComplete()); ad.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", ad.isComplete()); ad.addDevice(rom1); assertFalse(""Address space was unexpectedly complete!"", ad.isComplete()); ad.addDevice(rom2); assertTrue(""Address space should have been complete!"", ad.isComplete()); }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
0e212e71e5e2f85c6a690ac9f1db33a08e676884,MemoryRangeTest.java,testToString,"public void testToString() throws MemoryRangeException { MemoryRange a = new MemoryRange(0x0abf, 0xff00); assertEquals(""@0x0abf-0xff00"", a.toString()); MemoryRange b = new MemoryRange(0, 255); assertEquals(""@0x0000-0x00ff"", b.toString()); MemoryRange c = new MemoryRange(0, 65535); assertEquals(""@0x0000-0xffff"", c.toString()); }",https://www.github.com/sethm/symon/commit/0e212e71e5e2f85c6a690ac9f1db33a08e676884
6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f,BusTest.java,suite,public static Test suite() { return new TestSuite(BusTest.class); },https://www.github.com/sethm/symon/commit/6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f
6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f,BusTest.java,testCreatingWithTopAndBottom,"public void testCreatingWithTopAndBottom() { Bus b = null; b = new Bus(0x00, 0xff); assertEquals(0x00, b.bottom()); assertEquals(0xff, b.top()); b = new Bus(0x20, 0xea); assertEquals(0x20, b.bottom()); assertEquals(0xea, b.top()); }",https://www.github.com/sethm/symon/commit/6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f
6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f,BusTest.java,testCreatingWithSize,"public void testCreatingWithSize() { Bus b = null; b = new Bus(256); assertEquals(0x00, b.bottom()); assertEquals(0xff, b.top()); b = new Bus(4096); assertEquals(0x000, b.bottom()); assertEquals(0xfff, b.top()); b = new Bus(65536); assertEquals(0x0000, b.bottom()); assertEquals(0xffff, b.top()); }",https://www.github.com/sethm/symon/commit/6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f
6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f,BusTest.java,testAddDevice,"public void testAddDevice() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x0100, null, true); Device rom = new Memory(0x0100, 0x0200, null, false); Bus b = new Bus(0x0000, 0xffff); assertEquals(0, b.getDevices().size()); b.addDevice(memory); assertEquals(1, b.getDevices().size()); b.addDevice(rom); assertEquals(2, b.getDevices().size()); }",https://www.github.com/sethm/symon/commit/6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f
6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f,BusTest.java,testOverlappingDevicesShouldFail,"public void testOverlappingDevicesShouldFail() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x0100, null, true); Device rom = new Memory(0x00ff, 0x0200, null, false); Bus b = new Bus(0x0000, 0xffff); b.addDevice(memory); try { b.addDevice(rom); fail(""Should have thrown a MemoryRangeException.""); } catch (MemoryRangeException ex) { } }",https://www.github.com/sethm/symon/commit/6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f
6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f,BusTest.java,testIsCompleteWithFirstDeviceNotStartingAtBottom,"public void testIsCompleteWithFirstDeviceNotStartingAtBottom() throws MemoryRangeException { Device memory = new Memory(0x00ff, 0xff00, null, true); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f
6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f,BusTest.java,testIsCompleteWithOneDevice,"public void testIsCompleteWithOneDevice() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x10000, null, true); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertTrue(""Address space should have been complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f
6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f,BusTest.java,testIsCompleteWithTwoDevices,"public void testIsCompleteWithTwoDevices() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x8000, null, true); Device rom = new Memory(0x8000, 0x8000, null, false); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(rom); assertTrue(""Address space should have been complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f
6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f,BusTest.java,testIsCompleteWithThreeDevices,"public void testIsCompleteWithThreeDevices() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x8000, null, true); Device rom1 = new Memory(0x8000, 0x4000, null, false); Device rom2 = new Memory(0xC000, 0x4000, null, false); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(rom1); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(rom2); assertTrue(""Address space should have been complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/6f678af3df6bfa8dd9ce49ca2b31e895c80fdb0f
a54dbc323df730139937cac89597d1ed4011ed9a,Bus.java,startAddress,public int startAddress() { return startAddress; },https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Bus.java,endAddress,public int endAddress() { return endAddress; },https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Bus.java,isComplete,public boolean isComplete() { if (devices.isEmpty()) { return false; } MemoryRange prev = null; int i = 0; int length = devices.size(); for (Device d : devices) { MemoryRange cur = d.getMemoryRange(); if (i == 0) { if (cur.startAddress() != startAddress) { return false; } } if (prev != null && i < length - 1) { if (cur.startAddress() - 1 != prev.endAddress()) { return false; } } if (i == length - 1) { if (cur.endAddress() != endAddress) { return false; } } i++; prev = cur; } return true; },https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Bus.java,read,"public int read(int address) { for (Device d : devices) { MemoryRange range = d.getMemoryRange(); if (range.includes(address)) { int devAddr = address - range.startAddress(); return d.read(devAddr); } } throw new RuntimeException(""Read failed! Device not found.""); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Bus.java,write,"public void write(int address, int value) { for (Device d : devices) { MemoryRange range = d.getMemoryRange(); if (range.includes(address)) { int devAddr = address - range.startAddress(); d.write(devAddr, value); return; } } throw new RuntimeException(""Write failed! Device not found.""); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Bus.java,getDevices,public SortedSet getDevices() { return new TreeSet(devices); },https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,MemoryRange.java,overlaps,public boolean overlaps(MemoryRange other) { return (this.includes(other.startAddress()) || other.includes(this.startAddress())); },https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,MemoryRange.java,compareTo,"public int compareTo(MemoryRange other) { if (other == null) { throw new NullPointerException(""Cannot compare to null.""); } if (this == other) { return 0; } Integer thisStartAddr = new Integer(this.startAddress()); Integer thatStartAddr = new Integer(other.startAddress()); return thisStartAddr.compareTo(thatStartAddr); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Profiler.java,main,"public static void main(String[] args) { try { Bus b = new Bus(0, 65535); b.addDevice(new Memory(0x0000, 0x2000, null)); b.addDevice(new Memory(0x2000, 0x2000, null)); b.addDevice(new Memory(0x4000, 0x2000, null)); b.addDevice(new Memory(0x6000, 0x2000, null)); b.addDevice(new Memory(0x8000, 0x2000, null)); b.addDevice(new Memory(0xa000, 0x2000, null)); b.addDevice(new Memory(0xc000, 0x2000, null)); b.addDevice(new Memory(0xe000, 0x2000, null)); long sum = 0; long average = 0; long iters = 500; for (int i = 0; i < iters; i++) { long startTime = System.nanoTime(); int buf = 0; for (int j = 0; j < 0xffff; j++) { buf = b.read(j); if (buf != 0xff) { System.out.println(""WARNING! MEMORY SHOULD HAVE BEEN $FF, WAS: "" + buf); System.exit(0); } } long endTime = System.nanoTime(); long diff = endTime - startTime; sum += diff; average = sum / (i + 1); } System.out.println(""Average time to read 64KB: "" + average + "" ns ("" + (average / 1000) + "" us)""); System.out.println(""Average time to read one byte: "" + sum / (64 * 1024 * iters) + "" ns""); } catch (MemoryRangeException ex) { System.out.println(""Memory Access Exception! "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Simulator.java,run,public void run() { parser.run(); },https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Device.java,toString,public abstract String toString();,https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Device.java,endAddress,public int endAddress() { return memoryRange.endAddress(); },https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Device.java,startAddress,public int startAddress() { return memoryRange.startAddress(); },https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Device.java,compareTo,"public int compareTo(Device other) { if (other == null) { throw new NullPointerException(""Cannot compare to null.""); } if (this == other) { return 0; } return getMemoryRange().compareTo(other.getMemoryRange()); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Memory.java,write,"public void write(int address, int data) { System.out.println(String.format(""[write] Before write: $%04x=$%04x"", address, this.mem[address])); this.mem[address] = data; System.out.println(String.format(""[write] After write: $%04x=$%04x"", address, this.mem[address])); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Memory.java,read,public int read(int address) { return this.mem[address]; },https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,Memory.java,toString,"public String toString() { return ""Memory: "" + getMemoryRange().toString(); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,BusTest.java,testCreatingWithStartAndEndAddresses,"public void testCreatingWithStartAndEndAddresses() { Bus b = null; b = new Bus(0x00, 0xff); assertEquals(0x00, b.startAddress()); assertEquals(0xff, b.endAddress()); b = new Bus(0x20, 0xea); assertEquals(0x20, b.startAddress()); assertEquals(0xea, b.endAddress()); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,BusTest.java,testCreatingWithSize,"public void testCreatingWithSize() { Bus b = null; b = new Bus(256); assertEquals(0x00, b.startAddress()); assertEquals(0xff, b.endAddress()); b = new Bus(4096); assertEquals(0x000, b.startAddress()); assertEquals(0xfff, b.endAddress()); b = new Bus(65536); assertEquals(0x0000, b.startAddress()); assertEquals(0xffff, b.endAddress()); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,BusTest.java,testIsCompleteWithFirstDeviceNotStartingAtStartAddress,"public void testIsCompleteWithFirstDeviceNotStartingAtStartAddress() throws MemoryRangeException { Device memory = new Memory(0x00ff, 0xff00, null, true); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,MemoryRangeTest.java,testStartAddress,"public void testStartAddress() throws MemoryRangeException { MemoryRange r = new MemoryRange(0x101, 0x202); assertEquals(0x101, r.startAddress()); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
a54dbc323df730139937cac89597d1ed4011ed9a,MemoryRangeTest.java,testEndAddress,"public void testEndAddress() throws MemoryRangeException { MemoryRange r = new MemoryRange(0x101, 0x202); assertEquals(0x202, r.endAddress()); }",https://www.github.com/sethm/symon/commit/a54dbc323df730139937cac89597d1ed4011ed9a
8df561d29283708ab65dd08d589d4d55d7b6b0fc,Bus.java,addCpu,public void addCpu(Cpu cpu) { this.cpu = cpu; },https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,Cpu.java,setBus,public void setBus(Bus bus) { this.bus = bus; },https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,Cpu.java,getBus,public Bus getBus() { return bus; },https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,Cpu.java,reset,public void reset() { sp = 0x01ff; pc = 0xfffc; ir = 0; },https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,Profiler.java,main,"public static void main(String[] args) { try { Bus b = new Bus(0, 65535); b.addDevice(new Memory(0x0000, 0x2000)); b.addDevice(new Memory(0x2000, 0x2000)); b.addDevice(new Memory(0x4000, 0x2000)); b.addDevice(new Memory(0x6000, 0x2000)); b.addDevice(new Memory(0x8000, 0x2000)); b.addDevice(new Memory(0xa000, 0x2000)); b.addDevice(new Memory(0xc000, 0x2000)); b.addDevice(new Memory(0xe000, 0x2000)); long sum = 0; long average = 0; long iters = 500; for (int i = 0; i < iters; i++) { long startTime = System.nanoTime(); int buf = 0; for (int j = 0; j < 0xffff; j++) { buf = b.read(j); if (buf != 0xff) { System.out.println(""WARNING! MEMORY SHOULD HAVE "" + ""BEEN $FF, WAS: "" + buf); System.exit(0); } } long endTime = System.nanoTime(); long diff = endTime - startTime; sum += diff; average = sum / (i + 1); } System.out.println(""Average time to read 64KB: "" + average + "" ns ("" + (average / 1000) + "" us)""); System.out.println(""Average time to read one byte: "" + sum / (64 * 1024 * iters) + "" ns""); } catch (MemoryRangeException ex) { System.out.println(""Memory Access Exception! "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,Memory.java,write,"public void write(int address, int data) { this.mem[address] = data; }",https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,BusTest.java,testAddDevice,"public void testAddDevice() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x0100, true); Device rom = new Memory(0x0100, 0x0200, false); Bus b = new Bus(0x0000, 0xffff); assertEquals(0, b.getDevices().size()); b.addDevice(memory); assertEquals(1, b.getDevices().size()); b.addDevice(rom); assertEquals(2, b.getDevices().size()); }",https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,BusTest.java,testOverlappingDevicesShouldFail,"public void testOverlappingDevicesShouldFail() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x0100, true); Device rom = new Memory(0x00ff, 0x0200, false); Bus b = new Bus(0x0000, 0xffff); b.addDevice(memory); try { b.addDevice(rom); fail(""Should have thrown a MemoryRangeException.""); } catch (MemoryRangeException ex) { } }",https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,BusTest.java,testIsCompleteWithFirstDeviceNotStartingAtStartAddress,"public void testIsCompleteWithFirstDeviceNotStartingAtStartAddress() throws MemoryRangeException { Device memory = new Memory(0x00ff, 0xff00, true); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,BusTest.java,testIsCompleteWithOneDevice,"public void testIsCompleteWithOneDevice() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x10000, true); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertTrue(""Address space should have been complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,BusTest.java,testIsCompleteWithTwoDevices,"public void testIsCompleteWithTwoDevices() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x8000, true); Device rom = new Memory(0x8000, 0x8000, false); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(rom); assertTrue(""Address space should have been complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,BusTest.java,testIsCompleteWithThreeDevices,"public void testIsCompleteWithThreeDevices() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x8000, true); Device rom1 = new Memory(0x8000, 0x4000, false); Device rom2 = new Memory(0xC000, 0x4000, false); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(rom1); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(rom2); assertTrue(""Address space should have been complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
8df561d29283708ab65dd08d589d4d55d7b6b0fc,CpuTest.java,testCpu,public void testCpu() { Cpu cpu = new Cpu(); assertNotNull(cpu); },https://www.github.com/sethm/symon/commit/8df561d29283708ab65dd08d589d4d55d7b6b0fc
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,Cpu.java,step,public void step() { ir = bus.read(pc); incProgramCounter(); },https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,Cpu.java,incProgramCounter,private void incProgramCounter() { if (pc == 0xffff) { pc = 0; } else { ++pc; } },https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Accumulator""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Absolute""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Absolute, X-indexed""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Absolute, Y-indexed""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Immediate""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Implied""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Indirect""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""X-indexed Indirect""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Indirect, Y-indexedY""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Relative""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Zeropage""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Zeropage, X-indexed""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""Zeropage, Y-indexed""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,InstructionTable.java,toString,"public String toString() { return ""NULL""; }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,Profiler.java,main,public static void main(String[] args) { new Profiler().dumpOpCodes(); },https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,Profiler.java,dumpOpCodes,"public void dumpOpCodes() { for (int i = 0; i < 0x100; i++) { String name = opcodeNames[i]; Mode mode = opcodeModes[i]; System.out.print(String.format(""0x%02x: "", i)); if (name == null) { System.out.println(""n/a""); } else { System.out.println(name + "" ("" + mode + "")""); } } }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
d18c1c7f828d8ffc68888f6add8edf4c2b9c6628,Profiler.java,profileMemoryReads,"public void profileMemoryReads() { try { Bus b = new Bus(0, 65535); b.addDevice(new Memory(0x0000, 0x2000)); b.addDevice(new Memory(0x2000, 0x2000)); b.addDevice(new Memory(0x4000, 0x2000)); b.addDevice(new Memory(0x6000, 0x2000)); b.addDevice(new Memory(0x8000, 0x2000)); b.addDevice(new Memory(0xa000, 0x2000)); b.addDevice(new Memory(0xc000, 0x2000)); b.addDevice(new Memory(0xe000, 0x2000)); long sum = 0; long average = 0; long iters = 500; for (int i = 0; i < iters; i++) { long startTime = System.nanoTime(); int buf = 0; for (int j = 0; j < 0xffff; j++) { buf = b.read(j); if (buf != 0xff) { System.out.println(""WARNING! MEMORY SHOULD HAVE "" + ""BEEN $FF, WAS: "" + buf); System.exit(0); } } long endTime = System.nanoTime(); long diff = endTime - startTime; sum += diff; average = sum / (i + 1); } System.out.println(""Average time to read 64KB: "" + average + "" ns ("" + (average / 1000) + "" us)""); System.out.println(""Average time to read one byte: "" + sum / (64 * 1024 * iters) + "" ns""); } catch (MemoryRangeException ex) { System.out.println(""Memory Access Exception! "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/d18c1c7f828d8ffc68888f6add8edf4c2b9c6628
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,Bus.java,addCpu,public void addCpu(Cpu cpu) { cpu.setBus(this); this.cpu = cpu; },https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,Bus.java,getDevices,public SortedSet<Device> getDevices() { return new TreeSet<Device>(devices); },https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,Cpu.java,reset,"public void reset() { sp = 0x01ff; pc = CpuUtils.address(bus.read(0xfffc), bus.read(0xfffd)); ir = 0; }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incProgramCounter(); int size = instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: break; case 0x09: break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: break; case 0x29: break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: break; case 0x49: break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: break; case 0x69: break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: break; case 0xa1: break; case 0xa2: break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: break; case 0xc9: break; case 0xca: break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: break; case 0xe9: break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,Cpu.java,statusString,"public String statusString() { String opcode = CpuUtils.opcode(ir, operands[0], operands[1]); StringBuffer sb = new StringBuffer(String.format(""$%04X"", addr) + "" ""); sb.append(String.format(""%-12s"", opcode)); sb.append(""A="" + String.format(""$%02X"", a) + ""; ""); sb.append(""X="" + String.format(""$%02X"", x) + ""; ""); sb.append(""Y="" + String.format(""$%02X"", y) + ""; ""); sb.append(""PC="" + String.format(""$%04X"", pc)); return sb.toString(); }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,CpuUtils.java,address,"public static int address(int lowByte, int hiByte) { return ((hiByte<<8)|lowByte); }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,CpuUtils.java,opcode,"public static String opcode(int opcode, int op1, int op2) { String opcodeName = Cpu.opcodeNames[opcode]; if (opcodeName == null) { return ""??""; } StringBuffer sb = new StringBuffer(opcodeName); switch (Cpu.instructionModes[opcode]) { case ABS: sb.append(String.format("" $%04X"", address(op1, op2))); break; case IMM: sb.append(String.format("" #$%02X"", op1)); } return sb.toString(); }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,Profiler.java,dumpOpCodes,"public void dumpOpCodes() { for (int i = 0; i < 0x100; i++) { String name = opcodeNames[i]; Mode mode = instructionModes[i]; System.out.print(String.format(""0x%02x: "", i)); if (name == null) { System.out.println(""n/a""); } else { System.out.println(name + "" ("" + mode + "")""); } } }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,Profiler.java,profileMemoryReads,"public void profileMemoryReads() { Bus b = new Bus(0, 65535); try { b.addDevice(new Memory(0x0000, 0x2000)); b.addDevice(new Memory(0x2000, 0x2000)); b.addDevice(new Memory(0x4000, 0x2000)); b.addDevice(new Memory(0x6000, 0x2000)); b.addDevice(new Memory(0x8000, 0x2000)); b.addDevice(new Memory(0xa000, 0x2000)); b.addDevice(new Memory(0xc000, 0x2000)); b.addDevice(new Memory(0xe000, 0x2000)); } catch (MemoryRangeException ex) { System.out.println(""Memory Range Exception! "" + ex.getMessage()); } long sum = 0; long average = 0; long iters = 500; for (int i = 0; i < iters; i++) { long startTime = System.nanoTime(); int buf = 0; for (int j = 0; j < 0xffff; j++) { buf = b.read(j); if (buf != 0xff) { System.out.println(""WARNING! MEMORY SHOULD HAVE "" + ""BEEN $FF, WAS: "" + buf); System.exit(0); } } long endTime = System.nanoTime(); long diff = endTime - startTime; sum += diff; average = sum / (i + 1); } System.out.println(""Average time to read 64KB: "" + average + "" ns ("" + (average / 1000) + "" us)""); System.out.println(""Average time to read one byte: "" + sum / (64 * 1024 * iters) + "" ns""); }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,Simulator.java,runTest,"public void runTest() { bus.write(0xfffc, 0x00); bus.write(0xfffd, 0x03); bus.write(0x0300, 0xa9); bus.write(0x0301, 0xff); bus.write(0x0302, 0xea); bus.write(0x0303, 0xea); bus.write(0x0304, 0xea); bus.write(0x0305, 0xea); bus.write(0x0306, 0xa9); bus.write(0x0307, 0x1a); bus.write(0x0308, 0xea); bus.write(0x0309, 0xea); bus.write(0x030a, 0xa9); bus.write(0x030b, 0x03); bus.write(0x030c, 0x4c); bus.write(0x030d, 0x00); bus.write(0x030e, 0x03); cpu.reset(); for (int i = 0; i < 60; i++) { cpu.step(); System.out.println(cpu.statusString()); } }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,Simulator.java,main,"public static void main(String[] args) { try { new Simulator().runTest(); } catch (MemoryRangeException ex) { System.err.println(""Error: "" + ex.toString()); } }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
fb3db6b65f43fbadf36438139cfb7436bb2b5ac6,CpuUtilsTest.java,testAddress,"public void testAddress() { assertEquals(0xf1ea, CpuUtils.address(0xea, 0xf1)); assertEquals(0x00ea, CpuUtils.address(0xea, 0x00)); assertEquals(0xf100, CpuUtils.address(0x00, 0xf1)); assertEquals(0x1234, CpuUtils.address(0x34, 0x12)); assertEquals(0xffff, CpuUtils.address(0xff, 0xff)); }",https://www.github.com/sethm/symon/commit/fb3db6b65f43fbadf36438139cfb7436bb2b5ac6
6915331cca60d95de7cd1e3b68ee78ce3a2b9dfe,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: break; case 0x09: break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: break; case 0x29: break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: break; case 0x49: break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: break; case 0x69: break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; break; case 0xa1: break; case 0xa2: x = operands[0]; break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: break; case 0xc9: break; case 0xca: break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: break; case 0xe9: break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/6915331cca60d95de7cd1e3b68ee78ce3a2b9dfe
7e36444193a1fda03550933e846bd89df7335de3,Cpu.java,toString,"public String toString() { String opcode = CpuUtils.opcode(ir, operands[0], operands[1]); StringBuffer sb = new StringBuffer(String.format(""$%04X"", addr) + "" ""); sb.append(String.format(""%-12s"", opcode)); sb.append(""A="" + String.format(""$%02X"", a) + ""; ""); sb.append(""X="" + String.format(""$%02X"", x) + ""; ""); sb.append(""Y="" + String.format(""$%02X"", y) + ""; ""); sb.append(""PC="" + String.format(""$%04X"", pc)); return sb.toString(); }",https://www.github.com/sethm/symon/commit/7e36444193a1fda03550933e846bd89df7335de3
7e36444193a1fda03550933e846bd89df7335de3,Cpu.java,push,"protected void push(int data) { bus.write(sp, data); if (sp > 0x100) { sp--; } }",https://www.github.com/sethm/symon/commit/7e36444193a1fda03550933e846bd89df7335de3
7e36444193a1fda03550933e846bd89df7335de3,Cpu.java,pop,protected int pop() { int data = bus.read(sp); if (sp < 0x1ff) { sp++; } return data; },https://www.github.com/sethm/symon/commit/7e36444193a1fda03550933e846bd89df7335de3
7e36444193a1fda03550933e846bd89df7335de3,Cpu.java,incProgramCounter,protected void incProgramCounter() { if (pc == 0xffff) { pc = 0; } else { ++pc; } },https://www.github.com/sethm/symon/commit/7e36444193a1fda03550933e846bd89df7335de3
7e36444193a1fda03550933e846bd89df7335de3,Simulator.java,runTest,"public void runTest() { bus.write(0xfffc, 0x00); bus.write(0xfffd, 0x03); bus.write(0x0300, 0xa9); bus.write(0x0301, 0xff); bus.write(0x0302, 0xea); bus.write(0x0303, 0xea); bus.write(0x0304, 0xea); bus.write(0x0305, 0xa0); bus.write(0x0306, 0x1a); bus.write(0x0307, 0xea); bus.write(0x0308, 0xea); bus.write(0x0309, 0xa2); bus.write(0x030a, 0x03); bus.write(0x030b, 0xa9); bus.write(0x030c, 0x00); bus.write(0x030d, 0xa2); bus.write(0x030e, 0x00); bus.write(0x030f, 0xa0); bus.write(0x0310, 0x00); bus.write(0x0311, 0x4c); bus.write(0x0312, 0x00); bus.write(0x0313, 0x03); cpu.reset(); for (int i = 0; i <= 23; i++) { cpu.step(); System.out.println(cpu.toString()); } }",https://www.github.com/sethm/symon/commit/7e36444193a1fda03550933e846bd89df7335de3
59e557203929a80d59c21f071d46096668127f89,Cpu.java,reset,"public void reset() { sp = 0x01ff; pc = CpuUtils.address(bus.read(0xfffc), bus.read(0xfffd)); ir = 0; carryFlag = false; irqDisableFlag = false; decimalModeFlag = false; breakFlag = false; overflowFlag = false; }",https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,getNegativeFlag,public boolean getNegativeFlag() { return ((a>>>7)&0xff) == 1; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,getCarryFlag,public boolean getCarryFlag() { return carryFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,setCarryFlag,public void setCarryFlag(boolean carryFlag) { this.carryFlag = carryFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,getZeroFlag,public boolean getZeroFlag() { return zeroFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,setZeroFlag,public void setZeroFlag(boolean zeroFlag) { this.zeroFlag = zeroFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,getIrqDisableFlag,public boolean getIrqDisableFlag() { return irqDisableFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,setIrqDisableFlag,public void setIrqDisableFlag(boolean irqDisableFlag) { this.irqDisableFlag = irqDisableFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,getDecimalModeFlag,public boolean getDecimalModeFlag() { return decimalModeFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,setDecimalModeFlag,public void setDecimalModeFlag(boolean decimalModeFlag) { this.decimalModeFlag = decimalModeFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,getBreakFlag,public boolean getBreakFlag() { return breakFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,setBreakFlag,public void setBreakFlag(boolean breakFlag) { this.breakFlag = breakFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,getOverflowFlag,public boolean getOverflowFlag() { return overflowFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,setOverflowFlag,public void setOverflowFlag(boolean overflowFlag) { this.overflowFlag = overflowFlag; },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,statusRegisterString,"public String statusRegisterString() { StringBuffer sb = new StringBuffer(); sb.append(""(N:"" + (getNegativeFlag() ? '1' : '0') + "", ""); sb.append(""V:"" + (getOverflowFlag() ? '1' : '0') + "", ""); sb.append(""B:"" + (getBreakFlag() ? '1' : '0') + "", ""); sb.append(""D:"" + (getDecimalModeFlag() ? '1' : '0') + "", ""); sb.append(""I:"" + (getIrqDisableFlag() ? '1' : '0') + "", ""); sb.append(""Z:"" + (getZeroFlag() ? '1' : '0') + "", ""); sb.append(""C:"" + (getCarryFlag() ? '1' : '0') + "")""); return sb.toString(); }",https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Cpu.java,toString,"public String toString() { String opcode = CpuUtils.opcode(ir, operands[0], operands[1]); StringBuffer sb = new StringBuffer(String.format(""$%04X"", addr) + "" ""); sb.append(String.format(""%-12s"", opcode)); sb.append(""A="" + String.format(""$%02X"", a) + ""; ""); sb.append(""X="" + String.format(""$%02X"", x) + ""; ""); sb.append(""Y="" + String.format(""$%02X"", y) + ""; ""); sb.append(""PC="" + String.format(""$%04X"", pc)+ ""; ""); sb.append(""P="" + statusRegisterString()); return sb.toString(); }",https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Profiler.java,main,public static void main(String[] args) { new Profiler().profileProgram(); },https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Profiler.java,profileProgram,"public void profileProgram() { Bus bus = new Bus(0, 65535); Cpu cpu = new Cpu(); bus.addCpu(cpu); try { bus.addDevice(new Memory(0x0000, 0x10000)); } catch (MemoryRangeException ex) { System.err.println(""Memory Range Exception! "" + ex.getMessage()); return; } bus.write(0xfffc, 0x00); bus.write(0xfffd, 0x03); bus.write(0x0300, 0xa9); bus.write(0x0301, 0xff); bus.write(0x0302, 0xea); bus.write(0x0303, 0xea); bus.write(0x0304, 0xa0); bus.write(0x0305, 0x1a); bus.write(0x0306, 0xea); bus.write(0x0307, 0xea); bus.write(0x0308, 0xa2); bus.write(0x0309, 0x03); bus.write(0x030a, 0xa9); bus.write(0x030b, 0x00); bus.write(0x030c, 0xa2); bus.write(0x030d, 0x00); bus.write(0x030e, 0xa0); bus.write(0x030f, 0x00); bus.write(0x0310, 0x4c); bus.write(0x0311, 0x00); bus.write(0x0312, 0x03); long sum = 0; long iters = 1000; long steps = 100000; for (int i = 0; i < iters; i++) { long startTime = System.nanoTime(); cpu.reset(); for (int j = 0; j < steps; j++) { cpu.step(); } long endTime = System.nanoTime(); long diff = endTime - startTime; sum += diff; } long average = sum / iters; long totalSteps = steps * iters; long avgStep = sum / totalSteps; System.out.println(""Total instructions executed: "" + String.format(""%,d"", totalSteps)); System.out.println(""Total time taken: "" + String.format(""%,d us"", sum / 1000)); System.out.println(""Average time per step: "" + avgStep + "" ns ""); }",https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
59e557203929a80d59c21f071d46096668127f89,Profiler.java,profileMemoryReads,"public void profileMemoryReads() { Bus b = new Bus(0, 65535); try { b.addDevice(new Memory(0x0000, 0x2000)); b.addDevice(new Memory(0x2000, 0x2000)); b.addDevice(new Memory(0x4000, 0x2000)); b.addDevice(new Memory(0x6000, 0x2000)); b.addDevice(new Memory(0x8000, 0x2000)); b.addDevice(new Memory(0xa000, 0x2000)); b.addDevice(new Memory(0xc000, 0x2000)); b.addDevice(new Memory(0xe000, 0x2000)); } catch (MemoryRangeException ex) { System.err.println(""Memory Range Exception! "" + ex.getMessage()); return; } long sum = 0; long average = 0; long iters = 500; for (int i = 0; i < iters; i++) { long startTime = System.nanoTime(); int buf = 0; for (int j = 0; j < 0xffff; j++) { buf = b.read(j); if (buf != 0xff) { System.out.println(""WARNING! MEMORY SHOULD HAVE "" + ""BEEN $FF, WAS: "" + buf); System.exit(0); } } long endTime = System.nanoTime(); long diff = endTime - startTime; sum += diff; average = sum / (i + 1); } System.out.println(""Average time to read 64KB: "" + average + "" ns ("" + (average / 1000) + "" us)""); System.out.println(""Average time to read one byte: "" + sum / (64 * 1024 * iters) + "" ns""); }",https://www.github.com/sethm/symon/commit/59e557203929a80d59c21f071d46096668127f89
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: break; case 0x09: break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: break; case 0x29: break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: break; case 0x49: break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: break; case 0x69: break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setZeroFlag(y); setNegativeFlag(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setZeroFlag(x); setNegativeFlag(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; setZeroFlag(a); setNegativeFlag(a); break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: break; case 0xc9: break; case 0xca: break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: break; case 0xe9: break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,getNegativeFlag,public boolean getNegativeFlag() { return negativeFlag; },https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,setNegativeFlag,public void setNegativeFlag(int register) { this.negativeFlag = (((register>>>7)&0xff) == 1); },https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,setNegativeFlag,public void setNegativeFlag(boolean negativeFlag) { this.negativeFlag = negativeFlag; },https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,setZeroFlag,public void setZeroFlag(int register) { this.zeroFlag = (register == 0); },https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,getAccumulator,public int getAccumulator() { return a; },https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,getXRegister,public int getXRegister() { return x; },https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,getYRegister,public int getYRegister() { return y; },https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,getProgramCounter,public int getProgramCounter() { return pc; },https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Cpu.java,toString,"public String toString() { String opcode = CpuUtils.opcode(ir, operands[0], operands[1]); StringBuffer sb = new StringBuffer(String.format(""$%04X"", addr) + "" ""); sb.append(String.format(""%-14s"", opcode)); sb.append(""A="" + String.format(""$%02X"", a) + "" ""); sb.append(""X="" + String.format(""$%02X"", x) + "" ""); sb.append(""Y="" + String.format(""$%02X"", y) + "" ""); sb.append(""PC="" + String.format(""$%04X"", pc)+ "" ""); sb.append(""P="" + statusRegisterString()); return sb.toString(); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuUtils.java,opcode,"public static String opcode(int opcode, int op1, int op2) { String opcodeName = Cpu.opcodeNames[opcode]; if (opcodeName == null) { return ""???""; } StringBuffer sb = new StringBuffer(opcodeName); switch (Cpu.instructionModes[opcode]) { case ABS: sb.append(String.format("" $%04X"", address(op1, op2))); break; case IMM: sb.append(String.format("" #$%02X"", op1)); } return sb.toString(); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,Simulator.java,runTest,"public void runTest() { bus.write(0xfffc, 0x00); bus.write(0xfffd, 0x03); bus.write(0x0300, 0xa9); bus.write(0x0301, 0xff); bus.write(0x0302, 0xea); bus.write(0x0303, 0xea); bus.write(0x0304, 0xea); bus.write(0x0305, 0xa0); bus.write(0x0306, 0x1a); bus.write(0x0307, 0xea); bus.write(0x0308, 0xea); bus.write(0x0309, 0xa2); bus.write(0x030a, 0x90); bus.write(0x030b, 0xea); bus.write(0x030c, 0xea); bus.write(0x030d, 0xea); bus.write(0x030e, 0xa2); bus.write(0x030f, 0x02); bus.write(0x0310, 0xa9); bus.write(0x0311, 0x00); bus.write(0x0312, 0xa2); bus.write(0x0313, 0x00); bus.write(0x0314, 0xa0); bus.write(0x0315, 0x00); bus.write(0x0316, 0x4c); bus.write(0x0317, 0x00); bus.write(0x0318, 0x03); cpu.reset(); for (int i = 0; i <= 40; i++) { cpu.step(); System.out.println(cpu.toString()); } }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,setUp,"public void setUp() throws MemoryRangeException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(new Memory(0x0000, 0x10000)); bus.write(0xfffc, 0x00); bus.write(0xfffd, 0x02); cpu.reset(); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,testReset,"public void testReset() { assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x0200, cpu.getProgramCounter()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDA_IMM_SetsAccumulator,"public void test_LDA_IMM_SetsAccumulator() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x12); cpu.step(); assertEquals(0x12, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDA_IMM_SetsZeroFlagIfArgIsZero,"public void test_LDA_IMM_SetsZeroFlagIfArgIsZero() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDA_IMM_DoesNotSetZeroFlagIfArgNotZero,"public void test_LDA_IMM_DoesNotSetZeroFlagIfArgNotZero() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDA_IMM_SetsNegativeFlagIfArgIsNegative,"public void test_LDA_IMM_SetsNegativeFlagIfArgIsNegative() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDA_IMM_DoesNotSetNegativeFlagIfArgNotNegative,"public void test_LDA_IMM_DoesNotSetNegativeFlagIfArgNotNegative() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDX_IMM_SetsXRegister,"public void test_LDX_IMM_SetsXRegister() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x12); cpu.step(); assertEquals(0x12, cpu.getXRegister()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDX_IMM_SetsZeroFlagIfArgIsZero,"public void test_LDX_IMM_SetsZeroFlagIfArgIsZero() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDX_IMM_DoesNotSetZeroFlagIfArgNotZero,"public void test_LDX_IMM_DoesNotSetZeroFlagIfArgNotZero() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDX_IMM_SetsNegativeFlagIfArgIsNegative,"public void test_LDX_IMM_SetsNegativeFlagIfArgIsNegative() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDX_IMM_DoesNotSetNegativeFlagIfArgNotNegative,"public void test_LDX_IMM_DoesNotSetNegativeFlagIfArgNotNegative() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDY_IMM_SetsYRegister,"public void test_LDY_IMM_SetsYRegister() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x12); cpu.step(); assertEquals(0x12, cpu.getYRegister()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDY_IMM_SetsZeroFlagIfArgIsZero,"public void test_LDY_IMM_SetsZeroFlagIfArgIsZero() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDY_IMM_DoesNotSetZeroFlagIfArgNotZero,"public void test_LDY_IMM_DoesNotSetZeroFlagIfArgNotZero() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDY_IMM_SetsNegativeFlagIfArgIsNegative,"public void test_LDY_IMM_SetsNegativeFlagIfArgIsNegative() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
9a6a256073e981c4dadbd25c0e586f7337d783ed,CpuTest.java,test_LDY_IMM_DoesNotSetNegativeFlagIfArgNotNegative,"public void test_LDY_IMM_DoesNotSetNegativeFlagIfArgNotNegative() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/9a6a256073e981c4dadbd25c0e586f7337d783ed
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: break; case 0x09: a |= operands[0]; setZeroFlag(a); setNegativeFlag(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: break; case 0x29: a &= operands[0]; setZeroFlag(a); setNegativeFlag(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: break; case 0x49: a ^= operands[0]; setZeroFlag(a); setNegativeFlag(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: break; case 0x69: break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setZeroFlag(y); setNegativeFlag(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setZeroFlag(x); setNegativeFlag(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; setZeroFlag(a); setNegativeFlag(a); break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: break; case 0xc9: break; case 0xca: break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: break; case 0xe9: break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,Simulator.java,loadProgram,"public void loadProgram(int address, int[] program) { int hi = (address&0xff00)>>>8; int lo = address&0x00ff; bus.write(0xfffc, lo); bus.write(0xfffd, hi); int i = 0; for (int d : program) { bus.write(address + i, program[i++]); } }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,Simulator.java,runTest,"public void runTest() { int[] program = { 0xa9, 0xff, 0xa0, 0x1a, 0xa2, 0x90, 0xa2, 0x02, 0x49, 0xff, 0xa9, 0x00, 0xa2, 0x00, 0x29, 0xff, 0xa0, 0x00, 0x4c, 0x00, 0x03 }; loadProgram(0x0300, program); cpu.reset(); int steps = program.length; for (int i = 0; i <= steps; i++) { cpu.step(); System.out.println(cpu.toString()); } }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,setUp,"public void setUp() throws MemoryRangeException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, 0x00); bus.write(0xfffd, 0x02); cpu.reset(); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_ORA_SetsAccumulator,"public void test_ORA_SetsAccumulator() { bus.write(0x0200, 0x09); bus.write(0x0201, 0x00); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); bus.write(0x0202, 0x09); bus.write(0x0203, 0x11); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); bus.write(0x0204, 0x09); bus.write(0x0205, 0x22); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); bus.write(0x0206, 0x09); bus.write(0x0207, 0x44); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); bus.write(0x0208, 0x09); bus.write(0x0209, 0x88); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_ORA_SetsZeroFlagIfResultIsZero,"public void test_ORA_SetsZeroFlagIfResultIsZero() { bus.write(0x0200, 0x09); bus.write(0x0201, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_ORA_DoesNotSetZeroFlagIfResultNotZero,"public void test_ORA_DoesNotSetZeroFlagIfResultNotZero() { bus.write(0x0200, 0x09); bus.write(0x0201, 0x01); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_ORA_SetsNegativeFlagIfResultIsNegative,"public void test_ORA_SetsNegativeFlagIfResultIsNegative() { bus.write(0x0200, 0x09); bus.write(0x0201, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_ORA_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_ORA_DoesNotSetNegativeFlagIfResultNotNegative() { bus.write(0x0200, 0x09); bus.write(0x0201, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_AND_SetsAccumulator,"public void test_AND_SetsAccumulator() { bus.write(0x0200, 0x29); bus.write(0x0201, 0x00); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); bus.write(0x0202, 0x29); bus.write(0x0203, 0x11); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); bus.write(0x0204, 0xa9); bus.write(0x0205, 0xaa); cpu.step(); bus.write(0x0206, 0x29); bus.write(0x0207, 0xff); cpu.step(); assertEquals(0xaa, cpu.getAccumulator()); bus.write(0x0208, 0x29); bus.write(0x0209, 0x99); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); bus.write(0x020a, 0x29); bus.write(0x020b, 0x11); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_AND_SetsZeroFlagIfResultIsZero,"public void test_AND_SetsZeroFlagIfResultIsZero() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x88); cpu.step(); bus.write(0x0202, 0x29); bus.write(0x0203, 0x11); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_AND_DoesNotSetZeroFlagIfResultNotZero,"public void test_AND_DoesNotSetZeroFlagIfResultNotZero() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x88); cpu.step(); bus.write(0x0202, 0x29); bus.write(0x0203, 0xf1); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_AND_SetsNegativeFlagIfResultIsNegative,"public void test_AND_SetsNegativeFlagIfResultIsNegative() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x88); cpu.step(); bus.write(0x0202, 0x29); bus.write(0x0203, 0xf0); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_AND_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_AND_DoesNotSetNegativeFlagIfResultNotNegative() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x88); cpu.step(); bus.write(0x0202, 0x29); bus.write(0x0203, 0x0f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_EOR_SetsAccumulator,"public void test_EOR_SetsAccumulator() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x88); cpu.step(); bus.write(0x0202, 0x49); bus.write(0x0203, 0x00); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); bus.write(0x0204, 0x49); bus.write(0x0205, 0xff); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); bus.write(0x0206, 0x49); bus.write(0x0207, 0x33); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDY_SetsYRegister,"public void test_LDY_SetsYRegister() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x12); cpu.step(); assertEquals(0x12, cpu.getYRegister()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDY_SetsZeroFlagIfArgIsZero,"public void test_LDY_SetsZeroFlagIfArgIsZero() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDY_DoesNotSetZeroFlagIfResultNotZero,"public void test_LDY_DoesNotSetZeroFlagIfResultNotZero() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDY_SetsNegativeFlagIfResultIsNegative,"public void test_LDY_SetsNegativeFlagIfResultIsNegative() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDY_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_LDY_DoesNotSetNegativeFlagIfResultNotNegative() { bus.write(0x0200, 0xa0); bus.write(0x0201, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDX_SetsXRegister,"public void test_LDX_SetsXRegister() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x12); cpu.step(); assertEquals(0x12, cpu.getXRegister()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDX_SetsZeroFlagIfResultIsZero,"public void test_LDX_SetsZeroFlagIfResultIsZero() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDX_DoesNotSetZeroFlagIfResultNotZero,"public void test_LDX_DoesNotSetZeroFlagIfResultNotZero() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDX_SetsNegativeFlagIfResultIsNegative,"public void test_LDX_SetsNegativeFlagIfResultIsNegative() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDX_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_LDX_DoesNotSetNegativeFlagIfResultNotNegative() { bus.write(0x0200, 0xa2); bus.write(0x0201, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDA_SetsAccumulator,"public void test_LDA_SetsAccumulator() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x12); cpu.step(); assertEquals(0x12, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDA_SetsZeroFlagIfResultIsZero,"public void test_LDA_SetsZeroFlagIfResultIsZero() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDA_DoesNotSetZeroFlagIfResultNotZero,"public void test_LDA_DoesNotSetZeroFlagIfResultNotZero() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDA_SetsNegativeFlagIfResultIsNegative,"public void test_LDA_SetsNegativeFlagIfResultIsNegative() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9,CpuImmediateModeTests.java,test_LDA_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_LDA_DoesNotSetNegativeFlagIfResultNotNegative() { bus.write(0x0200, 0xa9); bus.write(0x0201, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1c6c5fdaeb816b0c10b7c43dc84d2b9834a2f5c9
6443cacdb9f5367c979536be71392ec2c4cfd9b6,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: break; case 0x09: a |= operands[0]; setZeroFlag(a); setNegativeFlag(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: break; case 0x29: a &= operands[0]; setZeroFlag(a); setNegativeFlag(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: break; case 0x49: a ^= operands[0]; setZeroFlag(a); setNegativeFlag(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: break; case 0x69: boolean sign = (a < 0x80); a += (operands[0] + (carryFlag ? 1 : 0)); if (a > 0xff) { a &= 0xff; setCarryFlag(true); } if (sign != a < 0x80) { setOverflowFlag(true); } setZeroFlag(a); setNegativeFlag(a); break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setZeroFlag(y); setNegativeFlag(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setZeroFlag(x); setNegativeFlag(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; setZeroFlag(a); setNegativeFlag(a); break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: break; case 0xc9: break; case 0xca: break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: break; case 0xe9: break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/6443cacdb9f5367c979536be71392ec2c4cfd9b6
6443cacdb9f5367c979536be71392ec2c4cfd9b6,CpuImmediateModeTests.java,test_ADC_SetsAccumulator,"public void test_ADC_SetsAccumulator() { bus.write(0x200, 0x69); bus.write(0x201, 0x01); cpu.step(); assertEquals(0x01, cpu.getAccumulator()); bus.write(0x202, 0x69); bus.write(0x203, 0xa0); cpu.step(); assertEquals(0xa1, cpu.getAccumulator()); bus.write(0x204, 0x69); bus.write(0x205, 0x02); cpu.step(); assertEquals(0xa3, cpu.getAccumulator()); bus.write(0x206, 0x69); bus.write(0x207, 0x06); cpu.step(); assertEquals(0xa9, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/6443cacdb9f5367c979536be71392ec2c4cfd9b6
6443cacdb9f5367c979536be71392ec2c4cfd9b6,CpuImmediateModeTests.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() { cpu.setCarryFlag(true); bus.write(0x200, 0x69); bus.write(0x201, 0x01); cpu.step(); assertEquals(0x02, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/6443cacdb9f5367c979536be71392ec2c4cfd9b6
6443cacdb9f5367c979536be71392ec2c4cfd9b6,CpuImmediateModeTests.java,test_ADC_SetsCarryIfResultOverflows,"public void test_ADC_SetsCarryIfResultOverflows() { bus.write(0x200, 0xa9); bus.write(0x201, 0xff); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x02); cpu.step(); assertEquals(0x01, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/6443cacdb9f5367c979536be71392ec2c4cfd9b6
6443cacdb9f5367c979536be71392ec2c4cfd9b6,CpuImmediateModeTests.java,test_ADC_SetsOverflowIfResultChangesSign,"public void test_ADC_SetsOverflowIfResultChangesSign() { bus.write(0x200, 0xa9); bus.write(0x201, 0x7f); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/6443cacdb9f5367c979536be71392ec2c4cfd9b6
6443cacdb9f5367c979536be71392ec2c4cfd9b6,CpuImmediateModeTests.java,test_ADC_SetsNegativeFlagIfResultIsNegative,"public void test_ADC_SetsNegativeFlagIfResultIsNegative() { bus.write(0x200, 0xa9); bus.write(0x201, 0x7f); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/6443cacdb9f5367c979536be71392ec2c4cfd9b6
6443cacdb9f5367c979536be71392ec2c4cfd9b6,CpuImmediateModeTests.java,test_ADC_SetsZeroFlagIfResultIsZero,"public void test_ADC_SetsZeroFlagIfResultIsZero() { bus.write(0x200, 0xa9); bus.write(0x201, 0xff); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/6443cacdb9f5367c979536be71392ec2c4cfd9b6
6443cacdb9f5367c979536be71392ec2c4cfd9b6,CpuImmediateModeTests.java,test_ADC_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_ADC_DoesNotSetNegativeFlagIfResultNotNegative() { bus.write(0x200, 0xa9); bus.write(0x201, 0x7e); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/6443cacdb9f5367c979536be71392ec2c4cfd9b6
6443cacdb9f5367c979536be71392ec2c4cfd9b6,CpuImmediateModeTests.java,test_ADC_DoesNotSetZeroFlagIfResultNotZero,"public void test_ADC_DoesNotSetZeroFlagIfResultNotZero() { bus.write(0x200, 0xa9); bus.write(0x201, 0xff); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x03); cpu.step(); assertEquals(0x2, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/6443cacdb9f5367c979536be71392ec2c4cfd9b6
1bd59b048b43a610d63ee2968865dfe0a643596f,Bus.java,getCpu,public Cpu getCpu() { return cpu; },https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,Bus.java,loadProgram,"public void loadProgram(int... program) { int address = getCpu().getProgramCounter(); int i = 0; for (int d : program) { write(address + i++, d); } }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,Cpu.java,step,public void step(int num) { for (int i = 0; i < num; i++) { step(); } },https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: break; case 0x69: a = adc(a, operands[0]); setArithmeticFlags(a); break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: break; case 0xc9: break; case 0xca: break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: break; case 0xe9: break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,Cpu.java,adc,"public int adc(int acc, int operand) { int result = operand + a + (carryFlag ? 1 : 0); int carry = (operand & 0x7f) + (a & 0x7f) + (carryFlag ? 1 : 0); if (result > 0xff) { setCarryFlag(true); } result = result & 0xff; setOverflowFlag(carryFlag ^ ((carry & 0x80) != 0)); return result; }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,Cpu.java,setArithmeticFlags,public void setArithmeticFlags(int reg) { zeroFlag = (reg == 0); negativeFlag = (reg & 0x80) != 0; },https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,Cpu.java,setNegativeFlag,public void setNegativeFlag(int register) { },https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,Simulator.java,loadProgram,"public void loadProgram(int address, int[] program) { int hi = (address&0xff00)>>>8; int lo = address&0x00ff; bus.write(0xfffc, lo); bus.write(0xfffd, hi); int i = 0; for (int d : program) { bus.write(address + i++, d); } }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,setUp,"public void setUp() throws MemoryRangeException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Cpu.DEFAULT_BASE_ADDRESS & 0x00ff); bus.write(0xfffd, (Cpu.DEFAULT_BASE_ADDRESS & 0xff00)>>>8); cpu.reset(); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ORA_SetsAccumulator,"public void test_ORA_SetsAccumulator() { bus.loadProgram(0x09, 0x00, 0x09, 0x11, 0x09, 0x22, 0x09, 0x44, 0x09, 0x88); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ORA_SetsZeroFlagIfResultIsZero,"public void test_ORA_SetsZeroFlagIfResultIsZero() { bus.loadProgram(0x09, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ORA_DoesNotSetZeroFlagIfResultNotZero,"public void test_ORA_DoesNotSetZeroFlagIfResultNotZero() { bus.loadProgram(0x09, 0x01); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ORA_SetsNegativeFlagIfResultIsNegative,"public void test_ORA_SetsNegativeFlagIfResultIsNegative() { bus.loadProgram(0x09, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ORA_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_ORA_DoesNotSetNegativeFlagIfResultNotNegative() { bus.loadProgram(0x09, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_AND_DoesNotSetZeroFlagIfResultNotZero,"public void test_AND_DoesNotSetZeroFlagIfResultNotZero() { bus.loadProgram(0xa9, 0x88, 0x29, 0xf1); cpu.step(2); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_AND_SetsNegativeFlagIfResultIsNegative,"public void test_AND_SetsNegativeFlagIfResultIsNegative() { bus.loadProgram(0xa9, 0x88, 0x29, 0xf0); cpu.step(2); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_AND_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_AND_DoesNotSetNegativeFlagIfResultNotNegative() { bus.loadProgram(0xa9, 0x88, 0x29, 0x0f); cpu.step(2); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_EOR_SetsAccumulator,"public void test_EOR_SetsAccumulator() { bus.loadProgram(0xa9, 0x88, 0x49, 0x00, 0x49, 0xff, 0x49, 0x33); cpu.step(); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_EOR_SetsArithmeticFlags,"public void test_EOR_SetsArithmeticFlags() { bus.loadProgram(0xa9, 0x77, 0x49, 0x77, 0x49, 0xff); cpu.step(); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ADC_SetsCarryIfResultCarries,"public void test_ADC_SetsCarryIfResultCarries() { bus.write(0x200, 0xa9); bus.write(0x201, 0xff); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x02); cpu.step(); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ADC_SetsOverflowIfResultChangesSign,"public void test_ADC_SetsOverflowIfResultChangesSign() { bus.write(0x200, 0xa9); bus.write(0x201, 0x7f); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); assertTrue(cpu.getOverflowFlag()); cpu.reset(); bus.write(0x200, 0xa9); bus.write(0x201, 0x80); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0xff); cpu.step(); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ADC_DoesNotSetOverflowIfNotNeeded,"public void test_ADC_DoesNotSetOverflowIfNotNeeded() { bus.write(0x200, 0xa9); bus.write(0x201, 0xff); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.reset(); bus.write(0x200, 0xa9); bus.write(0x201, 0x01); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ADC_SetsNegativeFlagIfResultIsNegative,"public void test_ADC_SetsNegativeFlagIfResultIsNegative() { bus.write(0x200, 0xa9); bus.write(0x201, 0x7f); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ADC_SetsZeroFlagIfResultIsZero,"public void test_ADC_SetsZeroFlagIfResultIsZero() { bus.write(0x200, 0xa9); bus.write(0x201, 0xff); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ADC_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_ADC_DoesNotSetNegativeFlagIfResultNotNegative() { bus.write(0x200, 0xa9); bus.write(0x201, 0x7e); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x01); cpu.step(); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
1bd59b048b43a610d63ee2968865dfe0a643596f,CpuImmediateModeTests.java,test_ADC_DoesNotSetZeroFlagIfResultNotZero,"public void test_ADC_DoesNotSetZeroFlagIfResultNotZero() { bus.write(0x200, 0xa9); bus.write(0x201, 0xff); cpu.step(); bus.write(0x202, 0x69); bus.write(0x203, 0x03); cpu.step(); assertEquals(0x2, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/1bd59b048b43a610d63ee2968865dfe0a643596f
088b0823e12943596a9e6dd4275306833364334b,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: break; case 0x69: a = adc(a, operands[0]); setArithmeticFlags(a); break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: break; case 0xc9: cmp(a, operands[0]); break; case 0xca: break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: break; case 0xe9: a = sbc(a, operands[0]); setArithmeticFlags(a); break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,Cpu.java,adc,"public int adc(int acc, int operand) { int result = operand + acc + (carryFlag ? 1 : 0); int carry = (operand & 0x7f) + (acc & 0x7f) + (carryFlag ? 1 : 0); setCarryFlag(result > 0xff); result = result & 0xff; setOverflowFlag(carryFlag ^ ((carry & 0x80) != 0)); return result; }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,Cpu.java,sbc,"public int sbc(int acc, int operand) { return adc(acc, (--operand) ^ 0xff); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,Cpu.java,cmp,"public void cmp(int reg, int operand) { setCarryFlag(reg >= operand); setZeroFlag(reg == operand); setNegativeFlag((reg - operand) > 0); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_AND_SetsAccumulator,"public void test_AND_SetsAccumulator() { bus.loadProgram(0x29, 0x00, 0x29, 0x11, 0xa9, 0xaa, 0x29, 0xff, 0x29, 0x99, 0x29, 0x11); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_AND_SetsZeroFlagIfResultIsZero,"public void test_AND_SetsZeroFlagIfResultIsZero() { bus.loadProgram(0xa9, 0x88, 0x29, 0x11); cpu.step(2); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_EOR_SetsAccumulator,"public void test_EOR_SetsAccumulator() { bus.loadProgram(0xa9, 0x88, 0x49, 0x00, 0x49, 0xff, 0x49, 0x33); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_EOR_SetsArithmeticFlags,"public void test_EOR_SetsArithmeticFlags() { bus.loadProgram(0xa9, 0x77, 0x49, 0x77, 0x49, 0xff); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_ADC_SetsAccumulator,"public void test_ADC_SetsAccumulator() { bus.loadProgram(0x69, 0x01, 0x69, 0xa0, 0x69, 0x02, 0x69, 0x06); cpu.step(); assertEquals(0x01, cpu.getAccumulator()); cpu.step(); assertEquals(0xa1, cpu.getAccumulator()); cpu.step(); assertEquals(0xa3, cpu.getAccumulator()); cpu.step(); assertEquals(0xa9, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() { cpu.setCarryFlag(true); bus.loadProgram(0x69, 0x01); cpu.step(); assertEquals(0x02, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_ADC_SetsCarryIfResultCarries,"public void test_ADC_SetsCarryIfResultCarries() { bus.loadProgram(0xa9, 0xff, 0x69, 0x02); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_ADC_SetsOverflowIfResultChangesSign,"public void test_ADC_SetsOverflowIfResultChangesSign() { bus.loadProgram(0xa9, 0x7f, 0x69, 0x01); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); assertTrue(cpu.getOverflowFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x69, 0xff); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_ADC_DoesNotSetOverflowIfNotNeeded,"public void test_ADC_DoesNotSetOverflowIfNotNeeded() { bus.loadProgram(0xa9, 0xff, 0x69, 0x01); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x01, 0x69, 0x01); cpu.step(2); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_ADC_SetsNegativeFlagIfResultIsNegative,"public void test_ADC_SetsNegativeFlagIfResultIsNegative() { bus.loadProgram(0xa9, 0x7f, 0x69, 0x01); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_ADC_SetsZeroFlagIfResultIsZero,"public void test_ADC_SetsZeroFlagIfResultIsZero() { bus.loadProgram(0xa9, 0xff, 0x69, 0x01); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_ADC_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_ADC_DoesNotSetNegativeFlagIfResultNotNegative() { bus.loadProgram(0xa9, 0x7e, 0x69, 0x01); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_ADC_DoesNotSetZeroFlagIfResultNotZero,"public void test_ADC_DoesNotSetZeroFlagIfResultNotZero() { bus.loadProgram(0xa9, 0xff, 0x69, 0x03); cpu.step(2); assertEquals(0x2, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDY_SetsYRegister,"public void test_LDY_SetsYRegister() { bus.loadProgram(0xa0, 0x12); cpu.step(); assertEquals(0x12, cpu.getYRegister()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDY_SetsZeroFlagIfArgIsZero,"public void test_LDY_SetsZeroFlagIfArgIsZero() { bus.loadProgram(0xa0, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDY_DoesNotSetZeroFlagIfResultNotZero,"public void test_LDY_DoesNotSetZeroFlagIfResultNotZero() { bus.loadProgram(0xa0, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDY_SetsNegativeFlagIfResultIsNegative,"public void test_LDY_SetsNegativeFlagIfResultIsNegative() { bus.loadProgram(0xa0, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDY_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_LDY_DoesNotSetNegativeFlagIfResultNotNegative() { bus.loadProgram(0xa0, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDX_SetsXRegister,"public void test_LDX_SetsXRegister() { bus.loadProgram(0xa2, 0x12); cpu.step(); assertEquals(0x12, cpu.getXRegister()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDX_SetsZeroFlagIfResultIsZero,"public void test_LDX_SetsZeroFlagIfResultIsZero() { bus.loadProgram(0xa2, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDX_DoesNotSetZeroFlagIfResultNotZero,"public void test_LDX_DoesNotSetZeroFlagIfResultNotZero() { bus.loadProgram(0xa2, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDX_SetsNegativeFlagIfResultIsNegative,"public void test_LDX_SetsNegativeFlagIfResultIsNegative() { bus.loadProgram(0xa2, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDX_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_LDX_DoesNotSetNegativeFlagIfResultNotNegative() { bus.loadProgram(0xa2, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDA_SetsAccumulator,"public void test_LDA_SetsAccumulator() { bus.loadProgram(0xa9, 0x12); cpu.step(); assertEquals(0x12, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDA_SetsZeroFlagIfResultIsZero,"public void test_LDA_SetsZeroFlagIfResultIsZero() { bus.loadProgram(0xa9, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDA_DoesNotSetZeroFlagIfResultNotZero,"public void test_LDA_DoesNotSetZeroFlagIfResultNotZero() { bus.loadProgram(0xa9, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDA_SetsNegativeFlagIfResultIsNegative,"public void test_LDA_SetsNegativeFlagIfResultIsNegative() { bus.loadProgram(0xa9, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_LDA_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_LDA_DoesNotSetNegativeFlagIfResultNotNegative() { bus.loadProgram(0xa9, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_CPY_SetsZeroAndCarryFlagsIfNumbersSame,"public void test_CPY_SetsZeroAndCarryFlagsIfNumbersSame() { bus.loadProgram(0xa0, 0x00, 0xc0, 0x00); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0x01, 0xc0, 0x01); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0x7f, 0xc0, 0x7f); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0xFF, 0xc0, 0xFF); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_CPY_SetsCarryFlagIfYGreaterThanMemory,"public void test_CPY_SetsCarryFlagIfYGreaterThanMemory() { bus.loadProgram(0xa0, 0x0a, 0xc0, 0x08); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0xfa, 0xc0, 0x80); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_CPY_DoesNotSetCarryFlagIfYGreaterThanMemory,"public void test_CPY_DoesNotSetCarryFlagIfYGreaterThanMemory() { bus.loadProgram(0xa0, 0x08, 0xc0, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0x70, 0xc0, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_CMP_SetsZeroAndCarryFlagsIfNumbersSame,"public void test_CMP_SetsZeroAndCarryFlagsIfNumbersSame() { bus.loadProgram(0xa9, 0x00, 0xc9, 0x00); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x01, 0xc9, 0x01); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xc9, 0x7f); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xFF, 0xc9, 0xFF); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_CMP_SetsCarryFlagIfYGreaterThanMemory,"public void test_CMP_SetsCarryFlagIfYGreaterThanMemory() { bus.loadProgram(0xa9, 0x0a, 0xc9, 0x08); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xfa, 0xc9, 0x80); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_CMP_DoesNotSetCarryFlagIfYGreaterThanMemory,"public void test_CMP_DoesNotSetCarryFlagIfYGreaterThanMemory() { bus.loadProgram(0xa9, 0x08, 0xc9, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x70, 0xc9, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_CPX_SetsZeroAndCarryFlagsIfNumbersSame,"public void test_CPX_SetsZeroAndCarryFlagsIfNumbersSame() { bus.loadProgram(0xa2, 0x00, 0xe0, 0x00); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0x01, 0xe0, 0x01); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0x7f, 0xe0, 0x7f); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0xFF, 0xe0, 0xFF); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_CPX_SetsCarryFlagIfYGreaterThanMemory,"public void test_CPX_SetsCarryFlagIfYGreaterThanMemory() { bus.loadProgram(0xa2, 0x0a, 0xe0, 0x08); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0xfa, 0xe0, 0x80); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_CPX_DoesNotSetCarryFlagIfYGreaterThanMemory,"public void test_CPX_DoesNotSetCarryFlagIfYGreaterThanMemory() { bus.loadProgram(0xa2, 0x08, 0xe0, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0x70, 0xe0, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
088b0823e12943596a9e6dd4275306833364334b,CpuImmediateModeTest.java,test_SBC_SetsAccumulator,"public void test_SBC_SetsAccumulator() { bus.loadProgram(0xa9, 0xff, 0xe9, 0x01, 0xe9, 0x01, 0xe9, 0x01, 0xe9, 0x01); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0xfc, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0xfb, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0xfa, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/088b0823e12943596a9e6dd4275306833364334b
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: break; case 0x69: a = adc(a, operands[0]); setArithmeticFlags(a); break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: break; case 0xc9: cmp(a, operands[0]); break; case 0xca: break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: break; case 0xe9: a = sbc(a, operands[0]); setArithmeticFlags(a); break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,sbc,"public int sbc(int acc, int operand) { return adc(acc, (--operand ^ 0xff)); }",https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setCarryFlag,public void setCarryFlag() { this.carryFlag = true; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,clearCarryFlag,public void clearCarryFlag() { this.carryFlag = false; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setZeroFlag,public void setZeroFlag() { this.zeroFlag = true; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,clearZeroFlag,public void clearZeroFlag() { this.zeroFlag = false; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setIrqDisableFlag,public void setIrqDisableFlag() { this.irqDisableFlag = true; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,clearIrqDisableFlag,public void clearIrqDisableFlag() { this.irqDisableFlag = false; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setDecimalModeFlag,public void setDecimalModeFlag() { this.decimalModeFlag = true; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,clearDecimalModeFlag,public void clearDecimalModeFlag() { this.decimalModeFlag = false; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setBreakFlag,public void setBreakFlag() { this.breakFlag = true; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,clearBreakFlag,public void clearBreakFlag() { this.breakFlag = false; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setOverflowFlag,public void setOverflowFlag() { this.overflowFlag = true; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,clearOverflowFlag,public void clearOverflowFlag() { this.overflowFlag = false; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setAccumulator,public void setAccumulator(int val) { this.a = val; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setXRegister,public void setXRegister(int val) { this.x = val; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setYRegister,public void setYRegister(int val) { this.y = val; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,Cpu.java,setProgramCounter,public void setProgramCounter(int addr) { this.pc = addr; },https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,CpuImmediateModeTest.java,test_ADC,"public void test_ADC() { bus.loadProgram(0xa9, 0x00, 0x69, 0x01); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x69, 0x01); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x69, 0x01); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x69, 0x01); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x69, 0xff); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x69, 0xff); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x69, 0xff); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x69, 0xff); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,CpuImmediateModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() { bus.loadProgram(0xa9, 0x00, 0x38, 0x69, 0x01); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,CpuImmediateModeTest.java,test_SBC,"public void test_SBC() { bus.loadProgram(0xa9, 0x00, 0xe9, 0x01); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xe9, 0x01); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xe9, 0x01); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xe9, 0x01); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xe9, 0x01); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
46a594373641f69a3eb1408d341ab0ade932e575,CpuImmediateModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() { cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xe9, 0x01); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/46a594373641f69a3eb1408d341ab0ade932e575
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,reset,"public void reset() { sp = 0xff; pc = CpuUtils.address(bus.read(0xfffc), bus.read(0xfffd)); ir = 0; carryFlag = false; irqDisableFlag = false; decimalModeFlag = false; breakFlag = false; overflowFlag = false; }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { stackPush((pc >> 8) & 0xff); stackPush(pc & 0xff); stackPush(getProcessorStatus()); pc = CpuUtils.address(bus.read(0xfffc), bus.read(0xfffd)); setBreakFlag(); } break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: break; case 0x69: a = adc(a, operands[0]); setArithmeticFlags(a); break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: break; case 0xc9: cmp(a, operands[0]); break; case 0xca: break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: break; case 0xe9: a = sbc(a, operands[0]); setArithmeticFlags(a); break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,setNegativeFlag,public void setNegativeFlag() { this.negativeFlag = true; },https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,clearNegativeFlag,public void clearNegativeFlag() { this.negativeFlag = false; },https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,getStackPointer,public int getStackPointer() { return sp; },https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,setStackPointer,public void setStackPointer(int offset) { this.sp = offset; },https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,setProcessorStatus,public void setProcessorStatus(int value) { if ((value&P_CARRY) != 0) setCarryFlag(); else clearCarryFlag(); if ((value&P_ZERO) != 0) setZeroFlag(); else clearZeroFlag(); if ((value&P_IRQ_DISABLE) != 0) setIrqDisableFlag(); else clearIrqDisableFlag(); if ((value&P_DECIMAL) != 0) setDecimalModeFlag(); else clearDecimalModeFlag(); if ((value&P_BREAK) != 0) setBreakFlag(); else clearBreakFlag(); if ((value&P_OVERFLOW) != 0) setOverflowFlag(); else clearOverflowFlag(); if ((value&P_NEGATIVE) != 0) setNegativeFlag(); else clearNegativeFlag(); },https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,getProcessorStatus,public int getProcessorStatus() { int status = 0x20; if (getCarryFlag()) { status |= P_CARRY; } if (getZeroFlag()) { status |= P_ZERO; } if (getIrqDisableFlag()) { status |= P_IRQ_DISABLE; } if (getDecimalModeFlag()) { status |= P_DECIMAL; } if (getBreakFlag()) { status |= P_BREAK; } if (getOverflowFlag()) { status |= P_OVERFLOW; } if (getNegativeFlag()) { status |= P_NEGATIVE; } return status; },https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,stackPush,"void stackPush(int data) { bus.write(0x100+sp, data); if (sp == 0) sp = 0xff; else --sp; }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,stackPop,int stackPop() { if (sp == 0xff) sp = 0x00; else ++sp; int data = bus.read(0x100+sp); return data; },https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,Cpu.java,stackPeek,int stackPeek() { return bus.read(0x100+sp+1); },https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuImpliedModeTest.java,test_BRK,"public void test_BRK() { cpu.setCarryFlag(); cpu.setOverflowFlag(); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW, cpu.getProcessorStatus()); assertEquals(0xff, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.loadProgram(0xea, 0xea, 0xea, 0x00); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff)); assertEquals(0x04, bus.read(0x1fe)); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW, bus.read(0x1fd)); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW|Cpu.P_BREAK, cpu.getProcessorStatus()); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW, cpu.stackPeek()); }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuImpliedModeTest.java,test_BRK_HonorsIrqDisableFlag,"public void test_BRK_HonorsIrqDisableFlag() { cpu.setIrqDisableFlag(); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x0204, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); cpu.step(2); assertEquals(0x0206, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuTest.java,testStack,"public void testStack() { cpu.stackPush(0x13); assertEquals(0x13, cpu.stackPop()); cpu.stackPush(0x12); assertEquals(0x12, cpu.stackPop()); for (int i = 0x00; i <= 0xff; i++) { cpu.stackPush(i); } for (int i = 0xff; i >= 0x00; i--) { assertEquals(i, cpu.stackPop()); } }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuTest.java,testStackPush,"public void testStackPush() { assertEquals(0xff, cpu.getStackPointer()); assertEquals(0xff, bus.read(0x1ff)); cpu.stackPush(0x06); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); cpu.stackPush(0x05); assertEquals(0xfd, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); cpu.stackPush(0x04); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); cpu.stackPush(0x03); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); assertEquals(0x03, bus.read(0x1fc)); cpu.stackPush(0x02); assertEquals(0xfa, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); assertEquals(0x03, bus.read(0x1fc)); assertEquals(0x02, bus.read(0x1fb)); cpu.stackPush(0x01); assertEquals(0xf9, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); assertEquals(0x03, bus.read(0x1fc)); assertEquals(0x02, bus.read(0x1fb)); assertEquals(0x01, bus.read(0x1fa)); }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuTest.java,testStackPushWrapsAroundToStackTop,"public void testStackPushWrapsAroundToStackTop() { cpu.setStackPointer(0x01); cpu.stackPush(0x01); assertEquals(0x01, bus.read(0x101)); assertEquals(0x00, cpu.getStackPointer()); cpu.stackPush(0x02); assertEquals(0x02, bus.read(0x100)); assertEquals(0xff, cpu.getStackPointer()); cpu.stackPush(0x03); assertEquals(0x03, bus.read(0x1ff)); assertEquals(0xfe, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuTest.java,testStackPop,"public void testStackPop() { bus.write(0x1ff, 0x06); bus.write(0x1fe, 0x05); bus.write(0x1fd, 0x04); bus.write(0x1fc, 0x03); bus.write(0x1fb, 0x02); bus.write(0x1fa, 0x01); cpu.setStackPointer(0xf9); assertEquals(0x01, cpu.stackPop()); assertEquals(0xfa, cpu.getStackPointer()); assertEquals(0x02, cpu.stackPop()); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x03, cpu.stackPop()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x04, cpu.stackPop()); assertEquals(0xfd, cpu.getStackPointer()); assertEquals(0x05, cpu.stackPop()); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x06, cpu.stackPop()); assertEquals(0xff, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuTest.java,testStackPopWrapsAroundToStackBottom,"public void testStackPopWrapsAroundToStackBottom() { bus.write(0x1ff, 0x0f); bus.write(0x100, 0xf0); bus.write(0x101, 0xf1); bus.write(0x102, 0xf2); cpu.setStackPointer(0xfe); assertEquals(0x0f, cpu.stackPop()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0xf0, cpu.stackPop()); assertEquals(0x00, cpu.getStackPointer()); assertEquals(0xf1, cpu.stackPop()); assertEquals(0x01, cpu.getStackPointer()); assertEquals(0xf2, cpu.stackPop()); assertEquals(0x02, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuTest.java,testStackPeekDoesNotAlterStackPointer,"public void testStackPeekDoesNotAlterStackPointer() { int val = 0; assertEquals(0xff, cpu.stackPeek()); assertEquals(0xff, cpu.getStackPointer()); cpu.stackPush(0x01); assertEquals(0x01, cpu.stackPeek()); assertEquals(0xfe, cpu.getStackPointer()); cpu.stackPush(0x02); assertEquals(0x02, cpu.stackPeek()); assertEquals(0xfd, cpu.getStackPointer()); cpu.stackPush(0x03); assertEquals(0x03, cpu.stackPeek()); assertEquals(0xfc, cpu.getStackPointer()); cpu.stackPush(0x04); assertEquals(0x04, cpu.stackPeek()); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x04, cpu.stackPeek()); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x04, cpu.stackPeek()); assertEquals(0xfb, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuTest.java,testGetProcessorStatus,"public void testGetProcessorStatus() { assertEquals(0x20, cpu.getProcessorStatus()); cpu.setCarryFlag(); assertEquals(0x21, cpu.getProcessorStatus()); cpu.setZeroFlag(); assertEquals(0x23, cpu.getProcessorStatus()); cpu.setIrqDisableFlag(); assertEquals(0x27, cpu.getProcessorStatus()); cpu.setDecimalModeFlag(); assertEquals(0x2f, cpu.getProcessorStatus()); cpu.setBreakFlag(); assertEquals(0x3f, cpu.getProcessorStatus()); cpu.setOverflowFlag(); assertEquals(0x7f, cpu.getProcessorStatus()); cpu.setNegativeFlag(); assertEquals(0xff, cpu.getProcessorStatus()); cpu.clearCarryFlag(); assertEquals(0xfe, cpu.getProcessorStatus()); cpu.clearZeroFlag(); assertEquals(0xfc, cpu.getProcessorStatus()); cpu.clearIrqDisableFlag(); assertEquals(0xf8, cpu.getProcessorStatus()); cpu.clearDecimalModeFlag(); assertEquals(0xf0, cpu.getProcessorStatus()); cpu.clearBreakFlag(); assertEquals(0xe0, cpu.getProcessorStatus()); cpu.clearOverflowFlag(); assertEquals(0xa0, cpu.getProcessorStatus()); cpu.clearNegativeFlag(); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
473b47e8322a202f20c97fe536e79b08b439a3cd,CpuTest.java,testSetProcessorStatus,public void testSetProcessorStatus() { assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20|Cpu.P_CARRY); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20|Cpu.P_CARRY|Cpu.P_NEGATIVE); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20|Cpu.P_CARRY|Cpu.P_NEGATIVE|Cpu.P_ZERO); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20|Cpu.P_CARRY|Cpu.P_NEGATIVE|Cpu.P_ZERO| Cpu.P_OVERFLOW); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20|Cpu.P_CARRY|Cpu.P_NEGATIVE|Cpu.P_ZERO| Cpu.P_OVERFLOW|Cpu.P_BREAK); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertTrue(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20|Cpu.P_CARRY|Cpu.P_NEGATIVE|Cpu.P_ZERO| Cpu.P_OVERFLOW|Cpu.P_BREAK|Cpu.P_DECIMAL); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertTrue(cpu.getDecimalModeFlag()); assertTrue(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20|Cpu.P_CARRY|Cpu.P_NEGATIVE|Cpu.P_ZERO| Cpu.P_OVERFLOW|Cpu.P_BREAK|Cpu.P_DECIMAL| Cpu.P_IRQ_DISABLE); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getIrqDisableFlag()); assertTrue(cpu.getDecimalModeFlag()); assertTrue(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x00); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); },https://www.github.com/sethm/symon/commit/473b47e8322a202f20c97fe536e79b08b439a3cd
f012ba7775ea8050f5507a069f660075aa9307d1,Cpu.java,step,"public void step() { int lo, hi; addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { stackPush((pc >> 8) & 0xff); stackPush(pc & 0xff); stackPush(getProcessorStatus()); pc = CpuUtils.address(bus.read(0xfffc), bus.read(0xfffd)); setBreakFlag(); } break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(CpuUtils.address(lo, hi)); break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((CpuUtils.address(lo, hi) - 1) & 0xffff); break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: a = adc(a, operands[0]); setArithmeticFlags(a); break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x89: break; case 0x8a: break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: break; case 0x99: break; case 0x9a: break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: a = sbc(a, operands[0]); setArithmeticFlags(a); break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,setUp,"public void setUp() throws MemoryRangeException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Cpu.DEFAULT_BASE_ADDRESS & 0x00ff); bus.write(0xfffd, (Cpu.DEFAULT_BASE_ADDRESS & 0xff00)>>>8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_CLC,public void test_CLC() { cpu.setCarryFlag(); assertTrue(cpu.getCarryFlag()); bus.loadProgram(0x18); cpu.step(); assertFalse(cpu.getCarryFlag()); },https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_CLD,public void test_CLD() { cpu.setDecimalModeFlag(); assertTrue(cpu.getDecimalModeFlag()); bus.loadProgram(0xd8); cpu.step(); assertFalse(cpu.getDecimalModeFlag()); },https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_CLI,public void test_CLI() { cpu.setIrqDisableFlag(); assertTrue(cpu.getIrqDisableFlag()); bus.loadProgram(0x58); cpu.step(); assertFalse(cpu.getIrqDisableFlag()); },https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_CLV,public void test_CLV() { cpu.setOverflowFlag(); assertTrue(cpu.getOverflowFlag()); bus.loadProgram(0xb8); cpu.step(); assertFalse(cpu.getOverflowFlag()); },https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_DEX,"public void test_DEX() { bus.loadProgram(0xca); cpu.setXRegister(0x02); cpu.step(); assertEquals(0x01, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_DEX_SetsZeroFlagWhenZero,"public void test_DEX_SetsZeroFlagWhenZero() { bus.loadProgram(0xca); cpu.setXRegister(0x01); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_DEX_SetsNegativeFlagWhen,"public void test_DEX_SetsNegativeFlagWhen() { bus.loadProgram(0xca); cpu.step(); assertEquals(0xff, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_DEY,"public void test_DEY() { bus.loadProgram(0x88); cpu.setYRegister(0x02); cpu.step(); assertEquals(0x01, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_DEY_SetsZeroFlagWhenZero,"public void test_DEY_SetsZeroFlagWhenZero() { bus.loadProgram(0x88); cpu.setYRegister(0x01); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_DEY_SetsNegativeFlagWhen,"public void test_DEY_SetsNegativeFlagWhen() { bus.loadProgram(0x88); cpu.step(); assertEquals(0xff, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_INX,"public void test_INX() { bus.loadProgram(0xe8); cpu.step(); assertEquals(0x01, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_INX_SetsNegativeFlagWhenNegative,"public void test_INX_SetsNegativeFlagWhenNegative() { bus.loadProgram(0xe8); cpu.setXRegister(0x7f); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_INX_SetsZeroFlagWhenZero,"public void test_INX_SetsZeroFlagWhenZero() { bus.loadProgram(0xe8); cpu.setXRegister(0xff); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_INY,"public void test_INY() { bus.loadProgram(0xc8); cpu.step(); assertEquals(0x01, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_INY_SetsNegativeFlagWhenNegative,"public void test_INY_SetsNegativeFlagWhenNegative() { bus.loadProgram(0xc8); cpu.setYRegister(0x7f); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_INY_SetsZeroFlagWhenZero,"public void test_INY_SetsZeroFlagWhenZero() { bus.loadProgram(0xc8); cpu.setYRegister(0xff); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_NOP,"public void test_NOP() { bus.loadProgram(0xea); cpu.step(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x201, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_PHA,"public void test_PHA() { bus.loadProgram(0x48); cpu.setAccumulator(0x3a); cpu.step(); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x3a, cpu.stackPeek()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_PHP,"public void test_PHP() { bus.loadProgram(0x08); cpu.setProcessorStatus(0x27); cpu.step(); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x27, cpu.stackPeek()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_PLA,"public void test_PLA() { cpu.stackPush(0x32); bus.loadProgram(0x68); cpu.step(); assertEquals(0x32, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_PLA_SetsZeroIfAccumulatorIsZero,"public void test_PLA_SetsZeroIfAccumulatorIsZero() { cpu.stackPush(0x00); bus.loadProgram(0x68); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_PLA_SetsNegativeIfAccumulatorIsNegative,"public void test_PLA_SetsNegativeIfAccumulatorIsNegative() { cpu.stackPush(0xff); bus.loadProgram(0x68); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_PLP,"public void test_PLP() { cpu.stackPush(0x2f); bus.loadProgram(0x28); cpu.step(); assertEquals(0x2f, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_RTI,"public void test_RTI() { cpu.stackPush(0x0f); cpu.stackPush(0x11); cpu.stackPush(0x29); bus.loadProgram(0x40); cpu.step(); assertEquals(0x0f11, cpu.getProgramCounter()); assertEquals(0x29, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_RTS,"public void test_RTS() { cpu.stackPush(0x0f); cpu.stackPush(0x11); bus.loadProgram(0x60); cpu.step(); assertEquals(0x0f10, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_SEC,public void test_SEC() { bus.loadProgram(0x38); cpu.step(); assertTrue(cpu.getCarryFlag()); },https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_SED,public void test_SED() { bus.loadProgram(0xf8); cpu.step(); assertTrue(cpu.getDecimalModeFlag()); },https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_SEI,public void test_SEI() { bus.loadProgram(0x78); cpu.step(); assertTrue(cpu.getIrqDisableFlag()); },https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
f012ba7775ea8050f5507a069f660075aa9307d1,CpuImpliedModeTest.java,test_TAX,public void test_TAX() { },https://www.github.com/sethm/symon/commit/f012ba7775ea8050f5507a069f660075aa9307d1
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,Cpu.java,step,"public void step() { int lo, hi; addr = pc; ir = bus.read(pc); incProgramCounter(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incProgramCounter(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { stackPush((pc >> 8) & 0xff); stackPush(pc & 0xff); stackPush(getProcessorStatus()); pc = CpuUtils.address(bus.read(0xfffc), bus.read(0xfffd)); setBreakFlag(); } break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(CpuUtils.address(lo, hi)); break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((CpuUtils.address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: a = adc(a, operands[0]); setArithmeticFlags(a); break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x89: break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: break; case 0x9a: setStackPointer(x); break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: a = sbc(a, operands[0]); setArithmeticFlags(a); break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_RTS,"public void test_RTS() { cpu.stackPush(0x0f); cpu.stackPush(0x11); bus.loadProgram(0x60); cpu.step(); assertEquals(0x0f12, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TAX,"public void test_TAX() { cpu.setAccumulator(0x32); bus.loadProgram(0xaa); cpu.step(); assertEquals(0x32, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TAX_SetsZeroFlagIfXIsZero,"public void test_TAX_SetsZeroFlagIfXIsZero() { cpu.setAccumulator(0x00); bus.loadProgram(0xaa); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TAX_SetsNegativeFlagIfXIsNegative,"public void test_TAX_SetsNegativeFlagIfXIsNegative() { cpu.setAccumulator(0xff); bus.loadProgram(0xaa); cpu.step(); assertEquals(0xff, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TAY,"public void test_TAY() { cpu.setAccumulator(0x32); bus.loadProgram(0xa8); cpu.step(); assertEquals(0x32, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TAY_SetsZeroFlagIfYIsZero,"public void test_TAY_SetsZeroFlagIfYIsZero() { cpu.setAccumulator(0x00); bus.loadProgram(0xa8); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TAY_SetsNegativeFlagIfYIsNegative,"public void test_TAY_SetsNegativeFlagIfYIsNegative() { cpu.setAccumulator(0xff); bus.loadProgram(0xa8); cpu.step(); assertEquals(0xff, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TSX,"public void test_TSX() { cpu.setStackPointer(0x32); bus.loadProgram(0xba); cpu.step(); assertEquals(0x32, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TSX_SetsZeroFlagIfXIsZero,"public void test_TSX_SetsZeroFlagIfXIsZero() { cpu.setStackPointer(0x00); bus.loadProgram(0xba); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TSX_SetsNegativeFlagIfXIsNegative,"public void test_TSX_SetsNegativeFlagIfXIsNegative() { cpu.setStackPointer(0xff); bus.loadProgram(0xba); cpu.step(); assertEquals(0xff, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TXA,"public void test_TXA() { cpu.setXRegister(0x32); bus.loadProgram(0x8a); cpu.step(); assertEquals(0x32, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TXA_SetsZeroFlagIfAccumulatorIsZero,"public void test_TXA_SetsZeroFlagIfAccumulatorIsZero() { cpu.setXRegister(0x00); bus.loadProgram(0x8a); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TXA_SetsNegativeFlagIfAccumulatorIsNegative,"public void test_TXA_SetsNegativeFlagIfAccumulatorIsNegative() { cpu.setXRegister(0xff); bus.loadProgram(0x8a); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TXS,"public void test_TXS() { cpu.setXRegister(0x32); bus.loadProgram(0x9a); cpu.step(); assertEquals(0x32, cpu.getStackPointer()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TXS_DoesNotAffectProcessorStatus,"public void test_TXS_DoesNotAffectProcessorStatus() { cpu.setXRegister(0x00); bus.loadProgram(0x9a); cpu.step(); assertEquals(0x00, cpu.getStackPointer()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setXRegister(0x80); bus.loadProgram(0x9a); cpu.step(); assertEquals(0x80, cpu.getStackPointer()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TYA,"public void test_TYA() { cpu.setYRegister(0x32); bus.loadProgram(0x98); cpu.step(); assertEquals(0x32, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TYA_SetsZeroFlagIfAccumulatorIsZero,"public void test_TYA_SetsZeroFlagIfAccumulatorIsZero() { cpu.setYRegister(0x00); bus.loadProgram(0x98); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
b46c4e1becb91eb525fa9e3dfbf1048e577716ad,CpuImpliedModeTest.java,test_TYA_SetsNegativeFlagIfAccumulatorIsNegative,"public void test_TYA_SetsNegativeFlagIfAccumulatorIsNegative() { cpu.setYRegister(0xff); bus.loadProgram(0x98); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b46c4e1becb91eb525fa9e3dfbf1048e577716ad
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,reset,"public void reset() { sp = 0xff; pc = CpuUtils.address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); ir = 0; carryFlag = false; irqDisableFlag = false; decimalModeFlag = false; breakFlag = false; overflowFlag = false; }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,step,"public void step() { int lo, hi; addr = pc; ir = bus.read(pc); incrementPC(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = CpuUtils.address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(CpuUtils.address(lo, hi)); break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((CpuUtils.address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); clearNegativeFlag(); setZeroFlag(a == 0); } else { a = adc(a, operands[0]); setArithmeticFlags(a); } break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x89: break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: break; case 0x9a: setStackPointer(x); break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); clearNegativeFlag(); setZeroFlag(a == 0); } else { a = sbc(a, operands[0]); setArithmeticFlags(a); } break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,adc,"public int adc(int acc, int operand) { int result = (operand & 0xff) + (acc & 0xff) + getCarryBit(); int carry6 = (operand & 0x7f) + (acc & 0x7f) + getCarryBit(); setCarryFlag((result & 0x100) != 0); setOverflowFlag(carryFlag ^ ((carry6 & 0x80) != 0)); result = result & 0xff; return result; }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,adcDecimal,"public int adcDecimal(int acc, int operand) { acc += 0x066; int t2 = acc + operand; int t3 = acc ^ operand; int t4 = t2 ^ t3; int t5 = ~t4 & 0x110; int t6 = (t5 >> 2) | (t5 >> 3); int result = t2 - t6; if (result > 0xff) { result &= 0xff; setCarryFlag(); } return result; }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,sbc,"public int sbc(int acc, int operand) { return adc(acc, ~operand); }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,sbcDecimal,"public int sbcDecimal(int acc, int operand) { return adcDecimal(acc, tensComplement(operand)); }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,getNegativeBit,public int getNegativeBit() { return (negativeFlag ? 1 : 0); },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,setNegativeFlag,public void setNegativeFlag(int register) { negativeFlag = (register < 0); },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,getCarryBit,public int getCarryBit() { return (carryFlag ? 1 : 0); },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,getZeroBit,public int getZeroBit() { return (zeroFlag ? 1 : 0); },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,getIrqDisableBit,public int getIrqDisableBit() { return (irqDisableFlag ? 1 : 0); },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,getDecimalModeBit,public int getDecimalModeBit() { return (decimalModeFlag ? 1 : 0); },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,getBreakBit,public int getBreakBit() { return (carryFlag ? 1 : 0); },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,getOverflowBit,public int getOverflowBit() { return (overflowFlag ? 1 : 0); },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,statusRegisterString,"public String statusRegisterString() { StringBuffer sb = new StringBuffer(""[""); sb.append(getNegativeFlag() ? 'N' : '.'); sb.append(getOverflowFlag() ? 'V' : '.'); sb.append(""-""); sb.append(getBreakFlag() ? 'B' : '.'); sb.append(getDecimalModeFlag() ? 'D' : '.'); sb.append(getIrqDisableFlag() ? 'I' : '.'); sb.append(getZeroFlag() ? 'Z' : '.'); sb.append(getCarryFlag() ? 'C' : '.'); sb.append(""]""); return sb.toString(); }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,incrementPC,protected void incrementPC() { if (pc == 0xffff) { pc = 0; } else { ++pc; } },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,Cpu.java,tensComplement,private int tensComplement(int val) { int t1 = 0xfff - val; int t2 = -val; int t3 = t1 ^ 0x001; int t4 = t2 ^ t3; int t5 = ~t4 & 0x110; int t6 = (t5 >> 2) | (t5 >> 3); return t2 - t6; },https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,CpuImmediateModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() { bus.loadProgram(0xf8, 0xa9, 0x01, 0x69, 0x01); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x69, 0x01); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x69, 0x01); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x69, 0x01); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x69, 0x99); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x69, 0x99); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x69, 0x99); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,CpuImmediateModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() { bus.loadProgram(0x18, 0xa9, 0x05, 0xe9, 0x01); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xe9, 0x01); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xe9, 0x01); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xe9, 0x01); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
06ed74e89cb1c1f62c6d23f70d80b94f4aebba28,CpuImpliedModeTest.java,test_BRK,"public void test_BRK() { cpu.setCarryFlag(); cpu.setOverflowFlag(); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW, cpu.getProcessorStatus()); assertEquals(0xff, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(Cpu.IRQ_VECTOR_H, 0x12); bus.write(Cpu.IRQ_VECTOR_L, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff)); assertEquals(0x06, bus.read(0x1fe)); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW|Cpu.P_BREAK, bus.read(0x1fd)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW|Cpu.P_BREAK| Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/06ed74e89cb1c1f62c6d23f70d80b94f4aebba28
7766e76362a6bf54414527b9a61de4cd17bf7ee5,Cpu.java,step,"public void step() { int lo, hi; addr = pc; ir = bus.read(pc); incrementPC(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = CpuUtils.address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: break; case 0x06: break; case 0x07: break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(CpuUtils.address(lo, hi)); break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = CpuUtils.address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((CpuUtils.address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); } else { a = adc(a, operands[0]); } break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x89: break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: break; case 0x9a: setStackPointer(x); break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); } else { a = sbc(a, operands[0]); } break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/7766e76362a6bf54414527b9a61de4cd17bf7ee5
7766e76362a6bf54414527b9a61de4cd17bf7ee5,Cpu.java,adc,"public int adc(int acc, int operand) { int result = (operand & 0xff) + (acc & 0xff) + getCarryBit(); int carry6 = (operand & 0x7f) + (acc & 0x7f) + getCarryBit(); setCarryFlag((result & 0x100) != 0); setOverflowFlag(carryFlag ^ ((carry6 & 0x80) != 0)); result &= 0xff; setArithmeticFlags(result); return result; }",https://www.github.com/sethm/symon/commit/7766e76362a6bf54414527b9a61de4cd17bf7ee5
7766e76362a6bf54414527b9a61de4cd17bf7ee5,Cpu.java,adcDecimal,"public int adcDecimal(int acc, int operand) { int l, h, result; l = (acc & 0x0f) + (operand & 0x0f) + getCarryBit(); if ((l & 0xff) > 9) l += 6; h = (acc >> 4) + (operand >> 4) + (l > 15 ? 1 : 0); if ((h & 0xff) > 9) h += 6; result = (l & 0x0f) | (h << 4); result &= 0xff; setCarryFlag(h > 15); setZeroFlag(result == 0); setNegativeFlag(false); setOverflowFlag(false); return result; }",https://www.github.com/sethm/symon/commit/7766e76362a6bf54414527b9a61de4cd17bf7ee5
7766e76362a6bf54414527b9a61de4cd17bf7ee5,Cpu.java,sbc,"public int sbc(int acc, int operand) { int result; result = adc(acc, ~operand); setArithmeticFlags(result); return result; }",https://www.github.com/sethm/symon/commit/7766e76362a6bf54414527b9a61de4cd17bf7ee5
7766e76362a6bf54414527b9a61de4cd17bf7ee5,Cpu.java,sbcDecimal,"public int sbcDecimal(int acc, int operand) { int l, h, result; l = (acc & 0x0f) - (operand & 0x0f) - (carryFlag ? 0 : 1); if ((l & 0x10) != 0) l -= 6; h = (acc >> 4) - (operand >> 4) - ((l & 0x10) != 0 ? 1 : 0); if ((h & 0x10) != 0) h -= 6; result = (l & 0x0f) | (h << 4); setCarryFlag((h & 0xff) < 15); setZeroFlag(result == 0); setNegativeFlag(false); setOverflowFlag(false); return (result & 0xff); }",https://www.github.com/sethm/symon/commit/7766e76362a6bf54414527b9a61de4cd17bf7ee5
7766e76362a6bf54414527b9a61de4cd17bf7ee5,CpuImmediateModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() { bus.loadProgram(0xf8, 0xa9, 0x00, 0xe9, 0x01); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xe9, 0x01); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xe9, 0x01); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xe9, 0x01); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xe9, 0x11); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xe9, 0x01); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xe9, 0x01); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/7766e76362a6bf54414527b9a61de4cd17bf7ee5
de0742f59fc28c206a22b628334e32caa5d31cb1,CpuZeroPageModeTest.java,setUp,"protected void setUp() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Cpu.DEFAULT_BASE_ADDRESS & 0x00ff); bus.write(0xfffd, (Cpu.DEFAULT_BASE_ADDRESS & 0xff00)>>>8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/de0742f59fc28c206a22b628334e32caa5d31cb1
de0742f59fc28c206a22b628334e32caa5d31cb1,CpuZeroPageModeTest.java,test_ADC,public void test_ADC() { },https://www.github.com/sethm/symon/commit/de0742f59fc28c206a22b628334e32caa5d31cb1
de0742f59fc28c206a22b628334e32caa5d31cb1,CpuZeroPageModeTest.java,test_AND,public void test_AND() { },https://www.github.com/sethm/symon/commit/de0742f59fc28c206a22b628334e32caa5d31cb1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,Cpu.java,reset,"public void reset() { sp = 0xff; pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); ir = 0; carryFlag = false; irqDisableFlag = false; decimalModeFlag = false; breakFlag = false; overflowFlag = false; }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incrementPC(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: a |= bus.read(operands[0]); setArithmeticFlags(a); break; case 0x06: bus.write(operands[0], asl(bus.read(operands[0]))); setArithmeticFlags(bus.read(operands[0])); break; case 0x07: break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: j = bus.read(operands[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x25: break; case 0x26: break; case 0x27: break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: break; case 0x46: break; case 0x47: break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: break; case 0x66: break; case 0x67: break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); } else { a = adc(a, operands[0]); } break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: break; case 0x85: break; case 0x86: break; case 0x87: break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x89: break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: break; case 0x9a: setStackPointer(x); break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: break; case 0xa5: break; case 0xa6: break; case 0xa7: break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: break; case 0xc5: break; case 0xc6: break; case 0xc7: break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: break; case 0xe5: break; case 0xe6: break; case 0xe7: break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); } else { a = sbc(a, operands[0]); } break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,Cpu.java,asl,private int asl(int m) { setCarryFlag((m & 0x80) != 0); return (m << 1) & 0xff; },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,Cpu.java,lsr,private int lsr(int m) { setCarryFlag((m & 0x01) != 0); return (m >>> 1) & 0xff; },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,Cpu.java,toString,"public String toString() { String opcode = opcode(ir, operands[0], operands[1]); StringBuffer sb = new StringBuffer(String.format(""$%04X"", addr) + "" ""); sb.append(String.format(""%-14s"", opcode)); sb.append(""A="" + String.format(""$%02X"", a) + "" ""); sb.append(""X="" + String.format(""$%02X"", x) + "" ""); sb.append(""Y="" + String.format(""$%02X"", y) + "" ""); sb.append(""PC="" + String.format(""$%04X"", pc)+ "" ""); sb.append(""P="" + statusRegisterString()); return sb.toString(); }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,Cpu.java,incrementPC,void incrementPC() { if (pc == 0xffff) { pc = 0; } else { ++pc; } },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,Cpu.java,address,"int address(int lowByte, int hiByte) { return ((hiByte<<8)|lowByte); }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,Cpu.java,opcode,"String opcode(int opcode, int op1, int op2) { String opcodeName = Cpu.opcodeNames[opcode]; if (opcodeName == null) { return ""???""; } StringBuffer sb = new StringBuffer(opcodeName); switch (Cpu.instructionModes[opcode]) { case ABS: sb.append(String.format("" $%04X"", address(op1, op2))); break; case IMM: sb.append(String.format("" #$%02X"", op1)); } return sb.toString(); }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuImmediateModeTest.java,test_ORA,"public void test_ORA() { bus.loadProgram(0x09, 0x00, 0x09, 0x11, 0x09, 0x22, 0x09, 0x44, 0x09, 0x88); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuTest.java,testAddress,"public void testAddress() { assertEquals(0xf1ea, cpu.address(0xea, 0xf1)); assertEquals(0x00ea, cpu.address(0xea, 0x00)); assertEquals(0xf100, cpu.address(0x00, 0xf1)); assertEquals(0x1234, cpu.address(0x34, 0x12)); assertEquals(0xffff, cpu.address(0xff, 0xff)); }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_ORA,"public void test_ORA() { bus.write(0x0000, 0x00); bus.write(0x0002, 0x11); bus.write(0x0004, 0x22); bus.write(0x0008, 0x44); bus.write(0x0010, 0x88); bus.loadProgram(0x05, 0x00, 0x05, 0x02, 0x05, 0x04, 0x05, 0x08, 0x05, 0x10); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_ASL,"public void test_ASL() { bus.write(0x0000, 0x00); bus.write(0x0001, 0x01); bus.write(0x0002, 0x02); bus.write(0x0003, 0x44); bus.write(0x0004, 0x80); bus.loadProgram(0x06, 0x00, 0x06, 0x01, 0x06, 0x02, 0x06, 0x03, 0x06, 0x04); cpu.step(); assertEquals(0x00, bus.read(0x0000)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x0002)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x0003)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x0004)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_BIT,"public void test_BIT() { bus.write(0x0000, 0xc0); bus.loadProgram(0xa9, 0x01, 0x24, 0x00, 0xa9, 0x0f, 0x24, 0x00, 0xa9, 0x40, 0x24, 0x00, 0xa9, 0x80, 0x24, 0x00, 0xa9, 0xc0, 0x24, 0x00, 0xa9, 0xff, 0x24, 0x00); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_ROL,public void test_ROL() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_EOR,public void test_EOR() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_LSR,public void test_LSR() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_ROR,public void test_ROR() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_STY,public void test_STY() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_STA,public void test_STA() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_STX,public void test_STX() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_LDY,public void test_LDY() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_LDA,public void test_LDA() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_LDX,public void test_LDX() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_CPY,public void test_CPY() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_CMP,public void test_CMP() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_DEC,public void test_DEC() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_CPX,public void test_CPX() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_SBC,public void test_SBC() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1,CpuZeroPageModeTest.java,test_INC,public void test_INC() { },https://www.github.com/sethm/symon/commit/ecde55c6b8cbe5c38fcce45866b7a5cc91f769b1
d54ad18b1709287732973146472f66532902676b,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incrementPC(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x02: break; case 0x03: break; case 0x04: break; case 0x05: a |= bus.read(operands[0]); setArithmeticFlags(a); break; case 0x06: j = bus.read(operands[0]); k = asl(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x07: break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: break; case 0x0b: break; case 0x0c: break; case 0x0d: break; case 0x0e: break; case 0x0f: break; case 0x10: break; case 0x11: break; case 0x12: break; case 0x13: break; case 0x14: break; case 0x15: break; case 0x16: break; case 0x17: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1a: break; case 0x1b: break; case 0x1c: break; case 0x1d: break; case 0x1e: break; case 0x1f: break; case 0x20: break; case 0x21: break; case 0x22: break; case 0x23: break; case 0x24: j = bus.read(operands[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x25: j = bus.read(operands[0]); a &= j; setArithmeticFlags(a); break; case 0x26: j = bus.read(operands[0]); k = rol(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x27: break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: break; case 0x2b: break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x2f: break; case 0x30: break; case 0x31: break; case 0x32: break; case 0x33: break; case 0x34: break; case 0x35: break; case 0x36: break; case 0x37: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3a: break; case 0x3b: break; case 0x3c: break; case 0x3d: break; case 0x3e: break; case 0x3f: break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x41: break; case 0x42: break; case 0x43: break; case 0x44: break; case 0x45: j = bus.read(operands[0]); a ^= j; setArithmeticFlags(a); break; case 0x46: j = bus.read(operands[0]); k = lsr(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x47: break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: break; case 0x4b: break; case 0x4c: pc = address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x4f: break; case 0x50: break; case 0x51: break; case 0x52: break; case 0x53: break; case 0x54: break; case 0x55: break; case 0x56: break; case 0x57: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5a: break; case 0x5b: break; case 0x5c: break; case 0x5d: break; case 0x5e: break; case 0x5f: break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x62: break; case 0x63: break; case 0x64: break; case 0x65: j = bus.read(operands[0]); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x66: j = bus.read(operands[0]); k = ror(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x67: break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); } else { a = adc(a, operands[0]); } break; case 0x6a: break; case 0x6b: break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x6f: break; case 0x70: break; case 0x71: break; case 0x72: break; case 0x73: break; case 0x74: break; case 0x75: break; case 0x76: break; case 0x77: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7a: break; case 0x7b: break; case 0x7c: break; case 0x7d: break; case 0x7e: break; case 0x7f: break; case 0x80: break; case 0x81: break; case 0x82: break; case 0x83: break; case 0x84: bus.write(operands[0], y); setArithmeticFlags(y); break; case 0x85: bus.write(operands[0], a); setArithmeticFlags(a); break; case 0x86: bus.write(operands[0], x); setArithmeticFlags(x); break; case 0x87: break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x89: break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8b: break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x8f: break; case 0x90: break; case 0x91: break; case 0x92: break; case 0x93: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x97: break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: break; case 0x9a: setStackPointer(x); break; case 0x9b: break; case 0x9c: break; case 0x9d: break; case 0x9e: break; case 0x9f: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa3: break; case 0xa4: y = bus.read(operands[0]); setArithmeticFlags(y); break; case 0xa5: a = bus.read(operands[0]); setArithmeticFlags(a); break; case 0xa6: x = bus.read(operands[0]); setArithmeticFlags(x); break; case 0xa7: break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xab: break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xaf: break; case 0xb0: break; case 0xb1: break; case 0xb2: break; case 0xb3: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb7: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbb: break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xbf: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc2: break; case 0xc3: break; case 0xc4: cmp(y, bus.read(operands[0])); break; case 0xc5: cmp(a, bus.read(operands[0])); break; case 0xc6: j = bus.read(operands[0]); k = --j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xc7: break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcb: break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xcf: break; case 0xd0: break; case 0xd1: break; case 0xd2: break; case 0xd3: break; case 0xd4: break; case 0xd5: break; case 0xd6: break; case 0xd7: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xda: break; case 0xdb: break; case 0xdc: break; case 0xdd: break; case 0xde: break; case 0xdf: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe2: break; case 0xe3: break; case 0xe4: cmp(x, bus.read(operands[0])); break; case 0xe5: j = bus.read(operands[0]); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xe6: j = bus.read(operands[0]); k = ++j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xe7: break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); } else { a = sbc(a, operands[0]); } break; case 0xea: break; case 0xeb: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xef: break; case 0xf0: break; case 0xf1: break; case 0xf2: break; case 0xf3: break; case 0xf4: break; case 0xf5: break; case 0xf6: break; case 0xf7: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfa: break; case 0xfb: break; case 0xfc: break; case 0xfd: break; case 0xfe: break; case 0xff: break; } }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,Cpu.java,rol,private int rol(int m) { int result = ((m << 1) | getCarryBit()) & 0xff; setCarryFlag((m & 0x80) != 0); return result; },https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,Cpu.java,ror,private int ror(int m) { int result = ((m >>> 1) | (getCarryBit() << 7)) & 0xff; setCarryFlag((m & 0x01) != 0); return result; },https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuImmediateModeTest.java,test_AND,"public void test_AND() { bus.loadProgram(0x29, 0x00, 0x29, 0x11, 0xa9, 0xaa, 0x29, 0xff, 0x29, 0x99, 0x29, 0x11); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuImmediateModeTest.java,test_EOR,"public void test_EOR() { bus.loadProgram(0xa9, 0x88, 0x49, 0x00, 0x49, 0xff, 0x49, 0x33); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuImmediateModeTest.java,test_CPY_DoesNotSetCarryFlagIfYLessThanThanMemory,"public void test_CPY_DoesNotSetCarryFlagIfYLessThanThanMemory() { bus.loadProgram(0xa0, 0x08, 0xc0, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0x70, 0xc0, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_AND,"public void test_AND() { bus.write(0x0000, 0x00); bus.write(0x0001, 0x11); bus.write(0x0002, 0xff); bus.write(0x0003, 0x99); bus.write(0x0004, 0x11); bus.write(0x0005, 0x0f); bus.loadProgram(0x25, 0x00, 0x25, 0x01, 0xa9, 0xaa, 0x25, 0x02, 0x25, 0x03, 0x25, 0x04, 0xa9, 0xff, 0x25, 0x05); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_ROL,"public void test_ROL() { bus.write(0x0000, 0x00); bus.write(0x0001, 0x01); bus.loadProgram(0x26, 0x00, 0x26, 0x01, 0x38, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01); cpu.step(); assertEquals(0x00, bus.read(0x0000)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_EOR,"public void test_EOR() { bus.write(0x10, 0x00); bus.write(0x11, 0xff); bus.write(0x12, 0x33); bus.write(0x13, 0x44); bus.loadProgram(0xa9, 0x88, 0x45, 0x10, 0x45, 0x11, 0x45, 0x12, 0x45, 0x13); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_LSR,"public void test_LSR() { bus.write(0x0000, 0x00); bus.write(0x0001, 0x01); bus.write(0x0002, 0x02); bus.write(0x0003, 0x44); bus.write(0x0004, 0x80); bus.write(0x0005, 0x02); bus.loadProgram(0x46, 0x00, 0x46, 0x01, 0x46, 0x02, 0x46, 0x03, 0x46, 0x04, 0x38, 0x46, 0x05); cpu.step(); assertEquals(0x00, bus.read(0x0000)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x0001)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x0002)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0x0003)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x0004)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x0005)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_ADC,"public void test_ADC() { bus.write(0x10, 0x01); bus.write(0x11, 0xff); bus.loadProgram(0xa9, 0x00, 0x65, 0x10); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x65, 0x10); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x65, 0x10); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x65, 0x10); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x65, 0x11); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x65, 0x11); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x65, 0x11); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x65, 0x11); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() { bus.write(0x10, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x65, 0x10); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() { bus.write(0x10, 0x01); bus.write(0x11, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x65, 0x10); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x65, 0x10); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x65, 0x10); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x65, 0x10); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x65, 0x11); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x65, 0x11); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x65, 0x11); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_ROR,"public void test_ROR() { bus.write(0x10, 0x00); bus.write(0x11, 0x10); bus.loadProgram(0x66, 0x10, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x11)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_STY,"public void test_STY() { cpu.setYRegister(0x00); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_STA,"public void test_STA() { cpu.setAccumulator(0x00); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_STX,"public void test_STX() { cpu.setXRegister(0x00); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x0f); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x80); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_LDY,"public void test_LDY() { bus.write(0x10, 0x00); bus.write(0x11, 0x0f); bus.write(0x12, 0x80); bus.loadProgram(0xa4, 0x10, 0xa4, 0x11, 0xa4, 0x12); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_LDA,"public void test_LDA() { bus.write(0x10, 0x00); bus.write(0x11, 0x0f); bus.write(0x12, 0x80); bus.loadProgram(0xa5, 0x10, 0xa5, 0x11, 0xa5, 0x12); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_LDX,"public void test_LDX() { bus.write(0x10, 0x00); bus.write(0x11, 0x0f); bus.write(0x12, 0x80); bus.loadProgram(0xa6, 0x10, 0xa6, 0x11, 0xa6, 0x12); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_CPY,"public void test_CPY() { bus.write(0x10, 0x00); bus.write(0x11, 0x80); bus.write(0x12, 0xff); cpu.setYRegister(0x80); bus.loadProgram(0xc4, 0x10, 0xc4, 0x11, 0xc4, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_CMP,"public void test_CMP() { bus.write(0x10, 0x00); bus.write(0x11, 0x80); bus.write(0x12, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xc5, 0x10, 0xc5, 0x11, 0xc5, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_DEC,"public void test_DEC() { bus.write(0x10, 0x00); bus.write(0x11, 0x01); bus.write(0x12, 0x80); bus.write(0x13, 0xff); bus.loadProgram(0xc6, 0x10, 0xc6, 0x11, 0xc6, 0x12, 0xc6, 0x13); cpu.step(); assertEquals(0xff, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x11)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0x12)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0x13)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_CPX,"public void test_CPX() { bus.write(0x10, 0x00); bus.write(0x11, 0x80); bus.write(0x12, 0xff); cpu.setXRegister(0x80); bus.loadProgram(0xe4, 0x10, 0xe4, 0x11, 0xe4, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_SBC,"public void test_SBC() { bus.write(0x10, 0x01); bus.loadProgram(0xa9, 0x00, 0xe5, 0x10); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xe5, 0x10); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xe5, 0x10); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xe5, 0x10); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xe5, 0x10); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() { bus.write(0x10, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xe5, 0x10); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xe5, 0x10); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xe5, 0x10); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xe5, 0x10); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() { bus.write(0x10, 0x01); bus.write(0x20, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xe5, 0x10); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xe5, 0x10); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xe5, 0x10); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xe5, 0x10); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xe5, 0x20); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xe5, 0x10); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xe5, 0x10); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
d54ad18b1709287732973146472f66532902676b,CpuZeroPageModeTest.java,test_INC,"public void test_INC() { bus.write(0x10, 0x00); bus.write(0x11, 0x7f); bus.write(0x12, 0xff); bus.loadProgram(0xe6, 0x10, 0xe6, 0x11, 0xe6, 0x12); cpu.step(); assertEquals(0x01, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x12)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/d54ad18b1709287732973146472f66532902676b
c93a03d4f433a14608176fa8b4b289ebcf8209bf,InstructionTable.java,toString,"public String toString() { return ""Indirect, Y-indexed""; }",https://www.github.com/sethm/symon/commit/c93a03d4f433a14608176fa8b4b289ebcf8209bf
24458da79ef4c5e40e70009f7b3d7700b8ff2700,Cpu.java,reset,"public void reset() { sp = 0xff; pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); ir = 0; carryFlag = false; irqDisableFlag = false; decimalModeFlag = false; breakFlag = false; overflowFlag = false; opTrap = false; }",https://www.github.com/sethm/symon/commit/24458da79ef4c5e40e70009f7b3d7700b8ff2700
24458da79ef4c5e40e70009f7b3d7700b8ff2700,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incrementPC(); clearOpTrap(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x05: a |= bus.read(operands[0]); setArithmeticFlags(a); break; case 0x06: j = bus.read(operands[0]); k = asl(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x0d: break; case 0x0e: break; case 0x10: break; case 0x11: break; case 0x15: break; case 0x16: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1d: break; case 0x1e: break; case 0x20: break; case 0x21: break; case 0x24: j = bus.read(operands[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x25: j = bus.read(operands[0]); a &= j; setArithmeticFlags(a); break; case 0x26: j = bus.read(operands[0]); k = rol(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x2c: break; case 0x2d: break; case 0x2e: break; case 0x30: break; case 0x31: break; case 0x35: break; case 0x36: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3d: break; case 0x3e: break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x41: break; case 0x45: j = bus.read(operands[0]); a ^= j; setArithmeticFlags(a); break; case 0x46: j = bus.read(operands[0]); k = lsr(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x4c: pc = address(operands[0], operands[1]); break; case 0x4d: break; case 0x4e: break; case 0x50: break; case 0x51: break; case 0x55: break; case 0x56: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5d: break; case 0x5e: break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x65: j = bus.read(operands[0]); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x66: j = bus.read(operands[0]); k = ror(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); } else { a = adc(a, operands[0]); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x6c: break; case 0x6d: break; case 0x6e: break; case 0x70: break; case 0x71: break; case 0x75: break; case 0x76: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7d: break; case 0x7e: break; case 0x81: break; case 0x84: bus.write(operands[0], y); setArithmeticFlags(y); break; case 0x85: bus.write(operands[0], a); setArithmeticFlags(a); break; case 0x86: bus.write(operands[0], x); setArithmeticFlags(x); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8c: break; case 0x8d: break; case 0x8e: break; case 0x90: break; case 0x91: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: break; case 0x9a: setStackPointer(x); break; case 0x9d: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa4: y = bus.read(operands[0]); setArithmeticFlags(y); break; case 0xa5: a = bus.read(operands[0]); setArithmeticFlags(a); break; case 0xa6: x = bus.read(operands[0]); setArithmeticFlags(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xac: break; case 0xad: break; case 0xae: break; case 0xb0: break; case 0xb1: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbc: break; case 0xbd: break; case 0xbe: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc4: cmp(y, bus.read(operands[0])); break; case 0xc5: cmp(a, bus.read(operands[0])); break; case 0xc6: j = bus.read(operands[0]); k = --j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcc: break; case 0xcd: break; case 0xce: break; case 0xd0: break; case 0xd1: break; case 0xd5: break; case 0xd6: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xdd: break; case 0xde: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe4: cmp(x, bus.read(operands[0])); break; case 0xe5: j = bus.read(operands[0]); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xe6: j = bus.read(operands[0]); k = ++j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); } else { a = sbc(a, operands[0]); } break; case 0xea: break; case 0xec: break; case 0xed: break; case 0xee: break; case 0xf0: break; case 0xf1: break; case 0xf5: break; case 0xf6: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfd: break; case 0xfe: break; case 0x02: case 0x03: case 0x04: case 0x07: case 0x0b: case 0x0c: case 0x0f: case 0x12: case 0x13: case 0x14: case 0x17: case 0x1a: case 0x1b: case 0x1c: case 0x1f: case 0x22: case 0x23: case 0x27: case 0x2b: case 0x2f: case 0x32: case 0x33: case 0x34: case 0x37: case 0x3a: case 0x3b: case 0x3c: case 0x3f: case 0x42: case 0x43: case 0x44: case 0x47: case 0x4b: case 0x4f: case 0x52: case 0x53: case 0x54: case 0x57: case 0x5a: case 0x5b: case 0x5c: case 0x5f: case 0x62: case 0x63: case 0x64: case 0x67: case 0x6b: case 0x6f: case 0x72: case 0x73: case 0x74: case 0x77: case 0x7a: case 0x7b: case 0x7c: case 0x7f: case 0x80: case 0x82: case 0x83: case 0x87: case 0x89: case 0x8b: case 0x8f: case 0x92: case 0x93: case 0x97: case 0x9b: case 0x9c: case 0x9e: case 0x9f: case 0xa3: case 0xa7: case 0xab: case 0xaf: case 0xb2: case 0xb3: case 0xb7: case 0xbb: case 0xbf: case 0xc2: case 0xc3: case 0xc7: case 0xcb: case 0xcf: case 0xd2: case 0xd3: case 0xd4: case 0xd7: case 0xda: case 0xdb: case 0xdc: case 0xdf: case 0xe2: case 0xe3: case 0xe7: case 0xeb: case 0xef: case 0xf2: case 0xf3: case 0xf4: case 0xf7: case 0xfa: case 0xfb: case 0xfc: case 0xff: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/24458da79ef4c5e40e70009f7b3d7700b8ff2700
24458da79ef4c5e40e70009f7b3d7700b8ff2700,Cpu.java,setOpTrap,public void setOpTrap() { this.opTrap = true; },https://www.github.com/sethm/symon/commit/24458da79ef4c5e40e70009f7b3d7700b8ff2700
24458da79ef4c5e40e70009f7b3d7700b8ff2700,Cpu.java,clearOpTrap,public void clearOpTrap() { this.opTrap = false; },https://www.github.com/sethm/symon/commit/24458da79ef4c5e40e70009f7b3d7700b8ff2700
24458da79ef4c5e40e70009f7b3d7700b8ff2700,Cpu.java,getOpTrap,public boolean getOpTrap() { return this.opTrap; },https://www.github.com/sethm/symon/commit/24458da79ef4c5e40e70009f7b3d7700b8ff2700
24458da79ef4c5e40e70009f7b3d7700b8ff2700,CpuAccumulatorModeTest.java,test_ASL,"public void test_ASL() { bus.loadProgram(0xa9, 0x00, 0x0a, 0xa9, 0x01, 0x0a, 0xa9, 0x02, 0x0a, 0xa9, 0x44, 0x0a, 0xa9, 0x80, 0x0a); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x04, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/24458da79ef4c5e40e70009f7b3d7700b8ff2700
24458da79ef4c5e40e70009f7b3d7700b8ff2700,CpuAccumulatorModeTest.java,test_ROL,"public void test_ROL() { bus.loadProgram(0xa9, 0x00, 0x2a, 0xa9, 0x01, 0x2a, 0x38, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/24458da79ef4c5e40e70009f7b3d7700b8ff2700
24458da79ef4c5e40e70009f7b3d7700b8ff2700,CpuAccumulatorModeTest.java,test_LSR,"public void test_LSR() { bus.loadProgram(0xa9, 0x00, 0x4a, 0xa9, 0x01, 0x4a, 0xa9, 0x02, 0x4a, 0xa9, 0x44, 0x4a, 0xa9, 0x80, 0x4a, 0x38, 0xa9, 0x02, 0x4a); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x22, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x40, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(3); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/24458da79ef4c5e40e70009f7b3d7700b8ff2700
24458da79ef4c5e40e70009f7b3d7700b8ff2700,CpuAccumulatorModeTest.java,test_ROR,"public void test_ROR() { bus.loadProgram(0xa9, 0x00, 0x6a, 0xa9, 0x10, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x08, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/24458da79ef4c5e40e70009f7b3d7700b8ff2700
4b28ab48088983f78e48173e6730c354bad47d12,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incrementPC(); clearOpTrap(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x05: a |= bus.read(operands[0]); setArithmeticFlags(a); break; case 0x06: j = bus.read(operands[0]); k = asl(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x0d: j = bus.read(address(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x0e: j = bus.read(address(operands[0], operands[1])); k = asl(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x10: break; case 0x11: break; case 0x15: break; case 0x16: break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1d: break; case 0x1e: break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(operands[0], operands[1]); break; case 0x21: break; case 0x24: j = bus.read(operands[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x25: j = bus.read(operands[0]); a &= j; setArithmeticFlags(a); break; case 0x26: j = bus.read(operands[0]); k = rol(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x2c: j = bus.read(address(operands[0], operands[1])); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x2d: j = bus.read(address(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x2e: j = bus.read(address(operands[0], operands[1])); k = rol(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x30: break; case 0x31: break; case 0x35: break; case 0x36: break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3d: break; case 0x3e: break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x41: break; case 0x45: j = bus.read(operands[0]); a ^= j; setArithmeticFlags(a); break; case 0x46: j = bus.read(operands[0]); k = lsr(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x4c: pc = address(operands[0], operands[1]); break; case 0x4d: a ^= bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x4e: j = bus.read(address(operands[0], operands[1])); k = lsr(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x50: break; case 0x51: break; case 0x55: break; case 0x56: break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5d: break; case 0x5e: break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x65: j = bus.read(operands[0]); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x66: j = bus.read(operands[0]); k = ror(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); } else { a = adc(a, operands[0]); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x6c: break; case 0x6d: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x6e: j = bus.read(address(operands[0], operands[1])); k = ror(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x70: break; case 0x71: break; case 0x75: break; case 0x76: break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7d: break; case 0x7e: break; case 0x81: break; case 0x84: bus.write(operands[0], y); setArithmeticFlags(y); break; case 0x85: bus.write(operands[0], a); setArithmeticFlags(a); break; case 0x86: bus.write(operands[0], x); setArithmeticFlags(x); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8c: bus.write(address(operands[0], operands[1]), y); setArithmeticFlags(y); break; case 0x8d: bus.write(address(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0x8e: bus.write(address(operands[0], operands[1]), x); setArithmeticFlags(x); break; case 0x90: break; case 0x91: break; case 0x94: break; case 0x95: break; case 0x96: break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: break; case 0x9a: setStackPointer(x); break; case 0x9d: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa4: y = bus.read(operands[0]); setArithmeticFlags(y); break; case 0xa5: a = bus.read(operands[0]); setArithmeticFlags(a); break; case 0xa6: x = bus.read(operands[0]); setArithmeticFlags(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xac: break; case 0xad: a = bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xae: x = bus.read(address(operands[0], operands[1])); setArithmeticFlags(x); break; case 0xb0: break; case 0xb1: break; case 0xb4: break; case 0xb5: break; case 0xb6: break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbc: y = bus.read(address(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xbd: break; case 0xbe: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc4: cmp(y, bus.read(operands[0])); break; case 0xc5: cmp(a, bus.read(operands[0])); break; case 0xc6: j = bus.read(operands[0]); k = --j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcc: cmp(y, bus.read(address(operands[0], operands[1]))); break; case 0xcd: cmp(a, bus.read(address(operands[0], operands[1]))); break; case 0xce: j = bus.read(address(operands[0], operands[1])); k = --j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xd0: break; case 0xd1: break; case 0xd5: break; case 0xd6: break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xdd: break; case 0xde: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe4: cmp(x, bus.read(operands[0])); break; case 0xe5: j = bus.read(operands[0]); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xe6: j = bus.read(operands[0]); k = ++j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); } else { a = sbc(a, operands[0]); } break; case 0xea: break; case 0xec: cmp(x, bus.read(address(operands[0], operands[1]))); break; case 0xed: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xee: j = bus.read(address(operands[0], operands[1])); k = ++j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xf0: break; case 0xf1: break; case 0xf5: break; case 0xf6: break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfd: break; case 0xfe: break; case 0x02: case 0x03: case 0x04: case 0x07: case 0x0b: case 0x0c: case 0x0f: case 0x12: case 0x13: case 0x14: case 0x17: case 0x1a: case 0x1b: case 0x1c: case 0x1f: case 0x22: case 0x23: case 0x27: case 0x2b: case 0x2f: case 0x32: case 0x33: case 0x34: case 0x37: case 0x3a: case 0x3b: case 0x3c: case 0x3f: case 0x42: case 0x43: case 0x44: case 0x47: case 0x4b: case 0x4f: case 0x52: case 0x53: case 0x54: case 0x57: case 0x5a: case 0x5b: case 0x5c: case 0x5f: case 0x62: case 0x63: case 0x64: case 0x67: case 0x6b: case 0x6f: case 0x72: case 0x73: case 0x74: case 0x77: case 0x7a: case 0x7b: case 0x7c: case 0x7f: case 0x80: case 0x82: case 0x83: case 0x87: case 0x89: case 0x8b: case 0x8f: case 0x92: case 0x93: case 0x97: case 0x9b: case 0x9c: case 0x9e: case 0x9f: case 0xa3: case 0xa7: case 0xab: case 0xaf: case 0xb2: case 0xb3: case 0xb7: case 0xbb: case 0xbf: case 0xc2: case 0xc3: case 0xc7: case 0xcb: case 0xcf: case 0xd2: case 0xd3: case 0xd4: case 0xd7: case 0xda: case 0xdb: case 0xdc: case 0xdf: case 0xe2: case 0xe3: case 0xe7: case 0xeb: case 0xef: case 0xf2: case 0xf3: case 0xf4: case 0xf7: case 0xfa: case 0xfb: case 0xfc: case 0xff: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_ORA,"public void test_ORA() { bus.write(0x7f00, 0x00); bus.write(0x7f02, 0x11); bus.write(0x3504, 0x22); bus.write(0x3508, 0x44); bus.write(0x1210, 0x88); bus.loadProgram(0x0d, 0x00, 0x7f, 0x0d, 0x02, 0x7f, 0x0d, 0x04, 0x35, 0x0d, 0x08, 0x35, 0x0d, 0x10, 0x12); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_ASL,"public void test_ASL() { bus.write(0x7f00, 0x00); bus.write(0x7f01, 0x01); bus.write(0x3502, 0x02); bus.write(0x3503, 0x44); bus.write(0x1204, 0x80); bus.loadProgram(0x0e, 0x00, 0x7f, 0x0e, 0x01, 0x7f, 0x0e, 0x02, 0x35, 0x0e, 0x03, 0x35, 0x0e, 0x04, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x7f00)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x7f01)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x3502)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x3503)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1204)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_JSR,"public void test_JSR() { bus.loadProgram(0xea, 0xea, 0x20, 0x00, 0x34); cpu.step(3); assertEquals(0x3400, cpu.getProgramCounter()); assertEquals(0x02, bus.read(0x1ff)); assertEquals(0x04, bus.read(0x1fe)); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_BIT,"public void test_BIT() { bus.write(0x1200, 0xc0); bus.loadProgram(0xa9, 0x01, 0x2c, 0x00, 0x12, 0xa9, 0x0f, 0x2c, 0x00, 0x12, 0xa9, 0x40, 0x2c, 0x00, 0x12, 0xa9, 0x80, 0x2c, 0x00, 0x12, 0xa9, 0xc0, 0x2c, 0x00, 0x12, 0xa9, 0xff, 0x2c, 0x00, 0x12); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_AND,"public void test_AND() { bus.write(0x1200, 0x00); bus.write(0x1201, 0x11); bus.write(0x1202, 0xff); bus.write(0x1203, 0x99); bus.write(0x1204, 0x11); bus.write(0x1205, 0x0f); bus.loadProgram(0x2d, 0x00, 0x12, 0x2d, 0x01, 0x12, 0xa9, 0xaa, 0x2d, 0x02, 0x12, 0x2d, 0x03, 0x12, 0x2d, 0x04, 0x12, 0xa9, 0xff, 0x2d, 0x05, 0x12); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_ROL,"public void test_ROL() { bus.write(0x1200, 0x00); bus.write(0x1201, 0x01); bus.loadProgram(0x2e, 0x00, 0x12, 0x2e, 0x01, 0x12, 0x38, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1200)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_JMP,"public void test_JMP() { bus.loadProgram(0x4c, 0x00, 0x34); cpu.step(); assertEquals(0x3400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_EOR,"public void test_EOR() { bus.write(0x1210, 0x00); bus.write(0x1211, 0xff); bus.write(0x1212, 0x33); bus.write(0x1213, 0x44); bus.loadProgram(0xa9, 0x88, 0x4d, 0x10, 0x12, 0x4d, 0x11, 0x12, 0x4d, 0x12, 0x12, 0x4d, 0x13, 0x12); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_LSR,"public void test_LSR() { bus.write(0x1200, 0x00); bus.write(0x1201, 0x01); bus.write(0x1202, 0x02); bus.write(0x1203, 0x44); bus.write(0x1204, 0x80); bus.write(0x1205, 0x02); bus.loadProgram(0x4e, 0x00, 0x12, 0x4e, 0x01, 0x12, 0x4e, 0x02, 0x12, 0x4e, 0x03, 0x12, 0x4e, 0x04, 0x12, 0x38, 0x4e, 0x05, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1200)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1201)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x1202)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0x1203)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1204)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x1205)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_ADC,"public void test_ADC() { bus.write(0x1210, 0x01); bus.write(0x1211, 0xff); bus.loadProgram(0xa9, 0x00, 0x6d, 0x10, 0x12); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x6d, 0x10, 0x12); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x6d, 0x10, 0x12); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x6d, 0x10, 0x12); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x6d, 0x11, 0x12); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x6d, 0x11, 0x12); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x6d, 0x11, 0x12); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x6d, 0x11, 0x12); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() { bus.write(0x1210, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() { bus.write(0x1210, 0x01); bus.write(0x1211, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x6d, 0x11, 0x12); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x6d, 0x11, 0x12); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x6d, 0x11, 0x12); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_ROR,"public void test_ROR() { bus.write(0x1210, 0x00); bus.write(0x1211, 0x10); bus.loadProgram(0x6e, 0x10, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1211)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_STY,"public void test_STY() { cpu.setYRegister(0x00); bus.loadProgram(0x8c, 0x10, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x8c, 0x10, 0x12); cpu.step(); assertEquals(0x0f, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x8c, 0x10, 0x12); cpu.step(); assertEquals(0x80, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_STA,"public void test_STA() { cpu.setAccumulator(0x00); bus.loadProgram(0x8d, 0x10, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x8d, 0x10, 0x12); cpu.step(); assertEquals(0x0f, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x8d, 0x10, 0x12); cpu.step(); assertEquals(0x80, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_STX,"public void test_STX() { cpu.setXRegister(0x00); bus.loadProgram(0x8e, 0x10, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x0f); bus.loadProgram(0x8e, 0x10, 0x12); cpu.step(); assertEquals(0x0f, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x80); bus.loadProgram(0x8e, 0x10, 0x12); cpu.step(); assertEquals(0x80, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_LDA,"public void test_LDA() { bus.write(0x1210, 0x00); bus.write(0x1211, 0x0f); bus.write(0x1212, 0x80); bus.loadProgram(0xad, 0x10, 0x12, 0xad, 0x11, 0x12, 0xad, 0x12, 0x12); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_LDX,"public void test_LDX() { bus.write(0x1210, 0x00); bus.write(0x1211, 0x0f); bus.write(0x1212, 0x80); bus.loadProgram(0xae, 0x10, 0x12, 0xae, 0x11, 0x12, 0xae, 0x12, 0x12); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_LDY,"public void test_LDY() { bus.write(0x1210, 0x00); bus.write(0x1211, 0x0f); bus.write(0x1212, 0x80); bus.loadProgram(0xbc, 0x10, 0x12, 0xbc, 0x11, 0x12, 0xbc, 0x12, 0x12); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_CMP,"public void test_CMP() { bus.write(0x1210, 0x00); bus.write(0x1211, 0x80); bus.write(0x1212, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xcd, 0x10, 0x12, 0xcd, 0x11, 0x12, 0xcd, 0x12, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_CPY,"public void test_CPY() { bus.write(0x1210, 0x00); bus.write(0x1211, 0x80); bus.write(0x1212, 0xff); cpu.setYRegister(0x80); bus.loadProgram(0xcc, 0x10, 0x12, 0xcc, 0x11, 0x12, 0xcc, 0x12, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_DEC,"public void test_DEC() { bus.write(0x1210, 0x00); bus.write(0x1211, 0x01); bus.write(0x1212, 0x80); bus.write(0x1213, 0xff); bus.loadProgram(0xce, 0x10, 0x12, 0xce, 0x11, 0x12, 0xce, 0x12, 0x12, 0xce, 0x13, 0x12); cpu.step(); assertEquals(0xff, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1211)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0x1212)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0x1213)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_CPX,"public void test_CPX() { bus.write(0x1210, 0x00); bus.write(0x1211, 0x80); bus.write(0x1212, 0xff); cpu.setXRegister(0x80); bus.loadProgram(0xec, 0x10, 0x12, 0xec, 0x11, 0x12, 0xec, 0x12, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_SBC,"public void test_SBC() { bus.write(0x1210, 0x01); bus.loadProgram(0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() { bus.write(0x1210, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() { bus.write(0x1210, 0x01); bus.write(0x1220, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xed, 0x20, 0x12); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xed, 0x10, 0x12); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
4b28ab48088983f78e48173e6730c354bad47d12,CpuAbsoluteModeTest.java,test_INC,"public void test_INC() { bus.write(0x1210, 0x00); bus.write(0x1211, 0x7f); bus.write(0x1212, 0xff); bus.loadProgram(0xee, 0x10, 0x12, 0xee, 0x11, 0x12, 0xee, 0x12, 0x12); cpu.step(); assertEquals(0x01, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1212)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/4b28ab48088983f78e48173e6730c354bad47d12
107aca7777e227c5faa1d3bf2716c0596a77c98b,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incrementPC(); clearOpTrap(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x05: a |= bus.read(operands[0]); setArithmeticFlags(a); break; case 0x06: j = bus.read(operands[0]); k = asl(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x0d: j = bus.read(address(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x0e: j = bus.read(address(operands[0], operands[1])); k = asl(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x10: break; case 0x11: break; case 0x15: a |= bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0x16: j = bus.read(zpxAddress(operands[0])); k = asl(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1d: break; case 0x1e: break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(operands[0], operands[1]); break; case 0x21: break; case 0x24: j = bus.read(operands[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x25: j = bus.read(operands[0]); a &= j; setArithmeticFlags(a); break; case 0x26: j = bus.read(operands[0]); k = rol(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x2c: j = bus.read(address(operands[0], operands[1])); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x2d: j = bus.read(address(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x2e: j = bus.read(address(operands[0], operands[1])); k = rol(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x30: break; case 0x31: break; case 0x35: j = bus.read(zpxAddress(operands[0])); a &= j; setArithmeticFlags(a); break; case 0x36: j = bus.read(zpxAddress(operands[0])); k = rol(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3d: break; case 0x3e: break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x41: break; case 0x45: j = bus.read(operands[0]); a ^= j; setArithmeticFlags(a); break; case 0x46: j = bus.read(operands[0]); k = lsr(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x4c: pc = address(operands[0], operands[1]); break; case 0x4d: a ^= bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x4e: j = bus.read(address(operands[0], operands[1])); k = lsr(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x50: break; case 0x51: break; case 0x55: a ^= bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0x56: j = bus.read(zpxAddress(operands[0])); k = lsr(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5d: break; case 0x5e: break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x65: j = bus.read(operands[0]); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x66: j = bus.read(operands[0]); k = ror(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); } else { a = adc(a, operands[0]); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x6c: lo = address(operands[0], operands[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x6d: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x6e: j = bus.read(address(operands[0], operands[1])); k = ror(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x70: break; case 0x71: break; case 0x75: j = bus.read(zpxAddress(operands[0])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x76: j = bus.read(zpxAddress(operands[0])); k = ror(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7d: break; case 0x7e: break; case 0x81: break; case 0x84: bus.write(operands[0], y); setArithmeticFlags(y); break; case 0x85: bus.write(operands[0], a); setArithmeticFlags(a); break; case 0x86: bus.write(operands[0], x); setArithmeticFlags(x); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8c: bus.write(address(operands[0], operands[1]), y); setArithmeticFlags(y); break; case 0x8d: bus.write(address(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0x8e: bus.write(address(operands[0], operands[1]), x); setArithmeticFlags(x); break; case 0x90: break; case 0x91: break; case 0x94: bus.write(zpxAddress(operands[0]), y); setArithmeticFlags(y); break; case 0x95: bus.write(zpxAddress(operands[0]), a); setArithmeticFlags(a); break; case 0x96: bus.write(zpyAddress(operands[0]), x); setArithmeticFlags(x); break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: break; case 0x9a: setStackPointer(x); break; case 0x9d: break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa4: y = bus.read(operands[0]); setArithmeticFlags(y); break; case 0xa5: a = bus.read(operands[0]); setArithmeticFlags(a); break; case 0xa6: x = bus.read(operands[0]); setArithmeticFlags(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xac: break; case 0xad: a = bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xae: x = bus.read(address(operands[0], operands[1])); setArithmeticFlags(x); break; case 0xb0: break; case 0xb1: break; case 0xb4: y = bus.read(zpxAddress(operands[0])); setArithmeticFlags(y); break; case 0xb5: a = bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0xb6: x = bus.read(zpyAddress(operands[0])); setArithmeticFlags(x); break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbc: y = bus.read(address(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xbd: break; case 0xbe: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc4: cmp(y, bus.read(operands[0])); break; case 0xc5: cmp(a, bus.read(operands[0])); break; case 0xc6: j = bus.read(operands[0]); k = --j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcc: cmp(y, bus.read(address(operands[0], operands[1]))); break; case 0xcd: cmp(a, bus.read(address(operands[0], operands[1]))); break; case 0xce: j = bus.read(address(operands[0], operands[1])); k = --j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xd0: break; case 0xd1: break; case 0xd5: cmp(a, bus.read(zpxAddress(operands[0]))); break; case 0xd6: j = bus.read(zpxAddress(operands[0])); k = --j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xdd: break; case 0xde: break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe4: cmp(x, bus.read(operands[0])); break; case 0xe5: j = bus.read(operands[0]); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xe6: j = bus.read(operands[0]); k = ++j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); } else { a = sbc(a, operands[0]); } break; case 0xea: break; case 0xec: cmp(x, bus.read(address(operands[0], operands[1]))); break; case 0xed: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xee: j = bus.read(address(operands[0], operands[1])); k = ++j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xf0: break; case 0xf1: break; case 0xf5: j = bus.read(zpxAddress(operands[0])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xf6: j = bus.read(zpxAddress(operands[0])); k = ++j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfd: break; case 0xfe: break; case 0x02: case 0x03: case 0x04: case 0x07: case 0x0b: case 0x0c: case 0x0f: case 0x12: case 0x13: case 0x14: case 0x17: case 0x1a: case 0x1b: case 0x1c: case 0x1f: case 0x22: case 0x23: case 0x27: case 0x2b: case 0x2f: case 0x32: case 0x33: case 0x34: case 0x37: case 0x3a: case 0x3b: case 0x3c: case 0x3f: case 0x42: case 0x43: case 0x44: case 0x47: case 0x4b: case 0x4f: case 0x52: case 0x53: case 0x54: case 0x57: case 0x5a: case 0x5b: case 0x5c: case 0x5f: case 0x62: case 0x63: case 0x64: case 0x67: case 0x6b: case 0x6f: case 0x72: case 0x73: case 0x74: case 0x77: case 0x7a: case 0x7b: case 0x7c: case 0x7f: case 0x80: case 0x82: case 0x83: case 0x87: case 0x89: case 0x8b: case 0x8f: case 0x92: case 0x93: case 0x97: case 0x9b: case 0x9c: case 0x9e: case 0x9f: case 0xa3: case 0xa7: case 0xab: case 0xaf: case 0xb2: case 0xb3: case 0xb7: case 0xbb: case 0xbf: case 0xc2: case 0xc3: case 0xc7: case 0xcb: case 0xcf: case 0xd2: case 0xd3: case 0xd4: case 0xd7: case 0xda: case 0xdb: case 0xdc: case 0xdf: case 0xe2: case 0xe3: case 0xe7: case 0xeb: case 0xef: case 0xf2: case 0xf3: case 0xf4: case 0xf7: case 0xfa: case 0xfb: case 0xfc: case 0xff: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,Cpu.java,zpxAddress,int zpxAddress(int zp) { return (zp+getXRegister())&0xff; },https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,Cpu.java,zpyAddress,int zpyAddress(int zp) { return (zp+getYRegister())&0xff; },https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuIndirectModeTest.java,test_JMP,"public void test_JMP() { bus.write(0x3400, 0x00); bus.write(0x3401, 0x54); bus.loadProgram(0x6c, 0x00, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuTest.java,testZpxAddress,"public void testZpxAddress() { cpu.setXRegister(0x00); assertEquals(0x10, cpu.zpxAddress(0x10)); cpu.setXRegister(0x10); assertEquals(0x20, cpu.zpxAddress(0x10)); cpu.setXRegister(0x25); assertEquals(0x35, cpu.zpxAddress(0x10)); cpu.setXRegister(0xf5); assertEquals(0x05, cpu.zpxAddress(0x10)); cpu.setXRegister(0x00); assertEquals(0x80, cpu.zpxAddress(0x80)); cpu.setXRegister(0x10); assertEquals(0x90, cpu.zpxAddress(0x80)); cpu.setXRegister(0x25); assertEquals(0xa5, cpu.zpxAddress(0x80)); cpu.setXRegister(0x95); assertEquals(0x15, cpu.zpxAddress(0x80)); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuTest.java,testZpyAddress,"public void testZpyAddress() { cpu.setYRegister(0x00); assertEquals(0x10, cpu.zpyAddress(0x10)); cpu.setYRegister(0x10); assertEquals(0x20, cpu.zpyAddress(0x10)); cpu.setYRegister(0x25); assertEquals(0x35, cpu.zpyAddress(0x10)); cpu.setYRegister(0xf5); assertEquals(0x05, cpu.zpyAddress(0x10)); cpu.setYRegister(0x00); assertEquals(0x80, cpu.zpyAddress(0x80)); cpu.setYRegister(0x10); assertEquals(0x90, cpu.zpyAddress(0x80)); cpu.setYRegister(0x25); assertEquals(0xa5, cpu.zpyAddress(0x80)); cpu.setYRegister(0x95); assertEquals(0x15, cpu.zpyAddress(0x80)); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_ORA,"public void test_ORA() { bus.write(0x30, 0x00); bus.write(0x32, 0x11); bus.write(0x34, 0x22); bus.write(0x38, 0x44); bus.write(0x40, 0x88); bus.write(0x02, 0x88); cpu.setXRegister(0x30); bus.loadProgram(0x15, 0x00, 0x15, 0x02, 0x15, 0x04, 0x15, 0x08, 0x15, 0x10, 0xa9, 0x00, 0x15, 0xd2); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_ASL,"public void test_ASL() { bus.write(0x30, 0x00); bus.write(0x31, 0x01); bus.write(0x32, 0x02); bus.write(0x33, 0x44); bus.write(0x34, 0x80); bus.write(0x02, 0x01); cpu.setXRegister(0x30); bus.loadProgram(0x16, 0x00, 0x16, 0x01, 0x16, 0x02, 0x16, 0x03, 0x16, 0x04, 0x16, 0xd2); cpu.step(); assertEquals(0x00, bus.read(0x30)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x31)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x32)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x33)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x34)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x02)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_AND,"public void test_AND() { bus.write(0x30, 0x00); bus.write(0x31, 0x11); bus.write(0x32, 0xff); bus.write(0x33, 0x99); bus.write(0x34, 0x11); bus.write(0x35, 0x0f); bus.write(0x02, 0x11); cpu.setXRegister(0x30); bus.loadProgram(0x35, 0x00, 0x35, 0x01, 0xa9, 0xaa, 0x35, 0x02, 0x35, 0x03, 0x35, 0x04, 0xa9, 0xff, 0x35, 0x05, 0xa9, 0x01, 0x35, 0xd2); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_ROL,"public void test_ROL() { bus.write(0x70, 0x00); bus.write(0x71, 0x01); cpu.setXRegister(0x70); bus.loadProgram(0x36, 0x00, 0x36, 0x01, 0x38, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01); cpu.step(); assertEquals(0x00, bus.read(0x70)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_EOR,"public void test_EOR() { bus.write(0x40, 0x00); bus.write(0x41, 0xff); bus.write(0x42, 0x33); bus.write(0x43, 0x44); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x88, 0x55, 0x10, 0x55, 0x11, 0x55, 0x12, 0x55, 0x13); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_LSR,"public void test_LSR() { bus.write(0x30, 0x00); bus.write(0x31, 0x01); bus.write(0x32, 0x02); bus.write(0x33, 0x44); bus.write(0x34, 0x80); bus.write(0x35, 0x02); cpu.setXRegister(0x30); bus.loadProgram(0x56, 0x00, 0x56, 0x01, 0x56, 0x02, 0x56, 0x03, 0x56, 0x04, 0x38, 0x56, 0x05); cpu.step(); assertEquals(0x00, bus.read(0x30)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x31)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x32)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0x33)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x34)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x35)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_ADC,"public void test_ADC() { bus.write(0x40, 0x01); bus.write(0x41, 0xff); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x75, 0x10); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x75, 0x10); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x75, 0x10); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x75, 0x10); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x75, 0x11); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x75, 0x11); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x75, 0x11); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x75, 0x11); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() { bus.write(0x40, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x75, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() { bus.write(0x40, 0x01); bus.write(0x41, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x75, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x75, 0x10); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x75, 0x10); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x75, 0x10); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x75, 0x11); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x75, 0x11); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x75, 0x11); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_ROR,"public void test_ROR() { bus.write(0x40, 0x00); bus.write(0x41, 0x10); bus.loadProgram(0x76, 0x10, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11); cpu.setXRegister(0x30); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x41)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_STY,"public void test_STY() { cpu.setXRegister(0x30); cpu.setYRegister(0x00); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_STA,"public void test_STA() { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_LDY,"public void test_LDY() { bus.write(0x45, 0x00); bus.write(0x46, 0x0f); bus.write(0x47, 0x80); bus.loadProgram(0xb4, 0x10, 0xb4, 0x11, 0xb4, 0x12); cpu.setXRegister(0x35); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_LDA,"public void test_LDA() { bus.write(0x42, 0x00); bus.write(0x43, 0x0f); bus.write(0x44, 0x80); bus.loadProgram(0xb5, 0x10, 0xb5, 0x11, 0xb5, 0x12); cpu.setXRegister(0x32); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_CMP,"public void test_CMP() { bus.write(0x40, 0x00); bus.write(0x41, 0x80); bus.write(0x42, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xd5, 0x10, 0xd5, 0x11, 0xd5, 0x12); cpu.setXRegister(0x30); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_DEC,"public void test_DEC() { bus.write(0x40, 0x00); bus.write(0x41, 0x01); bus.write(0x42, 0x80); bus.write(0x43, 0xff); bus.loadProgram(0xd6, 0x10, 0xd6, 0x11, 0xd6, 0x12, 0xd6, 0x13); cpu.setXRegister(0x30); cpu.step(); assertEquals(0xff, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x41)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0x42)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0x43)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_SBC,"public void test_SBC() { bus.write(0x40, 0x01); bus.loadProgram(0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() { bus.write(0x40, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() { bus.write(0x40, 0x01); bus.write(0x50, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xf5, 0x20); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageXModeTest.java,test_INC,"public void test_INC() { bus.write(0x30, 0x00); bus.write(0x31, 0x7f); bus.write(0x32, 0xff); cpu.setXRegister(0x20); bus.loadProgram(0xf6, 0x10, 0xf6, 0x11, 0xf6, 0x12); cpu.step(); assertEquals(0x01, bus.read(0x30)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0x31)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x32)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageYModeTest.java,test_STX,"public void test_STX() { cpu.setYRegister(0x30); cpu.setXRegister(0x00); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setXRegister(0x0f); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setXRegister(0x80); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
107aca7777e227c5faa1d3bf2716c0596a77c98b,CpuZeroPageYModeTest.java,test_LDX,"public void test_LDX() { bus.write(0x40, 0x00); bus.write(0x41, 0x0f); bus.write(0x42, 0x80); bus.loadProgram(0xb6, 0x10, 0xb6, 0x11, 0xb6, 0x12); cpu.setYRegister(0x30); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/107aca7777e227c5faa1d3bf2716c0596a77c98b
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incrementPC(); clearOpTrap(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x05: a |= bus.read(operands[0]); setArithmeticFlags(a); break; case 0x06: j = bus.read(operands[0]); k = asl(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x0d: j = bus.read(address(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x0e: j = bus.read(address(operands[0], operands[1])); k = asl(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x10: break; case 0x11: break; case 0x15: a |= bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0x16: j = bus.read(zpxAddress(operands[0])); k = asl(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x18: clearCarryFlag(); break; case 0x19: break; case 0x1d: j = bus.read(xAddress(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x1e: j = bus.read(xAddress(operands[0], operands[1])); k = asl(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(operands[0], operands[1]); break; case 0x21: break; case 0x24: j = bus.read(operands[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x25: j = bus.read(operands[0]); a &= j; setArithmeticFlags(a); break; case 0x26: j = bus.read(operands[0]); k = rol(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x2c: j = bus.read(address(operands[0], operands[1])); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x2d: j = bus.read(address(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x2e: j = bus.read(address(operands[0], operands[1])); k = rol(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x30: break; case 0x31: break; case 0x35: j = bus.read(zpxAddress(operands[0])); a &= j; setArithmeticFlags(a); break; case 0x36: j = bus.read(zpxAddress(operands[0])); k = rol(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x38: setCarryFlag(); break; case 0x39: break; case 0x3d: j = bus.read(xAddress(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x3e: j = bus.read(xAddress(operands[0], operands[1])); k = rol(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x41: break; case 0x45: j = bus.read(operands[0]); a ^= j; setArithmeticFlags(a); break; case 0x46: j = bus.read(operands[0]); k = lsr(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x4c: pc = address(operands[0], operands[1]); break; case 0x4d: a ^= bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x4e: j = bus.read(address(operands[0], operands[1])); k = lsr(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x50: break; case 0x51: break; case 0x55: a ^= bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0x56: j = bus.read(zpxAddress(operands[0])); k = lsr(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x58: clearIrqDisableFlag(); break; case 0x59: break; case 0x5d: a ^= bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x5e: j = bus.read(xAddress(operands[0], operands[1])); k = lsr(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x65: j = bus.read(operands[0]); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x66: j = bus.read(operands[0]); k = ror(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); } else { a = adc(a, operands[0]); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x6c: lo = address(operands[0], operands[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x6d: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x6e: j = bus.read(address(operands[0], operands[1])); k = ror(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x70: break; case 0x71: break; case 0x75: j = bus.read(zpxAddress(operands[0])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x76: j = bus.read(zpxAddress(operands[0])); k = ror(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x78: setIrqDisableFlag(); break; case 0x79: break; case 0x7d: j = bus.read(xAddress(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x7e: j = bus.read(xAddress(operands[0], operands[1])); k = ror(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x81: break; case 0x84: bus.write(operands[0], y); setArithmeticFlags(y); break; case 0x85: bus.write(operands[0], a); setArithmeticFlags(a); break; case 0x86: bus.write(operands[0], x); setArithmeticFlags(x); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8c: bus.write(address(operands[0], operands[1]), y); setArithmeticFlags(y); break; case 0x8d: bus.write(address(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0x8e: bus.write(address(operands[0], operands[1]), x); setArithmeticFlags(x); break; case 0x90: break; case 0x91: break; case 0x94: bus.write(zpxAddress(operands[0]), y); setArithmeticFlags(y); break; case 0x95: bus.write(zpxAddress(operands[0]), a); setArithmeticFlags(a); break; case 0x96: bus.write(zpyAddress(operands[0]), x); setArithmeticFlags(x); break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: break; case 0x9a: setStackPointer(x); break; case 0x9d: bus.write(xAddress(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa4: y = bus.read(operands[0]); setArithmeticFlags(y); break; case 0xa5: a = bus.read(operands[0]); setArithmeticFlags(a); break; case 0xa6: x = bus.read(operands[0]); setArithmeticFlags(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xac: y = bus.read(address(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xad: a = bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xae: x = bus.read(address(operands[0], operands[1])); setArithmeticFlags(x); break; case 0xb0: break; case 0xb1: break; case 0xb4: y = bus.read(zpxAddress(operands[0])); setArithmeticFlags(y); break; case 0xb5: a = bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0xb6: x = bus.read(zpyAddress(operands[0])); setArithmeticFlags(x); break; case 0xb8: clearOverflowFlag(); break; case 0xb9: break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbc: y = bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xbd: a = bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xbe: break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc4: cmp(y, bus.read(operands[0])); break; case 0xc5: cmp(a, bus.read(operands[0])); break; case 0xc6: j = bus.read(operands[0]); k = --j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcc: cmp(y, bus.read(address(operands[0], operands[1]))); break; case 0xcd: cmp(a, bus.read(address(operands[0], operands[1]))); break; case 0xce: j = bus.read(address(operands[0], operands[1])); k = --j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xd0: break; case 0xd1: break; case 0xd5: cmp(a, bus.read(zpxAddress(operands[0]))); break; case 0xd6: j = bus.read(zpxAddress(operands[0])); k = --j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: break; case 0xdd: cmp(a, bus.read(xAddress(operands[0], operands[1]))); break; case 0xde: j = bus.read(xAddress(operands[0], operands[1])); k = --j & 0xff; bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe4: cmp(x, bus.read(operands[0])); break; case 0xe5: j = bus.read(operands[0]); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xe6: j = bus.read(operands[0]); k = ++j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); } else { a = sbc(a, operands[0]); } break; case 0xea: break; case 0xec: cmp(x, bus.read(address(operands[0], operands[1]))); break; case 0xed: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xee: j = bus.read(address(operands[0], operands[1])); k = ++j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xf0: break; case 0xf1: break; case 0xf5: j = bus.read(zpxAddress(operands[0])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xf6: j = bus.read(zpxAddress(operands[0])); k = ++j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: break; case 0xfd: j = bus.read(xAddress(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xfe: j = bus.read(xAddress(operands[0], operands[1])); k = ++j & 0xff; bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x02: case 0x03: case 0x04: case 0x07: case 0x0b: case 0x0c: case 0x0f: case 0x12: case 0x13: case 0x14: case 0x17: case 0x1a: case 0x1b: case 0x1c: case 0x1f: case 0x22: case 0x23: case 0x27: case 0x2b: case 0x2f: case 0x32: case 0x33: case 0x34: case 0x37: case 0x3a: case 0x3b: case 0x3c: case 0x3f: case 0x42: case 0x43: case 0x44: case 0x47: case 0x4b: case 0x4f: case 0x52: case 0x53: case 0x54: case 0x57: case 0x5a: case 0x5b: case 0x5c: case 0x5f: case 0x62: case 0x63: case 0x64: case 0x67: case 0x6b: case 0x6f: case 0x72: case 0x73: case 0x74: case 0x77: case 0x7a: case 0x7b: case 0x7c: case 0x7f: case 0x80: case 0x82: case 0x83: case 0x87: case 0x89: case 0x8b: case 0x8f: case 0x92: case 0x93: case 0x97: case 0x9b: case 0x9c: case 0x9e: case 0x9f: case 0xa3: case 0xa7: case 0xab: case 0xaf: case 0xb2: case 0xb3: case 0xb7: case 0xbb: case 0xbf: case 0xc2: case 0xc3: case 0xc7: case 0xcb: case 0xcf: case 0xd2: case 0xd3: case 0xd4: case 0xd7: case 0xda: case 0xdb: case 0xdc: case 0xdf: case 0xe2: case 0xe3: case 0xe7: case 0xeb: case 0xef: case 0xf2: case 0xf3: case 0xf4: case 0xf7: case 0xfa: case 0xfb: case 0xfc: case 0xff: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,Cpu.java,xAddress,"int xAddress(int lowByte, int hiByte) { return (address(lowByte, hiByte)+getXRegister()) & 0xffff; }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,Cpu.java,yAddress,"int yAddress(int lowByte, int hiByte) { return (address(lowByte, hiByte)+getYRegister()) & 0xffff; }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_ORA,"public void test_ORA() { bus.write(0x2c30, 0x00); bus.write(0x2c32, 0x11); bus.write(0x2c34, 0x22); bus.write(0x2c38, 0x44); bus.write(0x2c40, 0x88); cpu.setXRegister(0x30); bus.loadProgram(0x1d, 0x00, 0x2c, 0x1d, 0x02, 0x2c, 0x1d, 0x04, 0x2c, 0x1d, 0x08, 0x2c, 0x1d, 0x10, 0x2c); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_ASL,"public void test_ASL() { bus.write(0x2c30, 0x00); bus.write(0x2c31, 0x01); bus.write(0x2c32, 0x02); bus.write(0x2c33, 0x44); bus.write(0x2c34, 0x80); cpu.setXRegister(0x30); bus.loadProgram(0x1e, 0x00, 0x2c, 0x1e, 0x01, 0x2c, 0x1e, 0x02, 0x2c, 0x1e, 0x03, 0x2c, 0x1e, 0x04, 0x2c); cpu.step(); assertEquals(0x00, bus.read(0x2c30)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x2c31)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x2c32)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x2c33)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x2c34)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_AND,"public void test_AND() { bus.write(0x1a30, 0x00); bus.write(0x1a31, 0x11); bus.write(0x1a32, 0xff); bus.write(0x1a33, 0x99); bus.write(0x1a34, 0x11); bus.write(0x1a35, 0x0f); bus.write(0x1a02, 0x11); cpu.setXRegister(0x30); bus.loadProgram(0x3d, 0x00, 0x1a, 0x3d, 0x01, 0x1a, 0xa9, 0xaa, 0x3d, 0x02, 0x1a, 0x3d, 0x03, 0x1a, 0x3d, 0x04, 0x1a, 0xa9, 0xff, 0x3d, 0x05, 0x1a, 0xa9, 0x01, 0x3d, 0xd2, 0x1a); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_ROL,"public void test_ROL() { bus.write(0x1070, 0x00); bus.write(0x1071, 0x01); cpu.setXRegister(0x70); bus.loadProgram(0x3e, 0x00, 0x10, 0x3e, 0x01, 0x10, 0x38, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x1070)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_EOR,"public void test_EOR() { bus.write(0xab40, 0x00); bus.write(0xab41, 0xff); bus.write(0xab42, 0x33); bus.write(0xab43, 0x44); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x88, 0x5d, 0x10, 0xab, 0x5d, 0x11, 0xab, 0x5d, 0x12, 0xab, 0x5d, 0x13, 0xab); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_LSR,"public void test_LSR() { bus.write(0xab30, 0x00); bus.write(0xab31, 0x01); bus.write(0xab32, 0x02); bus.write(0xab33, 0x44); bus.write(0xab34, 0x80); bus.write(0xab35, 0x02); cpu.setXRegister(0x30); bus.loadProgram(0x5e, 0x00, 0xab, 0x5e, 0x01, 0xab, 0x5e, 0x02, 0xab, 0x5e, 0x03, 0xab, 0x5e, 0x04, 0xab, 0x38, 0x5e, 0x05, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab30)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab31)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0xab32)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0xab33)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0xab34)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0xab35)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_ADC,"public void test_ADC() { bus.write(0xab40, 0x01); bus.write(0xab41, 0xff); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() { bus.write(0xab40, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x7d, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() { bus.write(0xab40, 0x01); bus.write(0xab41, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x7d, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x7d, 0x10, 0xab); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x7d, 0x10, 0xab); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x7d, 0x10, 0xab); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x7d, 0x11, 0xab); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x7d, 0x11, 0xab); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x7d, 0x11, 0xab); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_ROR,"public void test_ROR() { bus.write(0xab40, 0x00); bus.write(0xab41, 0x10); bus.loadProgram(0x7e, 0x10, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab); cpu.setXRegister(0x30); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab41)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_STA,"public void test_STA() { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_LDY,"public void test_LDY() { bus.write(0xab45, 0x00); bus.write(0xab46, 0x0f); bus.write(0xab47, 0x80); bus.loadProgram(0xbc, 0x10, 0xab, 0xbc, 0x11, 0xab, 0xbc, 0x12, 0xab); cpu.setXRegister(0x35); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_LDA,"public void test_LDA() { bus.write(0xab42, 0x00); bus.write(0xab43, 0x0f); bus.write(0xab44, 0x80); bus.loadProgram(0xbd, 0x10, 0xab, 0xbd, 0x11, 0xab, 0xbd, 0x12, 0xab); cpu.setXRegister(0x32); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_CMP,"public void test_CMP() { bus.write(0xab40, 0x00); bus.write(0xab41, 0x80); bus.write(0xab42, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xdd, 0x10, 0xab, 0xdd, 0x11, 0xab, 0xdd, 0x12, 0xab); cpu.setXRegister(0x30); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_DEC,"public void test_DEC() { bus.write(0xab40, 0x00); bus.write(0xab41, 0x01); bus.write(0xab42, 0x80); bus.write(0xab43, 0xff); bus.loadProgram(0xde, 0x10, 0xab, 0xde, 0x11, 0xab, 0xde, 0x12, 0xab, 0xde, 0x13, 0xab); cpu.setXRegister(0x30); cpu.step(); assertEquals(0xff, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab41)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0xab42)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0xab43)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_SBC,"public void test_SBC() { bus.write(0xab40, 0x01); bus.loadProgram(0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() { bus.write(0xab40, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() { bus.write(0xab40, 0x01); bus.write(0xab50, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xfd, 0x20, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
dccf73a6b7cce7d9a9e56064def405dcbf6b3605,CpuAbsoluteXModeTest.java,test_INC,"public void test_INC() { bus.write(0xab30, 0x00); bus.write(0xab31, 0x7f); bus.write(0xab32, 0xff); cpu.setXRegister(0x20); bus.loadProgram(0xfe, 0x10, 0xab, 0xfe, 0x11, 0xab, 0xfe, 0x12, 0xab); cpu.step(); assertEquals(0x01, bus.read(0xab30)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0xab31)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab32)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/dccf73a6b7cce7d9a9e56064def405dcbf6b3605
f21a0d76e92925d5622b761c460128f505e5078d,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incrementPC(); clearOpTrap(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x05: a |= bus.read(operands[0]); setArithmeticFlags(a); break; case 0x06: j = bus.read(operands[0]); k = asl(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x0d: j = bus.read(address(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x0e: j = bus.read(address(operands[0], operands[1])); k = asl(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x10: break; case 0x11: break; case 0x15: a |= bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0x16: j = bus.read(zpxAddress(operands[0])); k = asl(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x18: clearCarryFlag(); break; case 0x19: j = bus.read(yAddress(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x1d: j = bus.read(xAddress(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x1e: j = bus.read(xAddress(operands[0], operands[1])); k = asl(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(operands[0], operands[1]); break; case 0x21: break; case 0x24: j = bus.read(operands[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x25: j = bus.read(operands[0]); a &= j; setArithmeticFlags(a); break; case 0x26: j = bus.read(operands[0]); k = rol(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x2c: j = bus.read(address(operands[0], operands[1])); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x2d: j = bus.read(address(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x2e: j = bus.read(address(operands[0], operands[1])); k = rol(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x30: break; case 0x31: break; case 0x35: j = bus.read(zpxAddress(operands[0])); a &= j; setArithmeticFlags(a); break; case 0x36: j = bus.read(zpxAddress(operands[0])); k = rol(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x38: setCarryFlag(); break; case 0x39: j = bus.read(yAddress(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x3d: j = bus.read(xAddress(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x3e: j = bus.read(xAddress(operands[0], operands[1])); k = rol(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x41: break; case 0x45: j = bus.read(operands[0]); a ^= j; setArithmeticFlags(a); break; case 0x46: j = bus.read(operands[0]); k = lsr(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x4c: pc = address(operands[0], operands[1]); break; case 0x4d: a ^= bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x4e: j = bus.read(address(operands[0], operands[1])); k = lsr(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x50: break; case 0x51: break; case 0x55: a ^= bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0x56: j = bus.read(zpxAddress(operands[0])); k = lsr(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x58: clearIrqDisableFlag(); break; case 0x59: a ^= bus.read(yAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x5d: a ^= bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x5e: j = bus.read(xAddress(operands[0], operands[1])); k = lsr(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x65: j = bus.read(operands[0]); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x66: j = bus.read(operands[0]); k = ror(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); } else { a = adc(a, operands[0]); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x6c: lo = address(operands[0], operands[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x6d: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x6e: j = bus.read(address(operands[0], operands[1])); k = ror(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x70: break; case 0x71: break; case 0x75: j = bus.read(zpxAddress(operands[0])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x76: j = bus.read(zpxAddress(operands[0])); k = ror(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x78: setIrqDisableFlag(); break; case 0x79: j = bus.read(yAddress(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x7d: j = bus.read(xAddress(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x7e: j = bus.read(xAddress(operands[0], operands[1])); k = ror(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x81: break; case 0x84: bus.write(operands[0], y); setArithmeticFlags(y); break; case 0x85: bus.write(operands[0], a); setArithmeticFlags(a); break; case 0x86: bus.write(operands[0], x); setArithmeticFlags(x); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8c: bus.write(address(operands[0], operands[1]), y); setArithmeticFlags(y); break; case 0x8d: bus.write(address(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0x8e: bus.write(address(operands[0], operands[1]), x); setArithmeticFlags(x); break; case 0x90: break; case 0x91: break; case 0x94: bus.write(zpxAddress(operands[0]), y); setArithmeticFlags(y); break; case 0x95: bus.write(zpxAddress(operands[0]), a); setArithmeticFlags(a); break; case 0x96: bus.write(zpyAddress(operands[0]), x); setArithmeticFlags(x); break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: bus.write(yAddress(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0x9d: bus.write(xAddress(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa4: y = bus.read(operands[0]); setArithmeticFlags(y); break; case 0xa5: a = bus.read(operands[0]); setArithmeticFlags(a); break; case 0xa6: x = bus.read(operands[0]); setArithmeticFlags(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xac: y = bus.read(address(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xad: a = bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xae: x = bus.read(address(operands[0], operands[1])); setArithmeticFlags(x); break; case 0xb0: break; case 0xb1: break; case 0xb4: y = bus.read(zpxAddress(operands[0])); setArithmeticFlags(y); break; case 0xb5: a = bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0xb6: x = bus.read(zpyAddress(operands[0])); setArithmeticFlags(x); break; case 0xb8: clearOverflowFlag(); break; case 0xb9: a = bus.read(yAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbc: y = bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xbd: a = bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xbe: x = bus.read(yAddress(operands[0], operands[1])); setArithmeticFlags(x); break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc4: cmp(y, bus.read(operands[0])); break; case 0xc5: cmp(a, bus.read(operands[0])); break; case 0xc6: j = bus.read(operands[0]); k = --j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcc: cmp(y, bus.read(address(operands[0], operands[1]))); break; case 0xcd: cmp(a, bus.read(address(operands[0], operands[1]))); break; case 0xce: j = bus.read(address(operands[0], operands[1])); k = --j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xd0: break; case 0xd1: break; case 0xd5: cmp(a, bus.read(zpxAddress(operands[0]))); break; case 0xd6: j = bus.read(zpxAddress(operands[0])); k = --j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: cmp(a, bus.read(yAddress(operands[0], operands[1]))); break; case 0xdd: cmp(a, bus.read(xAddress(operands[0], operands[1]))); break; case 0xde: j = bus.read(xAddress(operands[0], operands[1])); k = --j & 0xff; bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe4: cmp(x, bus.read(operands[0])); break; case 0xe5: j = bus.read(operands[0]); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xe6: j = bus.read(operands[0]); k = ++j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); } else { a = sbc(a, operands[0]); } break; case 0xea: break; case 0xec: cmp(x, bus.read(address(operands[0], operands[1]))); break; case 0xed: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xee: j = bus.read(address(operands[0], operands[1])); k = ++j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xf0: break; case 0xf1: break; case 0xf5: j = bus.read(zpxAddress(operands[0])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xf6: j = bus.read(zpxAddress(operands[0])); k = ++j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: j = bus.read(yAddress(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xfd: j = bus.read(xAddress(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xfe: j = bus.read(xAddress(operands[0], operands[1])); k = ++j & 0xff; bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x02: case 0x03: case 0x04: case 0x07: case 0x0b: case 0x0c: case 0x0f: case 0x12: case 0x13: case 0x14: case 0x17: case 0x1a: case 0x1b: case 0x1c: case 0x1f: case 0x22: case 0x23: case 0x27: case 0x2b: case 0x2f: case 0x32: case 0x33: case 0x34: case 0x37: case 0x3a: case 0x3b: case 0x3c: case 0x3f: case 0x42: case 0x43: case 0x44: case 0x47: case 0x4b: case 0x4f: case 0x52: case 0x53: case 0x54: case 0x57: case 0x5a: case 0x5b: case 0x5c: case 0x5f: case 0x62: case 0x63: case 0x64: case 0x67: case 0x6b: case 0x6f: case 0x72: case 0x73: case 0x74: case 0x77: case 0x7a: case 0x7b: case 0x7c: case 0x7f: case 0x80: case 0x82: case 0x83: case 0x87: case 0x89: case 0x8b: case 0x8f: case 0x92: case 0x93: case 0x97: case 0x9b: case 0x9c: case 0x9e: case 0x9f: case 0xa3: case 0xa7: case 0xab: case 0xaf: case 0xb2: case 0xb3: case 0xb7: case 0xbb: case 0xbf: case 0xc2: case 0xc3: case 0xc7: case 0xcb: case 0xcf: case 0xd2: case 0xd3: case 0xd4: case 0xd7: case 0xda: case 0xdb: case 0xdc: case 0xdf: case 0xe2: case 0xe3: case 0xe7: case 0xeb: case 0xef: case 0xf2: case 0xf3: case 0xf4: case 0xf7: case 0xfa: case 0xfb: case 0xfc: case 0xff: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_ORA,"public void test_ORA() { bus.write(0x2c30, 0x00); bus.write(0x2c32, 0x11); bus.write(0x2c34, 0x22); bus.write(0x2c38, 0x44); bus.write(0x2c40, 0x88); cpu.setYRegister(0x30); bus.loadProgram(0x19, 0x00, 0x2c, 0x19, 0x02, 0x2c, 0x19, 0x04, 0x2c, 0x19, 0x08, 0x2c, 0x19, 0x10, 0x2c); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_AND,"public void test_AND() { bus.write(0x1a30, 0x00); bus.write(0x1a31, 0x11); bus.write(0x1a32, 0xff); bus.write(0x1a33, 0x99); bus.write(0x1a34, 0x11); bus.write(0x1a35, 0x0f); bus.write(0x1a02, 0x11); cpu.setYRegister(0x30); bus.loadProgram(0x39, 0x00, 0x1a, 0x39, 0x01, 0x1a, 0xa9, 0xaa, 0x39, 0x02, 0x1a, 0x39, 0x03, 0x1a, 0x39, 0x04, 0x1a, 0xa9, 0xff, 0x39, 0x05, 0x1a, 0xa9, 0x01, 0x39, 0xd2, 0x1a); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_EOR,"public void test_EOR() { bus.write(0xab40, 0x00); bus.write(0xab41, 0xff); bus.write(0xab42, 0x33); bus.write(0xab43, 0x44); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x88, 0x59, 0x10, 0xab, 0x59, 0x11, 0xab, 0x59, 0x12, 0xab, 0x59, 0x13, 0xab); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_ADC,"public void test_ADC() { bus.write(0xab40, 0x01); bus.write(0xab41, 0xff); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() { bus.write(0xab40, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x79, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() { bus.write(0xab40, 0x01); bus.write(0xab41, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x79, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x79, 0x10, 0xab); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x79, 0x10, 0xab); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x79, 0x10, 0xab); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x79, 0x11, 0xab); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x79, 0x11, 0xab); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x79, 0x11, 0xab); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_STA,"public void test_STA() { cpu.setYRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_LDX,"public void test_LDX() { bus.write(0xab45, 0x00); bus.write(0xab46, 0x0f); bus.write(0xab47, 0x80); bus.loadProgram(0xbe, 0x10, 0xab, 0xbe, 0x11, 0xab, 0xbe, 0x12, 0xab); cpu.setYRegister(0x35); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_LDA,"public void test_LDA() { bus.write(0xab42, 0x00); bus.write(0xab43, 0x0f); bus.write(0xab44, 0x80); bus.loadProgram(0xb9, 0x10, 0xab, 0xb9, 0x11, 0xab, 0xb9, 0x12, 0xab); cpu.setYRegister(0x32); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_CMP,"public void test_CMP() { bus.write(0xab40, 0x00); bus.write(0xab41, 0x80); bus.write(0xab42, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xd9, 0x10, 0xab, 0xd9, 0x11, 0xab, 0xd9, 0x12, 0xab); cpu.setYRegister(0x30); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_SBC,"public void test_SBC() { bus.write(0xab40, 0x01); bus.loadProgram(0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() { bus.write(0xab40, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
f21a0d76e92925d5622b761c460128f505e5078d,CpuAbsoluteYModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() { bus.write(0xab40, 0x01); bus.write(0xab50, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xf9, 0x20, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/f21a0d76e92925d5622b761c460128f505e5078d
ed943687bfa41c85ffeac00fff50dd394be8a2bd,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); incrementPC(); clearOpTrap(); int size = Cpu.instructionSizes[ir]; for (int i = 0; i < size-1; i++) { operands[i] = bus.read(pc); incrementPC(); } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x01: break; case 0x05: a |= bus.read(operands[0]); setArithmeticFlags(a); break; case 0x06: j = bus.read(operands[0]); k = asl(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x08: stackPush(getProcessorStatus()); break; case 0x09: a |= operands[0]; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x0d: j = bus.read(address(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x0e: j = bus.read(address(operands[0], operands[1])); k = asl(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(operands[0]); } break; case 0x11: break; case 0x15: a |= bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0x16: j = bus.read(zpxAddress(operands[0])); k = asl(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x18: clearCarryFlag(); break; case 0x19: j = bus.read(yAddress(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x1d: j = bus.read(xAddress(operands[0], operands[1])); a |= j; setArithmeticFlags(a); break; case 0x1e: j = bus.read(xAddress(operands[0], operands[1])); k = asl(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(operands[0], operands[1]); break; case 0x21: break; case 0x24: j = bus.read(operands[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x25: j = bus.read(operands[0]); a &= j; setArithmeticFlags(a); break; case 0x26: j = bus.read(operands[0]); k = rol(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x2c: j = bus.read(address(operands[0], operands[1])); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x2d: j = bus.read(address(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x2e: j = bus.read(address(operands[0], operands[1])); k = rol(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(operands[0]); } break; case 0x31: break; case 0x35: j = bus.read(zpxAddress(operands[0])); a &= j; setArithmeticFlags(a); break; case 0x36: j = bus.read(zpxAddress(operands[0])); k = rol(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x38: setCarryFlag(); break; case 0x39: j = bus.read(yAddress(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x3d: j = bus.read(xAddress(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x3e: j = bus.read(xAddress(operands[0], operands[1])); k = rol(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x41: break; case 0x45: j = bus.read(operands[0]); a ^= j; setArithmeticFlags(a); break; case 0x46: j = bus.read(operands[0]); k = lsr(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x48: stackPush(a); break; case 0x49: a ^= operands[0]; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x4c: pc = address(operands[0], operands[1]); break; case 0x4d: a ^= bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x4e: j = bus.read(address(operands[0], operands[1])); k = lsr(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(operands[0]); } break; case 0x51: break; case 0x55: a ^= bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0x56: j = bus.read(zpxAddress(operands[0])); k = lsr(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x58: clearIrqDisableFlag(); break; case 0x59: a ^= bus.read(yAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x5d: a ^= bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0x5e: j = bus.read(xAddress(operands[0], operands[1])); k = lsr(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x61: break; case 0x65: j = bus.read(operands[0]); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x66: j = bus.read(operands[0]); k = ror(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, operands[0]); } else { a = adc(a, operands[0]); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x6c: lo = address(operands[0], operands[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x6d: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x6e: j = bus.read(address(operands[0], operands[1])); k = ror(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(operands[0]); } break; case 0x71: break; case 0x75: j = bus.read(zpxAddress(operands[0])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x76: j = bus.read(zpxAddress(operands[0])); k = ror(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x78: setIrqDisableFlag(); break; case 0x79: j = bus.read(yAddress(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x7d: j = bus.read(xAddress(operands[0], operands[1])); if (decimalModeFlag) { a = adcDecimal(a, j); } else { a = adc(a, j); } break; case 0x7e: j = bus.read(xAddress(operands[0], operands[1])); k = ror(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x81: break; case 0x84: bus.write(operands[0], y); setArithmeticFlags(y); break; case 0x85: bus.write(operands[0], a); setArithmeticFlags(a); break; case 0x86: bus.write(operands[0], x); setArithmeticFlags(x); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x8c: bus.write(address(operands[0], operands[1]), y); setArithmeticFlags(y); break; case 0x8d: bus.write(address(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0x8e: bus.write(address(operands[0], operands[1]), x); setArithmeticFlags(x); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(operands[0]); } break; case 0x91: break; case 0x94: bus.write(zpxAddress(operands[0]), y); setArithmeticFlags(y); break; case 0x95: bus.write(zpxAddress(operands[0]), a); setArithmeticFlags(a); break; case 0x96: bus.write(zpyAddress(operands[0]), x); setArithmeticFlags(x); break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x99: bus.write(yAddress(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0x9d: bus.write(xAddress(operands[0], operands[1]), a); setArithmeticFlags(a); break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa1: break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa4: y = bus.read(operands[0]); setArithmeticFlags(y); break; case 0xa5: a = bus.read(operands[0]); setArithmeticFlags(a); break; case 0xa6: x = bus.read(operands[0]); setArithmeticFlags(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xa9: a = operands[0]; setArithmeticFlags(a); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xac: y = bus.read(address(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xad: a = bus.read(address(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xae: x = bus.read(address(operands[0], operands[1])); setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(operands[0]); } break; case 0xb1: break; case 0xb4: y = bus.read(zpxAddress(operands[0])); setArithmeticFlags(y); break; case 0xb5: a = bus.read(zpxAddress(operands[0])); setArithmeticFlags(a); break; case 0xb6: x = bus.read(zpyAddress(operands[0])); setArithmeticFlags(x); break; case 0xb8: clearOverflowFlag(); break; case 0xb9: a = bus.read(yAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xbc: y = bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xbd: a = bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(a); break; case 0xbe: x = bus.read(yAddress(operands[0], operands[1])); setArithmeticFlags(x); break; case 0xc0: cmp(y, operands[0]); break; case 0xc1: break; case 0xc4: cmp(y, bus.read(operands[0])); break; case 0xc5: cmp(a, bus.read(operands[0])); break; case 0xc6: j = bus.read(operands[0]); k = --j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xc9: cmp(a, operands[0]); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xcc: cmp(y, bus.read(address(operands[0], operands[1]))); break; case 0xcd: cmp(a, bus.read(address(operands[0], operands[1]))); break; case 0xce: j = bus.read(address(operands[0], operands[1])); k = --j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(operands[0]); } break; case 0xd1: break; case 0xd5: cmp(a, bus.read(zpxAddress(operands[0]))); break; case 0xd6: j = bus.read(zpxAddress(operands[0])); k = --j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xd8: clearDecimalModeFlag(); break; case 0xd9: cmp(a, bus.read(yAddress(operands[0], operands[1]))); break; case 0xdd: cmp(a, bus.read(xAddress(operands[0], operands[1]))); break; case 0xde: j = bus.read(xAddress(operands[0], operands[1])); k = --j & 0xff; bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xe0: cmp(x, operands[0]); break; case 0xe1: break; case 0xe4: cmp(x, bus.read(operands[0])); break; case 0xe5: j = bus.read(operands[0]); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xe6: j = bus.read(operands[0]); k = ++j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, operands[0]); } else { a = sbc(a, operands[0]); } break; case 0xea: break; case 0xec: cmp(x, bus.read(address(operands[0], operands[1]))); break; case 0xed: j = bus.read(address(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xee: j = bus.read(address(operands[0], operands[1])); k = ++j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xf0: if (getZeroFlag()) { pc = relAddress(operands[0]); } break; case 0xf1: break; case 0xf5: j = bus.read(zpxAddress(operands[0])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xf6: j = bus.read(zpxAddress(operands[0])); k = ++j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xf8: setDecimalModeFlag(); break; case 0xf9: j = bus.read(yAddress(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xfd: j = bus.read(xAddress(operands[0], operands[1])); if (decimalModeFlag) { a = sbcDecimal(a, j); } else { a = sbc(a, j); } break; case 0xfe: j = bus.read(xAddress(operands[0], operands[1])); k = ++j & 0xff; bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x02: case 0x03: case 0x04: case 0x07: case 0x0b: case 0x0c: case 0x0f: case 0x12: case 0x13: case 0x14: case 0x17: case 0x1a: case 0x1b: case 0x1c: case 0x1f: case 0x22: case 0x23: case 0x27: case 0x2b: case 0x2f: case 0x32: case 0x33: case 0x34: case 0x37: case 0x3a: case 0x3b: case 0x3c: case 0x3f: case 0x42: case 0x43: case 0x44: case 0x47: case 0x4b: case 0x4f: case 0x52: case 0x53: case 0x54: case 0x57: case 0x5a: case 0x5b: case 0x5c: case 0x5f: case 0x62: case 0x63: case 0x64: case 0x67: case 0x6b: case 0x6f: case 0x72: case 0x73: case 0x74: case 0x77: case 0x7a: case 0x7b: case 0x7c: case 0x7f: case 0x80: case 0x82: case 0x83: case 0x87: case 0x89: case 0x8b: case 0x8f: case 0x92: case 0x93: case 0x97: case 0x9b: case 0x9c: case 0x9e: case 0x9f: case 0xa3: case 0xa7: case 0xab: case 0xaf: case 0xb2: case 0xb3: case 0xb7: case 0xbb: case 0xbf: case 0xc2: case 0xc3: case 0xc7: case 0xcb: case 0xcf: case 0xd2: case 0xd3: case 0xd4: case 0xd7: case 0xda: case 0xdb: case 0xdc: case 0xdf: case 0xe2: case 0xe3: case 0xe7: case 0xeb: case 0xef: case 0xf2: case 0xf3: case 0xf4: case 0xf7: case 0xfa: case 0xfb: case 0xfc: case 0xff: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
ed943687bfa41c85ffeac00fff50dd394be8a2bd,Cpu.java,relAddress,int relAddress(int offset) { return (pc + (byte)offset) & 0xffff; },https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
ed943687bfa41c85ffeac00fff50dd394be8a2bd,CpuRelativeModeTest.java,test_BPL,"public void test_BPL() { bus.loadProgram(0x10, 0x05); cpu.setNegativeFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x10, 0x05); cpu.clearNegativeFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x10, 0xfb); cpu.setNegativeFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x10, 0xfb); cpu.clearNegativeFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
ed943687bfa41c85ffeac00fff50dd394be8a2bd,CpuRelativeModeTest.java,test_BMI,"public void test_BMI() { bus.loadProgram(0x30, 0x05); cpu.setNegativeFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x30, 0x05); cpu.clearNegativeFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x30, 0xfb); cpu.setNegativeFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x30, 0xfb); cpu.clearNegativeFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
ed943687bfa41c85ffeac00fff50dd394be8a2bd,CpuRelativeModeTest.java,test_BVC,"public void test_BVC() { bus.loadProgram(0x50, 0x05); cpu.setOverflowFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x50, 0x05); cpu.clearOverflowFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x50, 0xfb); cpu.setOverflowFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x50, 0xfb); cpu.clearOverflowFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
ed943687bfa41c85ffeac00fff50dd394be8a2bd,CpuRelativeModeTest.java,test_BVS,"public void test_BVS() { bus.loadProgram(0x70, 0x05); cpu.setOverflowFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x70, 0x05); cpu.clearOverflowFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x70, 0xfb); cpu.setOverflowFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x70, 0xfb); cpu.clearOverflowFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
ed943687bfa41c85ffeac00fff50dd394be8a2bd,CpuRelativeModeTest.java,test_BCC,"public void test_BCC() { bus.loadProgram(0x90, 0x05); cpu.setCarryFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x90, 0x05); cpu.clearCarryFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x90, 0xfb); cpu.setCarryFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x90, 0xfb); cpu.clearCarryFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
ed943687bfa41c85ffeac00fff50dd394be8a2bd,CpuRelativeModeTest.java,test_BCS,"public void test_BCS() { bus.loadProgram(0xb0, 0x05); cpu.setCarryFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xb0, 0x05); cpu.clearCarryFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xb0, 0xfb); cpu.setCarryFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xb0, 0xfb); cpu.clearCarryFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
ed943687bfa41c85ffeac00fff50dd394be8a2bd,CpuRelativeModeTest.java,test_BNE,"public void test_BNE() { bus.loadProgram(0xd0, 0x05); cpu.setZeroFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xd0, 0x05); cpu.clearZeroFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xd0, 0xfb); cpu.setZeroFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xd0, 0xfb); cpu.clearZeroFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
ed943687bfa41c85ffeac00fff50dd394be8a2bd,CpuRelativeModeTest.java,test_BEQ,"public void test_BEQ() { bus.loadProgram(0xf0, 0x05); cpu.setZeroFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xf0, 0x05); cpu.clearZeroFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xf0, 0xfb); cpu.setZeroFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xf0, 0xfb); cpu.clearZeroFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ed943687bfa41c85ffeac00fff50dd394be8a2bd
a01090a16e17b348a0c84cd0c2b21b3059f8ca91,Cpu.java,step,"public void step() { addr = pc; ir = bus.read(pc); irOpCode = (ir >> 5) & 0x07; irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize-1; i++) { operands[i] = bus.read(pc); incrementPC(); } effectiveAddress = 0xffffff; effectiveData = -1; switch(irOpMode) { case 0: break; case 1: switch(irAddressMode) { case 0: effectiveAddress = bus.read(zpxAddress(operands[0])); effectiveData = bus.read(effectiveAddress); break; case 1: effectiveAddress = operands[0]; effectiveData = bus.read(effectiveAddress); break; case 2: effectiveAddress = -1; effectiveData = operands[0]; break; case 3: effectiveAddress = address(operands[0], operands[1]); effectiveData = bus.read(effectiveAddress); break; case 4: effectiveAddress = yAddress(bus.read(operands[0]), getYRegister()); effectiveData = bus.read(effectiveAddress); break; case 5: effectiveAddress = zpxAddress(operands[0]); effectiveData = bus.read(effectiveAddress); break; case 6: effectiveAddress = yAddress(operands[0], operands[1]); effectiveData = bus.read(effectiveAddress); break; case 7: effectiveAddress = xAddress(operands[0], operands[1]); effectiveData = bus.read(effectiveAddress); break; } break; case 2: switch(irAddressMode) { case 0: efectiveAddress = -1; effectiveData = operands[0]; break; case 1: effectiveAddress = operands[0]; effectiveData = bus.read(effectiveeAddress); break; case 2: break; case 3: effectiveAddress = address(operands[0], operands[1]); effectiveData = bus.read(effectiveAddress); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(operands[0]); } else { effectiveAddress = zpxAddress(operands[0]); } effectiveData = bus.read(effectiveAddress); case 7: break; } break; case 3: break; } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(operands[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(operands[0], operands[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(operands[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(operands[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(operands[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(operands[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(operands[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(operands[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(operands[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(operands[0], operands[1]); break; case 0x6c: lo = address(operands[0], operands[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x01: case 0x05: case 0x09: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= effectiveData; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: j = bus.read(operands[0]); k = asl(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x0e: j = bus.read(address(operands[0], operands[1])); k = asl(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x16: j = bus.read(zpxAddress(operands[0])); k = asl(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x1e: j = bus.read(xAddress(operands[0], operands[1])); k = asl(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x24: j = bus.read(operands[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x2c: j = bus.read(address(operands[0], operands[1])); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x21: break; case 0x25: j = bus.read(operands[0]); a &= j; setArithmeticFlags(a); break; case 0x29: a &= operands[0]; setArithmeticFlags(a); break; case 0x2d: j = bus.read(address(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x31: break; case 0x35: j = bus.read(zpxAddress(operands[0])); a &= j; setArithmeticFlags(a); break; case 0x39: j = bus.read(yAddress(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x3d: j = bus.read(xAddress(operands[0], operands[1])); a &= j; setArithmeticFlags(a); break; case 0x26: j = bus.read(operands[0]); k = rol(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x2e: j = bus.read(address(operands[0], operands[1])); k = rol(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x36: j = bus.read(zpxAddress(operands[0])); k = rol(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x3e: j = bus.read(xAddress(operands[0], operands[1])); k = rol(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x41: case 0x45: case 0x49: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= effectiveData; setArithmeticFlags(a); break; case 0x46: k = lsr(bus.read(operands[0])); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x4e: k = lsr(bus.read(address(operands[0], operands[1]))); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x56: k = lsr(bus.read(zpxAddress(operands[0]))); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x5e: k = lsr(bus.read(xAddress(operands[0], operands[1]))); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x61: case 0x65: case 0x69: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, effectiveData); } else { a = adc(a, effectiveData); } break; case 0x66: j = bus.read(operands[0]); k = ror(j); bus.write(operands[0], k); setArithmeticFlags(k); break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x6e: j = bus.read(address(operands[0], operands[1])); k = ror(j); bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x76: j = bus.read(zpxAddress(operands[0])); k = ror(j); bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0x7e: j = bus.read(xAddress(operands[0], operands[1])); k = ror(j); bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); setArithmeticFlags(a); break; case 0x84: bus.write(operands[0], y); setArithmeticFlags(y); break; case 0x8c: bus.write(address(operands[0], operands[1]), y); setArithmeticFlags(y); break; case 0x94: bus.write(zpxAddress(operands[0]), y); setArithmeticFlags(y); break; case 0x86: bus.write(operands[0], x); setArithmeticFlags(x); break; case 0x8e: bus.write(address(operands[0], operands[1]), x); setArithmeticFlags(x); break; case 0x96: bus.write(zpyAddress(operands[0]), x); setArithmeticFlags(x); break; case 0xa0: y = operands[0]; setArithmeticFlags(y); break; case 0xa4: y = bus.read(operands[0]); setArithmeticFlags(y); break; case 0xac: y = bus.read(address(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xb4: y = bus.read(zpxAddress(operands[0])); setArithmeticFlags(y); break; case 0xbc: y = bus.read(xAddress(operands[0], operands[1])); setArithmeticFlags(y); break; case 0xa2: x = operands[0]; setArithmeticFlags(x); break; case 0xa6: x = bus.read(operands[0]); setArithmeticFlags(x); break; case 0xae: x = bus.read(address(operands[0], operands[1])); setArithmeticFlags(x); break; case 0xb6: x = bus.read(zpyAddress(operands[0])); setArithmeticFlags(x); break; case 0xbe: x = bus.read(yAddress(operands[0], operands[1])); setArithmeticFlags(x); break; case 0xa1: case 0xa5: case 0xa9: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = effectiveData; setArithmeticFlags(a); break; case 0xc0: cmp(y, operands[0]); break; case 0xc4: cmp(y, bus.read(operands[0])); break; case 0xcc: cmp(y, bus.read(address(operands[0], operands[1]))); break; case 0xc1: case 0xc5: case 0xc9: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, effectiveData); break; case 0xc6: j = bus.read(operands[0]); k = --j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xce: j = bus.read(address(operands[0], operands[1])); k = --j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xd6: j = bus.read(zpxAddress(operands[0])); k = --j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xde: j = bus.read(xAddress(operands[0], operands[1])); k = --j & 0xff; bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xe0: cmp(x, operands[0]); break; case 0xe4: cmp(x, bus.read(operands[0])); break; case 0xec: cmp(x, bus.read(address(operands[0], operands[1]))); break; case 0xe1: case 0xe5: case 0xe9: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, effectiveData); } else { a = sbc(a, effectiveData); } break; case 0xe6: j = bus.read(operands[0]); k = ++j & 0xff; bus.write(operands[0], k); setArithmeticFlags(k); break; case 0xee: j = bus.read(address(operands[0], operands[1])); k = ++j & 0xff; bus.write(address(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0xf6: j = bus.read(zpxAddress(operands[0])); k = ++j & 0xff; bus.write(zpxAddress(operands[0]), k); setArithmeticFlags(k); break; case 0xfe: j = bus.read(xAddress(operands[0], operands[1])); k = ++j & 0xff; bus.write(xAddress(operands[0], operands[1]), k); setArithmeticFlags(k); break; case 0x02: case 0x03: case 0x04: case 0x07: case 0x0b: case 0x0c: case 0x0f: case 0x12: case 0x13: case 0x14: case 0x17: case 0x1a: case 0x1b: case 0x1c: case 0x1f: case 0x22: case 0x23: case 0x27: case 0x2b: case 0x2f: case 0x32: case 0x33: case 0x34: case 0x37: case 0x3a: case 0x3b: case 0x3c: case 0x3f: case 0x42: case 0x43: case 0x44: case 0x47: case 0x4b: case 0x4f: case 0x52: case 0x53: case 0x54: case 0x57: case 0x5a: case 0x5b: case 0x5c: case 0x5f: case 0x62: case 0x63: case 0x64: case 0x67: case 0x6b: case 0x6f: case 0x72: case 0x73: case 0x74: case 0x77: case 0x7a: case 0x7b: case 0x7c: case 0x7f: case 0x80: case 0x82: case 0x83: case 0x87: case 0x89: case 0x8b: case 0x8f: case 0x92: case 0x93: case 0x97: case 0x9b: case 0x9c: case 0x9e: case 0x9f: case 0xa3: case 0xa7: case 0xab: case 0xaf: case 0xb2: case 0xb3: case 0xb7: case 0xbb: case 0xbf: case 0xc2: case 0xc3: case 0xc7: case 0xcb: case 0xcf: case 0xd2: case 0xd3: case 0xd4: case 0xd7: case 0xda: case 0xdb: case 0xdc: case 0xdf: case 0xe2: case 0xe3: case 0xe7: case 0xeb: case 0xef: case 0xf2: case 0xf3: case 0xf4: case 0xf7: case 0xfa: case 0xfb: case 0xfc: case 0xff: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/a01090a16e17b348a0c84cd0c2b21b3059f8ca91
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Bus.java,read,"public int read(int address) throws MemoryAccessException { for (Device d : devices) { MemoryRange range = d.getMemoryRange(); if (range.includes(address)) { int devAddr = address - range.startAddress(); return d.read(devAddr); } } throw new RuntimeException(""Read failed! Device not found.""); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Bus.java,write,"public void write(int address, int value) throws MemoryAccessException { for (Device d : devices) { MemoryRange range = d.getMemoryRange(); if (range.includes(address)) { int devAddr = address - range.startAddress(); d.write(devAddr, value); return; } } throw new RuntimeException(""Write failed! Device not found.""); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Bus.java,loadProgram,"public void loadProgram(int... program) throws MemoryAccessException { int address = getCpu().getProgramCounter(); int i = 0; for (int d : program) { write(address + i++, d); } }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CommandParser.java,setSimulator,public void setSimulator(Simulator sim) { this.simulator = sim; },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CommandParser.java,getSimulator,public Simulator getSimulator() { return this.simulator; },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Cpu.java,reset,"public void reset() throws MemoryAccessException { sp = 0xff; pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); ir = 0; carryFlag = false; irqDisableFlag = false; decimalModeFlag = false; breakFlag = false; overflowFlag = false; opTrap = false; }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Cpu.java,step,public void step(int num) throws MemoryAccessException { for (int i = 0; i < num; i++) { step(); } },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Cpu.java,step,"public void step() throws MemoryAccessException { addr = pc; ir = bus.read(pc); irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize-1; i++) { args[i] = bus.read(pc); incrementPC(); } effectiveAddress = 0xffffff; effectiveData = -1; switch(irOpMode) { case 0: break; case 1: switch(irAddressMode) { case 0: effectiveAddress = bus.read(zpxAddress(args[0])); effectiveData = bus.read(effectiveAddress); break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: effectiveAddress = -1; effectiveData = args[0]; break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 4: effectiveAddress = yAddress(bus.read(args[0]), getYRegister()); effectiveData = bus.read(effectiveAddress); break; case 5: effectiveAddress = zpxAddress(args[0]); effectiveData = bus.read(effectiveAddress); break; case 6: effectiveAddress = yAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 7: effectiveAddress = xAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; } break; case 2: switch(irAddressMode) { case 0: effectiveAddress = -1; effectiveData = args[0]; break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(args[0]); } else { effectiveAddress = zpxAddress(args[0]); } effectiveData = bus.read(effectiveAddress); case 7: break; } break; case 3: break; } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(args[0], args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(args[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(args[0], args[1]); break; case 0x6c: lo = address(args[0], args[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x01: case 0x05: case 0x09: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= effectiveData; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: j = bus.read(args[0]); k = asl(j); bus.write(args[0], k); setArithmeticFlags(k); break; case 0x0e: j = bus.read(address(args[0], args[1])); k = asl(j); bus.write(address(args[0], args[1]), k); setArithmeticFlags(k); break; case 0x16: j = bus.read(zpxAddress(args[0])); k = asl(j); bus.write(zpxAddress(args[0]), k); setArithmeticFlags(k); break; case 0x1e: j = bus.read(xAddress(args[0], args[1])); k = asl(j); bus.write(xAddress(args[0], args[1]), k); setArithmeticFlags(k); break; case 0x24: j = bus.read(args[0]); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x2c: j = bus.read(address(args[0], args[1])); k = a & j; setZeroFlag(k == 0); setNegativeFlag((k & 0x80) != 0); setOverflowFlag((k & 0x40) != 0); break; case 0x21: break; case 0x25: j = bus.read(args[0]); a &= j; setArithmeticFlags(a); break; case 0x29: a &= args[0]; setArithmeticFlags(a); break; case 0x2d: j = bus.read(address(args[0], args[1])); a &= j; setArithmeticFlags(a); break; case 0x31: break; case 0x35: j = bus.read(zpxAddress(args[0])); a &= j; setArithmeticFlags(a); break; case 0x39: j = bus.read(yAddress(args[0], args[1])); a &= j; setArithmeticFlags(a); break; case 0x3d: j = bus.read(xAddress(args[0], args[1])); a &= j; setArithmeticFlags(a); break; case 0x26: j = bus.read(args[0]); k = rol(j); bus.write(args[0], k); setArithmeticFlags(k); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x2e: j = bus.read(address(args[0], args[1])); k = rol(j); bus.write(address(args[0], args[1]), k); setArithmeticFlags(k); break; case 0x36: j = bus.read(zpxAddress(args[0])); k = rol(j); bus.write(zpxAddress(args[0]), k); setArithmeticFlags(k); break; case 0x3e: j = bus.read(xAddress(args[0], args[1])); k = rol(j); bus.write(xAddress(args[0], args[1]), k); setArithmeticFlags(k); break; case 0x41: case 0x45: case 0x49: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= effectiveData; setArithmeticFlags(a); break; case 0x46: k = lsr(bus.read(args[0])); bus.write(args[0], k); setArithmeticFlags(k); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x4e: k = lsr(bus.read(address(args[0], args[1]))); bus.write(address(args[0], args[1]), k); setArithmeticFlags(k); break; case 0x56: k = lsr(bus.read(zpxAddress(args[0]))); bus.write(zpxAddress(args[0]), k); setArithmeticFlags(k); break; case 0x5e: k = lsr(bus.read(xAddress(args[0], args[1]))); bus.write(xAddress(args[0], args[1]), k); setArithmeticFlags(k); break; case 0x61: case 0x65: case 0x69: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, effectiveData); } else { a = adc(a, effectiveData); } break; case 0x66: j = bus.read(args[0]); k = ror(j); bus.write(args[0], k); setArithmeticFlags(k); break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x6e: j = bus.read(address(args[0], args[1])); k = ror(j); bus.write(address(args[0], args[1]), k); setArithmeticFlags(k); break; case 0x76: j = bus.read(zpxAddress(args[0])); k = ror(j); bus.write(zpxAddress(args[0]), k); setArithmeticFlags(k); break; case 0x7e: j = bus.read(xAddress(args[0], args[1])); k = ror(j); bus.write(xAddress(args[0], args[1]), k); setArithmeticFlags(k); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); setArithmeticFlags(a); break; case 0x84: bus.write(args[0], y); setArithmeticFlags(y); break; case 0x8c: bus.write(address(args[0], args[1]), y); setArithmeticFlags(y); break; case 0x94: bus.write(zpxAddress(args[0]), y); setArithmeticFlags(y); break; case 0x86: bus.write(args[0], x); setArithmeticFlags(x); break; case 0x8e: bus.write(address(args[0], args[1]), x); setArithmeticFlags(x); break; case 0x96: bus.write(zpyAddress(args[0]), x); setArithmeticFlags(x); break; case 0xa0: y = args[0]; setArithmeticFlags(y); break; case 0xa4: y = bus.read(args[0]); setArithmeticFlags(y); break; case 0xac: y = bus.read(address(args[0], args[1])); setArithmeticFlags(y); break; case 0xb4: y = bus.read(zpxAddress(args[0])); setArithmeticFlags(y); break; case 0xbc: y = bus.read(xAddress(args[0], args[1])); setArithmeticFlags(y); break; case 0xa2: x = args[0]; setArithmeticFlags(x); break; case 0xa6: x = bus.read(args[0]); setArithmeticFlags(x); break; case 0xae: x = bus.read(address(args[0], args[1])); setArithmeticFlags(x); break; case 0xb6: x = bus.read(zpyAddress(args[0])); setArithmeticFlags(x); break; case 0xbe: x = bus.read(yAddress(args[0], args[1])); setArithmeticFlags(x); break; case 0xa1: case 0xa5: case 0xa9: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = effectiveData; setArithmeticFlags(a); break; case 0xc0: cmp(y, args[0]); break; case 0xc4: cmp(y, bus.read(args[0])); break; case 0xcc: cmp(y, bus.read(address(args[0], args[1]))); break; case 0xc1: case 0xc5: case 0xc9: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, effectiveData); break; case 0xc6: j = bus.read(args[0]); k = --j & 0xff; bus.write(args[0], k); setArithmeticFlags(k); break; case 0xce: j = bus.read(address(args[0], args[1])); k = --j & 0xff; bus.write(address(args[0], args[1]), k); setArithmeticFlags(k); break; case 0xd6: j = bus.read(zpxAddress(args[0])); k = --j & 0xff; bus.write(zpxAddress(args[0]), k); setArithmeticFlags(k); break; case 0xde: j = bus.read(xAddress(args[0], args[1])); k = --j & 0xff; bus.write(xAddress(args[0], args[1]), k); setArithmeticFlags(k); break; case 0xe0: cmp(x, args[0]); break; case 0xe4: cmp(x, bus.read(args[0])); break; case 0xec: cmp(x, bus.read(address(args[0], args[1]))); break; case 0xe1: case 0xe5: case 0xe9: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, effectiveData); } else { a = sbc(a, effectiveData); } break; case 0xe6: j = bus.read(args[0]); k = ++j & 0xff; bus.write(args[0], k); setArithmeticFlags(k); break; case 0xee: j = bus.read(address(args[0], args[1])); k = ++j & 0xff; bus.write(address(args[0], args[1]), k); setArithmeticFlags(k); break; case 0xf6: j = bus.read(zpxAddress(args[0])); k = ++j & 0xff; bus.write(zpxAddress(args[0]), k); setArithmeticFlags(k); break; case 0xfe: j = bus.read(xAddress(args[0], args[1])); k = ++j & 0xff; bus.write(xAddress(args[0], args[1]), k); setArithmeticFlags(k); break; case 0x02: case 0x03: case 0x04: case 0x07: case 0x0b: case 0x0c: case 0x0f: case 0x12: case 0x13: case 0x14: case 0x17: case 0x1a: case 0x1b: case 0x1c: case 0x1f: case 0x22: case 0x23: case 0x27: case 0x2b: case 0x2f: case 0x32: case 0x33: case 0x34: case 0x37: case 0x3a: case 0x3b: case 0x3c: case 0x3f: case 0x42: case 0x43: case 0x44: case 0x47: case 0x4b: case 0x4f: case 0x52: case 0x53: case 0x54: case 0x57: case 0x5a: case 0x5b: case 0x5c: case 0x5f: case 0x62: case 0x63: case 0x64: case 0x67: case 0x6b: case 0x6f: case 0x72: case 0x73: case 0x74: case 0x77: case 0x7a: case 0x7b: case 0x7c: case 0x7f: case 0x80: case 0x82: case 0x83: case 0x87: case 0x89: case 0x8b: case 0x8f: case 0x92: case 0x93: case 0x97: case 0x9b: case 0x9c: case 0x9e: case 0x9f: case 0xa3: case 0xa7: case 0xab: case 0xaf: case 0xb2: case 0xb3: case 0xb7: case 0xbb: case 0xbf: case 0xc2: case 0xc3: case 0xc7: case 0xcb: case 0xcf: case 0xd2: case 0xd3: case 0xd4: case 0xd7: case 0xda: case 0xdb: case 0xdc: case 0xdf: case 0xe2: case 0xe3: case 0xe7: case 0xeb: case 0xef: case 0xf2: case 0xf3: case 0xf4: case 0xf7: case 0xfa: case 0xfb: case 0xfc: case 0xff: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Cpu.java,toString,"public String toString() { String opcode = opcode(ir, args[0], args[1]); StringBuffer sb = new StringBuffer(String.format(""$%04X"", addr) + "" ""); sb.append(String.format(""%-14s"", opcode)); sb.append(""A="" + String.format(""$%02X"", a) + "" ""); sb.append(""X="" + String.format(""$%02X"", x) + "" ""); sb.append(""Y="" + String.format(""$%02X"", y) + "" ""); sb.append(""PC="" + String.format(""$%04X"", pc)+ "" ""); sb.append(""P="" + statusRegisterString()); return sb.toString(); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Cpu.java,stackPush,"void stackPush(int data) throws MemoryAccessException { bus.write(0x100+sp, data); if (sp == 0) sp = 0xff; else --sp; }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Cpu.java,stackPop,int stackPop() throws MemoryAccessException { if (sp == 0xff) sp = 0x00; else ++sp; int data = bus.read(0x100+sp); return data; },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Cpu.java,stackPeek,int stackPeek() throws MemoryAccessException { return bus.read(0x100+sp+1); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Profiler.java,main,public static void main(String[] args) throws MemoryAccessException { new Profiler().profileProgram(); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Profiler.java,profileProgram,"public void profileProgram() throws MemoryAccessException { Bus bus = new Bus(0, 65535); Cpu cpu = new Cpu(); bus.addCpu(cpu); try { bus.addDevice(new Memory(0x0000, 0x10000)); } catch (MemoryRangeException ex) { System.err.println(""Memory Range Exception! "" + ex.getMessage()); return; } bus.write(0xfffc, 0x00); bus.write(0xfffd, 0x03); bus.write(0x0300, 0xa9); bus.write(0x0301, 0xff); bus.write(0x0302, 0xea); bus.write(0x0303, 0xea); bus.write(0x0304, 0xa0); bus.write(0x0305, 0x1a); bus.write(0x0306, 0xea); bus.write(0x0307, 0xea); bus.write(0x0308, 0xa2); bus.write(0x0309, 0x03); bus.write(0x030a, 0xa9); bus.write(0x030b, 0x00); bus.write(0x030c, 0xa2); bus.write(0x030d, 0x00); bus.write(0x030e, 0xa0); bus.write(0x030f, 0x00); bus.write(0x0310, 0x4c); bus.write(0x0311, 0x00); bus.write(0x0312, 0x03); long sum = 0; long iters = 1000; long steps = 100000; for (int i = 0; i < iters; i++) { long startTime = System.nanoTime(); cpu.reset(); for (int j = 0; j < steps; j++) { cpu.step(); } long endTime = System.nanoTime(); long diff = endTime - startTime; sum += diff; } long totalSteps = steps * iters; long avgStep = sum / totalSteps; System.out.println(""Total instructions executed: "" + String.format(""%,d"", totalSteps)); System.out.println(""Total time taken: "" + String.format(""%,d us"", sum / 1000)); System.out.println(""Average time per step: "" + avgStep + "" ns ""); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Profiler.java,profileMemoryReads,"public void profileMemoryReads() throws MemoryAccessException { Bus b = new Bus(0, 65535); try { b.addDevice(new Memory(0x0000, 0x2000)); b.addDevice(new Memory(0x2000, 0x2000)); b.addDevice(new Memory(0x4000, 0x2000)); b.addDevice(new Memory(0x6000, 0x2000)); b.addDevice(new Memory(0x8000, 0x2000)); b.addDevice(new Memory(0xa000, 0x2000)); b.addDevice(new Memory(0xc000, 0x2000)); b.addDevice(new Memory(0xe000, 0x2000)); } catch (MemoryRangeException ex) { System.err.println(""Memory Range Exception! "" + ex.getMessage()); return; } long sum = 0; long average = 0; long iters = 500; for (int i = 0; i < iters; i++) { long startTime = System.nanoTime(); int buf = 0; for (int j = 0; j < 0xffff; j++) { buf = b.read(j); if (buf != 0xff) { System.out.println(""WARNING! MEMORY SHOULD HAVE "" + ""BEEN $FF, WAS: "" + buf); System.exit(0); } } long endTime = System.nanoTime(); long diff = endTime - startTime; sum += diff; average = sum / (i + 1); } System.out.println(""Average time to read 64KB: "" + average + "" ns ("" + (average / 1000) + "" us)""); System.out.println(""Average time to read one byte: "" + sum / (64 * 1024 * iters) + "" ns""); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Simulator.java,loadProgram,"public void loadProgram(int address, int[] program) throws MemoryAccessException { int hi = (address&0xff00)>>>8; int lo = address&0x00ff; bus.write(0xfffc, lo); bus.write(0xfffd, hi); int i = 0; for (int d : program) { bus.write(address + i++, d); } }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Simulator.java,runTest,"public void runTest() throws MemoryAccessException { int[] program = { 0xa9, 0xff, 0xa0, 0x1a, 0xa2, 0x90, 0xa2, 0x02, 0x49, 0xff, 0xa9, 0x00, 0xa2, 0x00, 0x29, 0xff, 0xa0, 0x00, 0x4c, 0x00, 0x03 }; loadProgram(0x0300, program); cpu.reset(); int steps = program.length; for (int i = 0; i <= steps; i++) { cpu.step(); System.out.println(cpu.toString()); } }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Simulator.java,main,"public static void main(String[] args) throws MemoryAccessException { try { new Simulator().runTest(); } catch (MemoryRangeException ex) { System.err.println(""Error: "" + ex.toString()); } }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Device.java,write,"public abstract void write(int address, int data) throws MemoryAccessException;",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Device.java,read,public abstract int read(int address) throws MemoryAccessException;,https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Device.java,getBus,public Bus getBus() { return this.bus; },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Memory.java,write,"public void write(int address, int data) throws MemoryAccessException { if (readOnly) { throw new MemoryAccessException(""Cannot write to read-only memory at address "" + address); } else { this.mem[address] = data; } }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,Memory.java,read,public int read(int address) throws MemoryAccessException { return this.mem[address]; },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_ORA,"public void test_ORA() throws MemoryAccessException { bus.write(0x7f00, 0x00); bus.write(0x7f02, 0x11); bus.write(0x3504, 0x22); bus.write(0x3508, 0x44); bus.write(0x1210, 0x88); bus.loadProgram(0x0d, 0x00, 0x7f, 0x0d, 0x02, 0x7f, 0x0d, 0x04, 0x35, 0x0d, 0x08, 0x35, 0x0d, 0x10, 0x12); extracted(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.write(0x7f00, 0x00); bus.write(0x7f01, 0x01); bus.write(0x3502, 0x02); bus.write(0x3503, 0x44); bus.write(0x1204, 0x80); bus.loadProgram(0x0e, 0x00, 0x7f, 0x0e, 0x01, 0x7f, 0x0e, 0x02, 0x35, 0x0e, 0x03, 0x35, 0x0e, 0x04, 0x12); extracted(); assertEquals(0x00, bus.read(0x7f00)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x02, bus.read(0x7f01)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x04, bus.read(0x3502)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x88, bus.read(0x3503)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x00, bus.read(0x1204)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_JSR,"public void test_JSR() throws MemoryAccessException { bus.loadProgram(0xea, 0xea, 0x20, 0x00, 0x34); cpu.step(3); assertEquals(0x3400, cpu.getProgramCounter()); assertEquals(0x02, bus.read(0x1ff)); assertEquals(0x04, bus.read(0x1fe)); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_BIT,"public void test_BIT() throws MemoryAccessException { bus.write(0x1200, 0xc0); bus.loadProgram(0xa9, 0x01, 0x2c, 0x00, 0x12, 0xa9, 0x0f, 0x2c, 0x00, 0x12, 0xa9, 0x40, 0x2c, 0x00, 0x12, 0xa9, 0x80, 0x2c, 0x00, 0x12, 0xa9, 0xc0, 0x2c, 0x00, 0x12, 0xa9, 0xff, 0x2c, 0x00, 0x12); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_AND,"public void test_AND() throws MemoryAccessException { bus.write(0x1200, 0x00); bus.write(0x1201, 0x11); bus.write(0x1202, 0xff); bus.write(0x1203, 0x99); bus.write(0x1204, 0x11); bus.write(0x1205, 0x0f); bus.loadProgram(0x2d, 0x00, 0x12, 0x2d, 0x01, 0x12, 0xa9, 0xaa, 0x2d, 0x02, 0x12, 0x2d, 0x03, 0x12, 0x2d, 0x04, 0x12, 0xa9, 0xff, 0x2d, 0x05, 0x12); extracted(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); extracted(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); extracted(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.write(0x1200, 0x00); bus.write(0x1201, 0x01); bus.loadProgram(0x2e, 0x00, 0x12, 0x2e, 0x01, 0x12, 0x38, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12); extracted(); assertEquals(0x00, bus.read(0x1200)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x02, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x0a, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x14, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x28, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x50, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0xa0, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x40, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); extracted(); assertEquals(0x81, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_JMP,"public void test_JMP() throws MemoryAccessException { bus.loadProgram(0x4c, 0x00, 0x34); extracted(); assertEquals(0x3400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,extracted,private void extracted() throws MemoryAccessException { cpu.step(); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_EOR,"public void test_EOR() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0xff); bus.write(0x1212, 0x33); bus.write(0x1213, 0x44); bus.loadProgram(0xa9, 0x88, 0x4d, 0x10, 0x12, 0x4d, 0x11, 0x12, 0x4d, 0x12, 0x12, 0x4d, 0x13, 0x12); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); extracted(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); extracted(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); extracted(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.write(0x1200, 0x00); bus.write(0x1201, 0x01); bus.write(0x1202, 0x02); bus.write(0x1203, 0x44); bus.write(0x1204, 0x80); bus.write(0x1205, 0x02); bus.loadProgram(0x4e, 0x00, 0x12, 0x4e, 0x01, 0x12, 0x4e, 0x02, 0x12, 0x4e, 0x03, 0x12, 0x4e, 0x04, 0x12, 0x38, 0x4e, 0x05, 0x12); extracted(); assertEquals(0x00, bus.read(0x1200)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x00, bus.read(0x1201)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); extracted(); assertEquals(0x01, bus.read(0x1202)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x22, bus.read(0x1203)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x40, bus.read(0x1204)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x1205)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_ADC,"public void test_ADC() throws MemoryAccessException { bus.write(0x1210, 0x01); bus.write(0x1211, 0xff); bus.loadProgram(0xa9, 0x00, 0x6d, 0x10, 0x12); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x6d, 0x10, 0x12); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x6d, 0x10, 0x12); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x6d, 0x10, 0x12); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x6d, 0x11, 0x12); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x6d, 0x11, 0x12); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x6d, 0x11, 0x12); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x6d, 0x11, 0x12); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() throws MemoryAccessException { bus.write(0x1210, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() throws MemoryAccessException { bus.write(0x1210, 0x01); bus.write(0x1211, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x6d, 0x10, 0x12); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x6d, 0x11, 0x12); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x6d, 0x11, 0x12); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x6d, 0x11, 0x12); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x10); bus.loadProgram(0x6e, 0x10, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12); extracted(); assertEquals(0x00, bus.read(0x1210)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x08, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x04, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x02, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x01, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x00, bus.read(0x1211)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); extracted(); assertEquals(0x80, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x40, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x20, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); extracted(); assertEquals(0x10, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setYRegister(0x00); bus.loadProgram(0x8c, 0x10, 0x12); extracted(); assertEquals(0x00, bus.read(0x1210)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x8c, 0x10, 0x12); extracted(); assertEquals(0x0f, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x8c, 0x10, 0x12); extracted(); assertEquals(0x80, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setAccumulator(0x00); bus.loadProgram(0x8d, 0x10, 0x12); extracted(); assertEquals(0x00, bus.read(0x1210)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x8d, 0x10, 0x12); extracted(); assertEquals(0x0f, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x8d, 0x10, 0x12); extracted(); assertEquals(0x80, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_STX,"public void test_STX() throws MemoryAccessException { cpu.setXRegister(0x00); bus.loadProgram(0x8e, 0x10, 0x12); extracted(); assertEquals(0x00, bus.read(0x1210)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x0f); bus.loadProgram(0x8e, 0x10, 0x12); extracted(); assertEquals(0x0f, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x80); bus.loadProgram(0x8e, 0x10, 0x12); extracted(); assertEquals(0x80, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_LDA,"public void test_LDA() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x0f); bus.write(0x1212, 0x80); bus.loadProgram(0xad, 0x10, 0x12, 0xad, 0x11, 0x12, 0xad, 0x12, 0x12); extracted(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_LDX,"public void test_LDX() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x0f); bus.write(0x1212, 0x80); bus.loadProgram(0xae, 0x10, 0x12, 0xae, 0x11, 0x12, 0xae, 0x12, 0x12); extracted(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x0f, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_LDY,"public void test_LDY() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x0f); bus.write(0x1212, 0x80); bus.loadProgram(0xbc, 0x10, 0x12, 0xbc, 0x11, 0x12, 0xbc, 0x12, 0x12); extracted(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x0f, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x80); bus.write(0x1212, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xcd, 0x10, 0x12, 0xcd, 0x11, 0x12, 0xcd, 0x12, 0x12); extracted(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); extracted(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_CPY,"public void test_CPY() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x80); bus.write(0x1212, 0xff); cpu.setYRegister(0x80); bus.loadProgram(0xcc, 0x10, 0x12, 0xcc, 0x11, 0x12, 0xcc, 0x12, 0x12); extracted(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); extracted(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_DEC,"public void test_DEC() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x01); bus.write(0x1212, 0x80); bus.write(0x1213, 0xff); bus.loadProgram(0xce, 0x10, 0x12, 0xce, 0x11, 0x12, 0xce, 0x12, 0x12, 0xce, 0x13, 0x12); extracted(); assertEquals(0xff, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); extracted(); assertEquals(0x00, bus.read(0x1211)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x7f, bus.read(0x1212)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0xfe, bus.read(0x1213)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_CPX,"public void test_CPX() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x80); bus.write(0x1212, 0xff); cpu.setXRegister(0x80); bus.loadProgram(0xec, 0x10, 0x12, 0xec, 0x11, 0x12, 0xec, 0x12, 0x12); extracted(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); extracted(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_SBC,"public void test_SBC() throws MemoryAccessException { bus.write(0x1210, 0x01); bus.loadProgram(0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xed, 0x10, 0x12); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() throws MemoryAccessException { bus.write(0x1210, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() throws MemoryAccessException { bus.write(0x1210, 0x01); bus.write(0x1220, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xed, 0x10, 0x12); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xed, 0x20, 0x12); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xed, 0x10, 0x12); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xed, 0x10, 0x12); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteModeTest.java,test_INC,"public void test_INC() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x7f); bus.write(0x1212, 0xff); bus.loadProgram(0xee, 0x10, 0x12, 0xee, 0x11, 0x12, 0xee, 0x12, 0x12); extracted(); assertEquals(0x01, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); extracted(); assertEquals(0x80, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); extracted(); assertEquals(0x00, bus.read(0x1212)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_ORA,"public void test_ORA() throws MemoryAccessException { bus.write(0x2c30, 0x00); bus.write(0x2c32, 0x11); bus.write(0x2c34, 0x22); bus.write(0x2c38, 0x44); bus.write(0x2c40, 0x88); cpu.setXRegister(0x30); bus.loadProgram(0x1d, 0x00, 0x2c, 0x1d, 0x02, 0x2c, 0x1d, 0x04, 0x2c, 0x1d, 0x08, 0x2c, 0x1d, 0x10, 0x2c); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.write(0x2c30, 0x00); bus.write(0x2c31, 0x01); bus.write(0x2c32, 0x02); bus.write(0x2c33, 0x44); bus.write(0x2c34, 0x80); cpu.setXRegister(0x30); bus.loadProgram(0x1e, 0x00, 0x2c, 0x1e, 0x01, 0x2c, 0x1e, 0x02, 0x2c, 0x1e, 0x03, 0x2c, 0x1e, 0x04, 0x2c); cpu.step(); assertEquals(0x00, bus.read(0x2c30)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x2c31)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x2c32)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x2c33)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x2c34)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_AND,"public void test_AND() throws MemoryAccessException { bus.write(0x1a30, 0x00); bus.write(0x1a31, 0x11); bus.write(0x1a32, 0xff); bus.write(0x1a33, 0x99); bus.write(0x1a34, 0x11); bus.write(0x1a35, 0x0f); bus.write(0x1a02, 0x11); cpu.setXRegister(0x30); bus.loadProgram(0x3d, 0x00, 0x1a, 0x3d, 0x01, 0x1a, 0xa9, 0xaa, 0x3d, 0x02, 0x1a, 0x3d, 0x03, 0x1a, 0x3d, 0x04, 0x1a, 0xa9, 0xff, 0x3d, 0x05, 0x1a, 0xa9, 0x01, 0x3d, 0xd2, 0x1a); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.write(0x1070, 0x00); bus.write(0x1071, 0x01); cpu.setXRegister(0x70); bus.loadProgram(0x3e, 0x00, 0x10, 0x3e, 0x01, 0x10, 0x38, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x1070)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x1071)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_EOR,"public void test_EOR() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0xff); bus.write(0xab42, 0x33); bus.write(0xab43, 0x44); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x88, 0x5d, 0x10, 0xab, 0x5d, 0x11, 0xab, 0x5d, 0x12, 0xab, 0x5d, 0x13, 0xab); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.write(0xab30, 0x00); bus.write(0xab31, 0x01); bus.write(0xab32, 0x02); bus.write(0xab33, 0x44); bus.write(0xab34, 0x80); bus.write(0xab35, 0x02); cpu.setXRegister(0x30); bus.loadProgram(0x5e, 0x00, 0xab, 0x5e, 0x01, 0xab, 0x5e, 0x02, 0xab, 0x5e, 0x03, 0xab, 0x5e, 0x04, 0xab, 0x38, 0x5e, 0x05, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab30)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab31)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0xab32)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0xab33)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0xab34)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0xab35)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_ADC,"public void test_ADC() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab41, 0xff); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x7d, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab41, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x7d, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x7d, 0x10, 0xab); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x7d, 0x10, 0xab); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x7d, 0x10, 0xab); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x7d, 0x11, 0xab); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x7d, 0x11, 0xab); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x7d, 0x11, 0xab); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0x10); bus.loadProgram(0x7e, 0x10, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab); cpu.setXRegister(0x30); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab41)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0xab41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_LDY,"public void test_LDY() throws MemoryAccessException { bus.write(0xab45, 0x00); bus.write(0xab46, 0x0f); bus.write(0xab47, 0x80); bus.loadProgram(0xbc, 0x10, 0xab, 0xbc, 0x11, 0xab, 0xbc, 0x12, 0xab); cpu.setXRegister(0x35); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_LDA,"public void test_LDA() throws MemoryAccessException { bus.write(0xab42, 0x00); bus.write(0xab43, 0x0f); bus.write(0xab44, 0x80); bus.loadProgram(0xbd, 0x10, 0xab, 0xbd, 0x11, 0xab, 0xbd, 0x12, 0xab); cpu.setXRegister(0x32); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0x80); bus.write(0xab42, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xdd, 0x10, 0xab, 0xdd, 0x11, 0xab, 0xdd, 0x12, 0xab); cpu.setXRegister(0x30); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_DEC,"public void test_DEC() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0x01); bus.write(0xab42, 0x80); bus.write(0xab43, 0xff); bus.loadProgram(0xde, 0x10, 0xab, 0xde, 0x11, 0xab, 0xde, 0x12, 0xab, 0xde, 0x13, 0xab); cpu.setXRegister(0x30); cpu.step(); assertEquals(0xff, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab41)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0xab42)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0xab43)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_SBC,"public void test_SBC() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.loadProgram(0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab50, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xfd, 0x20, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xfd, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteXModeTest.java,test_INC,"public void test_INC() throws MemoryAccessException { bus.write(0xab30, 0x00); bus.write(0xab31, 0x7f); bus.write(0xab32, 0xff); cpu.setXRegister(0x20); bus.loadProgram(0xfe, 0x10, 0xab, 0xfe, 0x11, 0xab, 0xfe, 0x12, 0xab); cpu.step(); assertEquals(0x01, bus.read(0xab30)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0xab31)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab32)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_ORA,"public void test_ORA() throws MemoryAccessException { bus.write(0x2c30, 0x00); bus.write(0x2c32, 0x11); bus.write(0x2c34, 0x22); bus.write(0x2c38, 0x44); bus.write(0x2c40, 0x88); cpu.setYRegister(0x30); bus.loadProgram(0x19, 0x00, 0x2c, 0x19, 0x02, 0x2c, 0x19, 0x04, 0x2c, 0x19, 0x08, 0x2c, 0x19, 0x10, 0x2c); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_AND,"public void test_AND() throws MemoryAccessException { bus.write(0x1a30, 0x00); bus.write(0x1a31, 0x11); bus.write(0x1a32, 0xff); bus.write(0x1a33, 0x99); bus.write(0x1a34, 0x11); bus.write(0x1a35, 0x0f); bus.write(0x1a02, 0x11); cpu.setYRegister(0x30); bus.loadProgram(0x39, 0x00, 0x1a, 0x39, 0x01, 0x1a, 0xa9, 0xaa, 0x39, 0x02, 0x1a, 0x39, 0x03, 0x1a, 0x39, 0x04, 0x1a, 0xa9, 0xff, 0x39, 0x05, 0x1a, 0xa9, 0x01, 0x39, 0xd2, 0x1a); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_EOR,"public void test_EOR() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0xff); bus.write(0xab42, 0x33); bus.write(0xab43, 0x44); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x88, 0x59, 0x10, 0xab, 0x59, 0x11, 0xab, 0x59, 0x12, 0xab, 0x59, 0x13, 0xab); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_ADC,"public void test_ADC() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab41, 0xff); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x79, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab41, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x79, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x79, 0x10, 0xab); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x79, 0x10, 0xab); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x79, 0x10, 0xab); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x79, 0x11, 0xab); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x79, 0x11, 0xab); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x79, 0x11, 0xab); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setYRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_LDX,"public void test_LDX() throws MemoryAccessException { bus.write(0xab45, 0x00); bus.write(0xab46, 0x0f); bus.write(0xab47, 0x80); bus.loadProgram(0xbe, 0x10, 0xab, 0xbe, 0x11, 0xab, 0xbe, 0x12, 0xab); cpu.setYRegister(0x35); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_LDA,"public void test_LDA() throws MemoryAccessException { bus.write(0xab42, 0x00); bus.write(0xab43, 0x0f); bus.write(0xab44, 0x80); bus.loadProgram(0xb9, 0x10, 0xab, 0xb9, 0x11, 0xab, 0xb9, 0x12, 0xab); cpu.setYRegister(0x32); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0x80); bus.write(0xab42, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xd9, 0x10, 0xab, 0xd9, 0x11, 0xab, 0xd9, 0x12, 0xab); cpu.setYRegister(0x30); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_SBC,"public void test_SBC() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.loadProgram(0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAbsoluteYModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab50, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xf9, 0x20, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xf9, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAccumulatorModeTest.java,setUp,"public void setUp() throws MemoryRangeException, MemoryAccessException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Cpu.DEFAULT_BASE_ADDRESS & 0x00ff); bus.write(0xfffd, (Cpu.DEFAULT_BASE_ADDRESS & 0xff00)>>>8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAccumulatorModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.loadProgram(0xa9, 0x00, 0x0a, 0xa9, 0x01, 0x0a, 0xa9, 0x02, 0x0a, 0xa9, 0x44, 0x0a, 0xa9, 0x80, 0x0a); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x04, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAccumulatorModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.loadProgram(0xa9, 0x00, 0x2a, 0xa9, 0x01, 0x2a, 0x38, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAccumulatorModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.loadProgram(0xa9, 0x00, 0x4a, 0xa9, 0x01, 0x4a, 0xa9, 0x02, 0x4a, 0xa9, 0x44, 0x4a, 0xa9, 0x80, 0x4a, 0x38, 0xa9, 0x02, 0x4a); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x22, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x40, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(3); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuAccumulatorModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.loadProgram(0xa9, 0x00, 0x6a, 0xa9, 0x10, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x08, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_ORA,"public void test_ORA() throws MemoryAccessException { bus.loadProgram(0x09, 0x00, 0x09, 0x11, 0x09, 0x22, 0x09, 0x44, 0x09, 0x88); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_ORA_SetsZeroFlagIfResultIsZero,"public void test_ORA_SetsZeroFlagIfResultIsZero() throws MemoryAccessException { bus.loadProgram(0x09, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_ORA_DoesNotSetZeroFlagIfResultNotZero,"public void test_ORA_DoesNotSetZeroFlagIfResultNotZero() throws MemoryAccessException { bus.loadProgram(0x09, 0x01); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_ORA_SetsNegativeFlagIfResultIsNegative,"public void test_ORA_SetsNegativeFlagIfResultIsNegative() throws MemoryAccessException { bus.loadProgram(0x09, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_ORA_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_ORA_DoesNotSetNegativeFlagIfResultNotNegative() throws MemoryAccessException { bus.loadProgram(0x09, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_AND,"public void test_AND() throws MemoryAccessException { bus.loadProgram(0x29, 0x00, 0x29, 0x11, 0xa9, 0xaa, 0x29, 0xff, 0x29, 0x99, 0x29, 0x11); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_AND_SetsZeroFlagIfResultIsZero,"public void test_AND_SetsZeroFlagIfResultIsZero() throws MemoryAccessException { bus.loadProgram(0xa9, 0x88, 0x29, 0x11); cpu.step(2); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_AND_DoesNotSetZeroFlagIfResultNotZero,"public void test_AND_DoesNotSetZeroFlagIfResultNotZero() throws MemoryAccessException { bus.loadProgram(0xa9, 0x88, 0x29, 0xf1); cpu.step(2); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_AND_SetsNegativeFlagIfResultIsNegative,"public void test_AND_SetsNegativeFlagIfResultIsNegative() throws MemoryAccessException { bus.loadProgram(0xa9, 0x88, 0x29, 0xf0); cpu.step(2); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_AND_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_AND_DoesNotSetNegativeFlagIfResultNotNegative() throws MemoryAccessException { bus.loadProgram(0xa9, 0x88, 0x29, 0x0f); cpu.step(2); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_EOR,"public void test_EOR() throws MemoryAccessException { bus.loadProgram(0xa9, 0x88, 0x49, 0x00, 0x49, 0xff, 0x49, 0x33); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_EOR_SetsArithmeticFlags,"public void test_EOR_SetsArithmeticFlags() throws MemoryAccessException { bus.loadProgram(0xa9, 0x77, 0x49, 0x77, 0x49, 0xff); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_ADC,"public void test_ADC() throws MemoryAccessException { bus.loadProgram(0xa9, 0x00, 0x69, 0x01); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x69, 0x01); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x69, 0x01); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x69, 0x01); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x69, 0xff); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x69, 0xff); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x69, 0xff); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x69, 0xff); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() throws MemoryAccessException { bus.loadProgram(0xa9, 0x00, 0x38, 0x69, 0x01); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() throws MemoryAccessException { bus.loadProgram(0xf8, 0xa9, 0x01, 0x69, 0x01); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x69, 0x01); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x69, 0x01); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x69, 0x01); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x69, 0x99); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x69, 0x99); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x69, 0x99); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDY_SetsYRegister,"public void test_LDY_SetsYRegister() throws MemoryAccessException { bus.loadProgram(0xa0, 0x12); cpu.step(); assertEquals(0x12, cpu.getYRegister()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDY_SetsZeroFlagIfArgIsZero,"public void test_LDY_SetsZeroFlagIfArgIsZero() throws MemoryAccessException { bus.loadProgram(0xa0, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDY_DoesNotSetZeroFlagIfResultNotZero,"public void test_LDY_DoesNotSetZeroFlagIfResultNotZero() throws MemoryAccessException { bus.loadProgram(0xa0, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDY_SetsNegativeFlagIfResultIsNegative,"public void test_LDY_SetsNegativeFlagIfResultIsNegative() throws MemoryAccessException { bus.loadProgram(0xa0, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDY_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_LDY_DoesNotSetNegativeFlagIfResultNotNegative() throws MemoryAccessException { bus.loadProgram(0xa0, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDX_SetsXRegister,"public void test_LDX_SetsXRegister() throws MemoryAccessException { bus.loadProgram(0xa2, 0x12); cpu.step(); assertEquals(0x12, cpu.getXRegister()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDX_SetsZeroFlagIfResultIsZero,"public void test_LDX_SetsZeroFlagIfResultIsZero() throws MemoryAccessException { bus.loadProgram(0xa2, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDX_DoesNotSetZeroFlagIfResultNotZero,"public void test_LDX_DoesNotSetZeroFlagIfResultNotZero() throws MemoryAccessException { bus.loadProgram(0xa2, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDX_SetsNegativeFlagIfResultIsNegative,"public void test_LDX_SetsNegativeFlagIfResultIsNegative() throws MemoryAccessException { bus.loadProgram(0xa2, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDX_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_LDX_DoesNotSetNegativeFlagIfResultNotNegative() throws MemoryAccessException { bus.loadProgram(0xa2, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDA_SetsAccumulator,"public void test_LDA_SetsAccumulator() throws MemoryAccessException { bus.loadProgram(0xa9, 0x12); cpu.step(); assertEquals(0x12, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDA_SetsZeroFlagIfResultIsZero,"public void test_LDA_SetsZeroFlagIfResultIsZero() throws MemoryAccessException { bus.loadProgram(0xa9, 0x00); cpu.step(); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDA_DoesNotSetZeroFlagIfResultNotZero,"public void test_LDA_DoesNotSetZeroFlagIfResultNotZero() throws MemoryAccessException { bus.loadProgram(0xa9, 0x12); cpu.step(); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDA_SetsNegativeFlagIfResultIsNegative,"public void test_LDA_SetsNegativeFlagIfResultIsNegative() throws MemoryAccessException { bus.loadProgram(0xa9, 0x80); cpu.step(); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_LDA_DoesNotSetNegativeFlagIfResultNotNegative,"public void test_LDA_DoesNotSetNegativeFlagIfResultNotNegative() throws MemoryAccessException { bus.loadProgram(0xa9, 0x7f); cpu.step(); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_CPY_SetsZeroAndCarryFlagsIfNumbersSame,"public void test_CPY_SetsZeroAndCarryFlagsIfNumbersSame() throws MemoryAccessException { bus.loadProgram(0xa0, 0x00, 0xc0, 0x00); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0x01, 0xc0, 0x01); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0x7f, 0xc0, 0x7f); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0xFF, 0xc0, 0xFF); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_CPY_SetsCarryFlagIfYGreaterThanMemory,"public void test_CPY_SetsCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa0, 0x0a, 0xc0, 0x08); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0xfa, 0xc0, 0x80); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_CPY_DoesNotSetCarryFlagIfYLessThanThanMemory,"public void test_CPY_DoesNotSetCarryFlagIfYLessThanThanMemory() throws MemoryAccessException { bus.loadProgram(0xa0, 0x08, 0xc0, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0x70, 0xc0, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_CMP_SetsZeroAndCarryFlagsIfNumbersSame,"public void test_CMP_SetsZeroAndCarryFlagsIfNumbersSame() throws MemoryAccessException { bus.loadProgram(0xa9, 0x00, 0xc9, 0x00); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x01, 0xc9, 0x01); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xc9, 0x7f); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xFF, 0xc9, 0xFF); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_CMP_SetsCarryFlagIfYGreaterThanMemory,"public void test_CMP_SetsCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa9, 0x0a, 0xc9, 0x08); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xfa, 0xc9, 0x80); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_CMP_DoesNotSetCarryFlagIfYGreaterThanMemory,"public void test_CMP_DoesNotSetCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa9, 0x08, 0xc9, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x70, 0xc9, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_CPX_SetsZeroAndCarryFlagsIfNumbersSame,"public void test_CPX_SetsZeroAndCarryFlagsIfNumbersSame() throws MemoryAccessException { bus.loadProgram(0xa2, 0x00, 0xe0, 0x00); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0x01, 0xe0, 0x01); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0x7f, 0xe0, 0x7f); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0xFF, 0xe0, 0xFF); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_CPX_SetsCarryFlagIfYGreaterThanMemory,"public void test_CPX_SetsCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa2, 0x0a, 0xe0, 0x08); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0xfa, 0xe0, 0x80); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_CPX_DoesNotSetCarryFlagIfYGreaterThanMemory,"public void test_CPX_DoesNotSetCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa2, 0x08, 0xe0, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0x70, 0xe0, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_SBC,"public void test_SBC() throws MemoryAccessException { bus.loadProgram(0xa9, 0x00, 0xe9, 0x01); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xe9, 0x01); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xe9, 0x01); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xe9, 0x01); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xe9, 0x01); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() throws MemoryAccessException { bus.loadProgram(0x18, 0xa9, 0x05, 0xe9, 0x01); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xe9, 0x01); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xe9, 0x01); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xe9, 0x01); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImmediateModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() throws MemoryAccessException { bus.loadProgram(0xf8, 0xa9, 0x00, 0xe9, 0x01); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xe9, 0x01); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xe9, 0x01); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xe9, 0x01); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xe9, 0x11); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xe9, 0x01); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xe9, 0x01); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_BRK,"public void test_BRK() throws MemoryAccessException { cpu.setCarryFlag(); cpu.setOverflowFlag(); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW, cpu.getProcessorStatus()); assertEquals(0xff, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(Cpu.IRQ_VECTOR_H, 0x12); bus.write(Cpu.IRQ_VECTOR_L, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff)); assertEquals(0x06, bus.read(0x1fe)); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW|Cpu.P_BREAK, bus.read(0x1fd)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW|Cpu.P_BREAK| Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_BRK_HonorsIrqDisableFlag,"public void test_BRK_HonorsIrqDisableFlag() throws MemoryAccessException { cpu.setIrqDisableFlag(); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x0204, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); cpu.step(2); assertEquals(0x0206, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_CLC,public void test_CLC() throws MemoryAccessException { cpu.setCarryFlag(); assertTrue(cpu.getCarryFlag()); bus.loadProgram(0x18); cpu.step(); assertFalse(cpu.getCarryFlag()); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_CLD,public void test_CLD() throws MemoryAccessException { cpu.setDecimalModeFlag(); assertTrue(cpu.getDecimalModeFlag()); bus.loadProgram(0xd8); cpu.step(); assertFalse(cpu.getDecimalModeFlag()); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_CLI,public void test_CLI() throws MemoryAccessException { cpu.setIrqDisableFlag(); assertTrue(cpu.getIrqDisableFlag()); bus.loadProgram(0x58); cpu.step(); assertFalse(cpu.getIrqDisableFlag()); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_CLV,public void test_CLV() throws MemoryAccessException { cpu.setOverflowFlag(); assertTrue(cpu.getOverflowFlag()); bus.loadProgram(0xb8); cpu.step(); assertFalse(cpu.getOverflowFlag()); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_DEX,"public void test_DEX() throws MemoryAccessException { bus.loadProgram(0xca); cpu.setXRegister(0x02); cpu.step(); assertEquals(0x01, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_DEX_SetsZeroFlagWhenZero,"public void test_DEX_SetsZeroFlagWhenZero() throws MemoryAccessException { bus.loadProgram(0xca); cpu.setXRegister(0x01); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_DEX_SetsNegativeFlagWhen,"public void test_DEX_SetsNegativeFlagWhen() throws MemoryAccessException { bus.loadProgram(0xca); cpu.step(); assertEquals(0xff, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_DEY,"public void test_DEY() throws MemoryAccessException { bus.loadProgram(0x88); cpu.setYRegister(0x02); cpu.step(); assertEquals(0x01, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_DEY_SetsZeroFlagWhenZero,"public void test_DEY_SetsZeroFlagWhenZero() throws MemoryAccessException { bus.loadProgram(0x88); cpu.setYRegister(0x01); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_DEY_SetsNegativeFlagWhen,"public void test_DEY_SetsNegativeFlagWhen() throws MemoryAccessException { bus.loadProgram(0x88); cpu.step(); assertEquals(0xff, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_INX,"public void test_INX() throws MemoryAccessException { bus.loadProgram(0xe8); cpu.step(); assertEquals(0x01, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_INX_SetsNegativeFlagWhenNegative,"public void test_INX_SetsNegativeFlagWhenNegative() throws MemoryAccessException { bus.loadProgram(0xe8); cpu.setXRegister(0x7f); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_INX_SetsZeroFlagWhenZero,"public void test_INX_SetsZeroFlagWhenZero() throws MemoryAccessException { bus.loadProgram(0xe8); cpu.setXRegister(0xff); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_INY,"public void test_INY() throws MemoryAccessException { bus.loadProgram(0xc8); cpu.step(); assertEquals(0x01, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_INY_SetsNegativeFlagWhenNegative,"public void test_INY_SetsNegativeFlagWhenNegative() throws MemoryAccessException { bus.loadProgram(0xc8); cpu.setYRegister(0x7f); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_INY_SetsZeroFlagWhenZero,"public void test_INY_SetsZeroFlagWhenZero() throws MemoryAccessException { bus.loadProgram(0xc8); cpu.setYRegister(0xff); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_NOP,"public void test_NOP() throws MemoryAccessException { bus.loadProgram(0xea); cpu.step(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x201, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_PHA,"public void test_PHA() throws MemoryAccessException { bus.loadProgram(0x48); cpu.setAccumulator(0x3a); cpu.step(); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x3a, cpu.stackPeek()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_PHP,"public void test_PHP() throws MemoryAccessException { bus.loadProgram(0x08); cpu.setProcessorStatus(0x27); cpu.step(); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x27, cpu.stackPeek()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_PLA,"public void test_PLA() throws MemoryAccessException { cpu.stackPush(0x32); bus.loadProgram(0x68); cpu.step(); assertEquals(0x32, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_PLA_SetsZeroIfAccumulatorIsZero,"public void test_PLA_SetsZeroIfAccumulatorIsZero() throws MemoryAccessException { cpu.stackPush(0x00); bus.loadProgram(0x68); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_PLA_SetsNegativeIfAccumulatorIsNegative,"public void test_PLA_SetsNegativeIfAccumulatorIsNegative() throws MemoryAccessException { cpu.stackPush(0xff); bus.loadProgram(0x68); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_PLP,"public void test_PLP() throws MemoryAccessException { cpu.stackPush(0x2f); bus.loadProgram(0x28); cpu.step(); assertEquals(0x2f, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_RTI,"public void test_RTI() throws MemoryAccessException { cpu.stackPush(0x0f); cpu.stackPush(0x11); cpu.stackPush(0x29); bus.loadProgram(0x40); cpu.step(); assertEquals(0x0f11, cpu.getProgramCounter()); assertEquals(0x29, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_RTS,"public void test_RTS() throws MemoryAccessException { cpu.stackPush(0x0f); cpu.stackPush(0x11); bus.loadProgram(0x60); cpu.step(); assertEquals(0x0f12, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_SEC,public void test_SEC() throws MemoryAccessException { bus.loadProgram(0x38); cpu.step(); assertTrue(cpu.getCarryFlag()); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_SED,public void test_SED() throws MemoryAccessException { bus.loadProgram(0xf8); cpu.step(); assertTrue(cpu.getDecimalModeFlag()); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_SEI,public void test_SEI() throws MemoryAccessException { bus.loadProgram(0x78); cpu.step(); assertTrue(cpu.getIrqDisableFlag()); },https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TAX,"public void test_TAX() throws MemoryAccessException { cpu.setAccumulator(0x32); bus.loadProgram(0xaa); cpu.step(); assertEquals(0x32, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TAX_SetsZeroFlagIfXIsZero,"public void test_TAX_SetsZeroFlagIfXIsZero() throws MemoryAccessException { cpu.setAccumulator(0x00); bus.loadProgram(0xaa); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TAX_SetsNegativeFlagIfXIsNegative,"public void test_TAX_SetsNegativeFlagIfXIsNegative() throws MemoryAccessException { cpu.setAccumulator(0xff); bus.loadProgram(0xaa); cpu.step(); assertEquals(0xff, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TAY,"public void test_TAY() throws MemoryAccessException { cpu.setAccumulator(0x32); bus.loadProgram(0xa8); cpu.step(); assertEquals(0x32, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TAY_SetsZeroFlagIfYIsZero,"public void test_TAY_SetsZeroFlagIfYIsZero() throws MemoryAccessException { cpu.setAccumulator(0x00); bus.loadProgram(0xa8); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TAY_SetsNegativeFlagIfYIsNegative,"public void test_TAY_SetsNegativeFlagIfYIsNegative() throws MemoryAccessException { cpu.setAccumulator(0xff); bus.loadProgram(0xa8); cpu.step(); assertEquals(0xff, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TSX,"public void test_TSX() throws MemoryAccessException { cpu.setStackPointer(0x32); bus.loadProgram(0xba); cpu.step(); assertEquals(0x32, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TSX_SetsZeroFlagIfXIsZero,"public void test_TSX_SetsZeroFlagIfXIsZero() throws MemoryAccessException { cpu.setStackPointer(0x00); bus.loadProgram(0xba); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TSX_SetsNegativeFlagIfXIsNegative,"public void test_TSX_SetsNegativeFlagIfXIsNegative() throws MemoryAccessException { cpu.setStackPointer(0xff); bus.loadProgram(0xba); cpu.step(); assertEquals(0xff, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TXA,"public void test_TXA() throws MemoryAccessException { cpu.setXRegister(0x32); bus.loadProgram(0x8a); cpu.step(); assertEquals(0x32, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TXA_SetsZeroFlagIfAccumulatorIsZero,"public void test_TXA_SetsZeroFlagIfAccumulatorIsZero() throws MemoryAccessException { cpu.setXRegister(0x00); bus.loadProgram(0x8a); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TXA_SetsNegativeFlagIfAccumulatorIsNegative,"public void test_TXA_SetsNegativeFlagIfAccumulatorIsNegative() throws MemoryAccessException { cpu.setXRegister(0xff); bus.loadProgram(0x8a); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TXS,"public void test_TXS() throws MemoryAccessException { cpu.setXRegister(0x32); bus.loadProgram(0x9a); cpu.step(); assertEquals(0x32, cpu.getStackPointer()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TXS_DoesNotAffectProcessorStatus,"public void test_TXS_DoesNotAffectProcessorStatus() throws MemoryAccessException { cpu.setXRegister(0x00); bus.loadProgram(0x9a); cpu.step(); assertEquals(0x00, cpu.getStackPointer()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setXRegister(0x80); bus.loadProgram(0x9a); cpu.step(); assertEquals(0x80, cpu.getStackPointer()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TYA,"public void test_TYA() throws MemoryAccessException { cpu.setYRegister(0x32); bus.loadProgram(0x98); cpu.step(); assertEquals(0x32, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TYA_SetsZeroFlagIfAccumulatorIsZero,"public void test_TYA_SetsZeroFlagIfAccumulatorIsZero() throws MemoryAccessException { cpu.setYRegister(0x00); bus.loadProgram(0x98); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuImpliedModeTest.java,test_TYA_SetsNegativeFlagIfAccumulatorIsNegative,"public void test_TYA_SetsNegativeFlagIfAccumulatorIsNegative() throws MemoryAccessException { cpu.setYRegister(0xff); bus.loadProgram(0x98); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuIndirectModeTest.java,test_JMP,"public void test_JMP() throws MemoryAccessException { bus.write(0x3400, 0x00); bus.write(0x3401, 0x54); bus.loadProgram(0x6c, 0x00, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuRelativeModeTest.java,test_BPL,"public void test_BPL() throws MemoryAccessException { bus.loadProgram(0x10, 0x05); cpu.setNegativeFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x10, 0x05); cpu.clearNegativeFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x10, 0xfb); cpu.setNegativeFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x10, 0xfb); cpu.clearNegativeFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuRelativeModeTest.java,test_BMI,"public void test_BMI() throws MemoryAccessException { bus.loadProgram(0x30, 0x05); cpu.setNegativeFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x30, 0x05); cpu.clearNegativeFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x30, 0xfb); cpu.setNegativeFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x30, 0xfb); cpu.clearNegativeFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuRelativeModeTest.java,test_BVC,"public void test_BVC() throws MemoryAccessException { bus.loadProgram(0x50, 0x05); cpu.setOverflowFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x50, 0x05); cpu.clearOverflowFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x50, 0xfb); cpu.setOverflowFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x50, 0xfb); cpu.clearOverflowFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuRelativeModeTest.java,test_BVS,"public void test_BVS() throws MemoryAccessException { bus.loadProgram(0x70, 0x05); cpu.setOverflowFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x70, 0x05); cpu.clearOverflowFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x70, 0xfb); cpu.setOverflowFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x70, 0xfb); cpu.clearOverflowFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuRelativeModeTest.java,test_BCC,"public void test_BCC() throws MemoryAccessException { bus.loadProgram(0x90, 0x05); cpu.setCarryFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x90, 0x05); cpu.clearCarryFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x90, 0xfb); cpu.setCarryFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x90, 0xfb); cpu.clearCarryFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuRelativeModeTest.java,test_BCS,"public void test_BCS() throws MemoryAccessException { bus.loadProgram(0xb0, 0x05); cpu.setCarryFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xb0, 0x05); cpu.clearCarryFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xb0, 0xfb); cpu.setCarryFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xb0, 0xfb); cpu.clearCarryFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuRelativeModeTest.java,test_BNE,"public void test_BNE() throws MemoryAccessException { bus.loadProgram(0xd0, 0x05); cpu.setZeroFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xd0, 0x05); cpu.clearZeroFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xd0, 0xfb); cpu.setZeroFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xd0, 0xfb); cpu.clearZeroFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuRelativeModeTest.java,test_BEQ,"public void test_BEQ() throws MemoryAccessException { bus.loadProgram(0xf0, 0x05); cpu.setZeroFlag(); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xf0, 0x05); cpu.clearZeroFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xf0, 0xfb); cpu.setZeroFlag(); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0xf0, 0xfb); cpu.clearZeroFlag(); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuTest.java,setUp,"public void setUp() throws MemoryRangeException, MemoryAccessException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, 0x00); bus.write(0xfffd, 0x02); cpu.reset(); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuTest.java,testStack,"public void testStack() throws MemoryAccessException { cpu.stackPush(0x13); assertEquals(0x13, cpu.stackPop()); cpu.stackPush(0x12); assertEquals(0x12, cpu.stackPop()); for (int i = 0x00; i <= 0xff; i++) { cpu.stackPush(i); } for (int i = 0xff; i >= 0x00; i--) { assertEquals(i, cpu.stackPop()); } }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuTest.java,testStackPush,"public void testStackPush() throws MemoryAccessException { assertEquals(0xff, cpu.getStackPointer()); assertEquals(0xff, bus.read(0x1ff)); cpu.stackPush(0x06); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); cpu.stackPush(0x05); assertEquals(0xfd, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); cpu.stackPush(0x04); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); cpu.stackPush(0x03); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); assertEquals(0x03, bus.read(0x1fc)); cpu.stackPush(0x02); assertEquals(0xfa, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); assertEquals(0x03, bus.read(0x1fc)); assertEquals(0x02, bus.read(0x1fb)); cpu.stackPush(0x01); assertEquals(0xf9, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); assertEquals(0x03, bus.read(0x1fc)); assertEquals(0x02, bus.read(0x1fb)); assertEquals(0x01, bus.read(0x1fa)); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuTest.java,testStackPushWrapsAroundToStackTop,"public void testStackPushWrapsAroundToStackTop() throws MemoryAccessException { cpu.setStackPointer(0x01); cpu.stackPush(0x01); assertEquals(0x01, bus.read(0x101)); assertEquals(0x00, cpu.getStackPointer()); cpu.stackPush(0x02); assertEquals(0x02, bus.read(0x100)); assertEquals(0xff, cpu.getStackPointer()); cpu.stackPush(0x03); assertEquals(0x03, bus.read(0x1ff)); assertEquals(0xfe, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuTest.java,testStackPop,"public void testStackPop() throws MemoryAccessException { bus.write(0x1ff, 0x06); bus.write(0x1fe, 0x05); bus.write(0x1fd, 0x04); bus.write(0x1fc, 0x03); bus.write(0x1fb, 0x02); bus.write(0x1fa, 0x01); cpu.setStackPointer(0xf9); assertEquals(0x01, cpu.stackPop()); assertEquals(0xfa, cpu.getStackPointer()); assertEquals(0x02, cpu.stackPop()); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x03, cpu.stackPop()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x04, cpu.stackPop()); assertEquals(0xfd, cpu.getStackPointer()); assertEquals(0x05, cpu.stackPop()); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x06, cpu.stackPop()); assertEquals(0xff, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuTest.java,testStackPopWrapsAroundToStackBottom,"public void testStackPopWrapsAroundToStackBottom() throws MemoryAccessException { bus.write(0x1ff, 0x0f); bus.write(0x100, 0xf0); bus.write(0x101, 0xf1); bus.write(0x102, 0xf2); cpu.setStackPointer(0xfe); assertEquals(0x0f, cpu.stackPop()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0xf0, cpu.stackPop()); assertEquals(0x00, cpu.getStackPointer()); assertEquals(0xf1, cpu.stackPop()); assertEquals(0x01, cpu.getStackPointer()); assertEquals(0xf2, cpu.stackPop()); assertEquals(0x02, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuTest.java,testStackPeekDoesNotAlterStackPointer,"public void testStackPeekDoesNotAlterStackPointer() throws MemoryAccessException { assertEquals(0xff, cpu.stackPeek()); assertEquals(0xff, cpu.getStackPointer()); cpu.stackPush(0x01); assertEquals(0x01, cpu.stackPeek()); assertEquals(0xfe, cpu.getStackPointer()); cpu.stackPush(0x02); assertEquals(0x02, cpu.stackPeek()); assertEquals(0xfd, cpu.getStackPointer()); cpu.stackPush(0x03); assertEquals(0x03, cpu.stackPeek()); assertEquals(0xfc, cpu.getStackPointer()); cpu.stackPush(0x04); assertEquals(0x04, cpu.stackPeek()); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x04, cpu.stackPeek()); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x04, cpu.stackPeek()); assertEquals(0xfb, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_ORA,"public void test_ORA() throws MemoryAccessException { bus.write(0x0000, 0x00); bus.write(0x0002, 0x11); bus.write(0x0004, 0x22); bus.write(0x0008, 0x44); bus.write(0x0010, 0x88); bus.loadProgram(0x05, 0x00, 0x05, 0x02, 0x05, 0x04, 0x05, 0x08, 0x05, 0x10); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.write(0x0000, 0x00); bus.write(0x0001, 0x01); bus.write(0x0002, 0x02); bus.write(0x0003, 0x44); bus.write(0x0004, 0x80); bus.loadProgram(0x06, 0x00, 0x06, 0x01, 0x06, 0x02, 0x06, 0x03, 0x06, 0x04); cpu.step(); assertEquals(0x00, bus.read(0x0000)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x0002)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x0003)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x0004)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_BIT,"public void test_BIT() throws MemoryAccessException { bus.write(0x0000, 0xc0); bus.loadProgram(0xa9, 0x01, 0x24, 0x00, 0xa9, 0x0f, 0x24, 0x00, 0xa9, 0x40, 0x24, 0x00, 0xa9, 0x80, 0x24, 0x00, 0xa9, 0xc0, 0x24, 0x00, 0xa9, 0xff, 0x24, 0x00); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_AND,"public void test_AND() throws MemoryAccessException { bus.write(0x0000, 0x00); bus.write(0x0001, 0x11); bus.write(0x0002, 0xff); bus.write(0x0003, 0x99); bus.write(0x0004, 0x11); bus.write(0x0005, 0x0f); bus.loadProgram(0x25, 0x00, 0x25, 0x01, 0xa9, 0xaa, 0x25, 0x02, 0x25, 0x03, 0x25, 0x04, 0xa9, 0xff, 0x25, 0x05); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.write(0x0000, 0x00); bus.write(0x0001, 0x01); bus.loadProgram(0x26, 0x00, 0x26, 0x01, 0x38, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01); cpu.step(); assertEquals(0x00, bus.read(0x0000)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x0001)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_EOR,"public void test_EOR() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0xff); bus.write(0x12, 0x33); bus.write(0x13, 0x44); bus.loadProgram(0xa9, 0x88, 0x45, 0x10, 0x45, 0x11, 0x45, 0x12, 0x45, 0x13); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.write(0x0000, 0x00); bus.write(0x0001, 0x01); bus.write(0x0002, 0x02); bus.write(0x0003, 0x44); bus.write(0x0004, 0x80); bus.write(0x0005, 0x02); bus.loadProgram(0x46, 0x00, 0x46, 0x01, 0x46, 0x02, 0x46, 0x03, 0x46, 0x04, 0x38, 0x46, 0x05); cpu.step(); assertEquals(0x00, bus.read(0x0000)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x0001)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x0002)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0x0003)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x0004)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x0005)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_ADC,"public void test_ADC() throws MemoryAccessException { bus.write(0x10, 0x01); bus.write(0x11, 0xff); bus.loadProgram(0xa9, 0x00, 0x65, 0x10); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x65, 0x10); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x65, 0x10); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x65, 0x10); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x65, 0x11); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x65, 0x11); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x65, 0x11); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x65, 0x11); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() throws MemoryAccessException { bus.write(0x10, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x65, 0x10); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() throws MemoryAccessException { bus.write(0x10, 0x01); bus.write(0x11, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x65, 0x10); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x65, 0x10); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x65, 0x10); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x65, 0x10); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x65, 0x11); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x65, 0x11); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x65, 0x11); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x10); bus.loadProgram(0x66, 0x10, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x11)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setYRegister(0x00); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setAccumulator(0x00); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_STX,"public void test_STX() throws MemoryAccessException { cpu.setXRegister(0x00); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x0f); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x80); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_LDY,"public void test_LDY() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x0f); bus.write(0x12, 0x80); bus.loadProgram(0xa4, 0x10, 0xa4, 0x11, 0xa4, 0x12); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_LDA,"public void test_LDA() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x0f); bus.write(0x12, 0x80); bus.loadProgram(0xa5, 0x10, 0xa5, 0x11, 0xa5, 0x12); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_LDX,"public void test_LDX() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x0f); bus.write(0x12, 0x80); bus.loadProgram(0xa6, 0x10, 0xa6, 0x11, 0xa6, 0x12); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_CPY,"public void test_CPY() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x80); bus.write(0x12, 0xff); cpu.setYRegister(0x80); bus.loadProgram(0xc4, 0x10, 0xc4, 0x11, 0xc4, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x80); bus.write(0x12, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xc5, 0x10, 0xc5, 0x11, 0xc5, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_DEC,"public void test_DEC() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x01); bus.write(0x12, 0x80); bus.write(0x13, 0xff); bus.loadProgram(0xc6, 0x10, 0xc6, 0x11, 0xc6, 0x12, 0xc6, 0x13); cpu.step(); assertEquals(0xff, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x11)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0x12)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0x13)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_CPX,"public void test_CPX() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x80); bus.write(0x12, 0xff); cpu.setXRegister(0x80); bus.loadProgram(0xe4, 0x10, 0xe4, 0x11, 0xe4, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_SBC,"public void test_SBC() throws MemoryAccessException { bus.write(0x10, 0x01); bus.loadProgram(0xa9, 0x00, 0xe5, 0x10); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xe5, 0x10); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xe5, 0x10); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xe5, 0x10); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xe5, 0x10); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() throws MemoryAccessException { bus.write(0x10, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xe5, 0x10); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xe5, 0x10); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xe5, 0x10); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xe5, 0x10); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() throws MemoryAccessException { bus.write(0x10, 0x01); bus.write(0x20, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xe5, 0x10); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xe5, 0x10); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xe5, 0x10); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xe5, 0x10); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xe5, 0x20); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xe5, 0x10); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xe5, 0x10); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageModeTest.java,test_INC,"public void test_INC() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x7f); bus.write(0x12, 0xff); bus.loadProgram(0xe6, 0x10, 0xe6, 0x11, 0xe6, 0x12); cpu.step(); assertEquals(0x01, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0x11)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x12)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_ORA,"public void test_ORA() throws MemoryAccessException { bus.write(0x30, 0x00); bus.write(0x32, 0x11); bus.write(0x34, 0x22); bus.write(0x38, 0x44); bus.write(0x40, 0x88); bus.write(0x02, 0x88); cpu.setXRegister(0x30); bus.loadProgram(0x15, 0x00, 0x15, 0x02, 0x15, 0x04, 0x15, 0x08, 0x15, 0x10, 0xa9, 0x00, 0x15, 0xd2); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.write(0x30, 0x00); bus.write(0x31, 0x01); bus.write(0x32, 0x02); bus.write(0x33, 0x44); bus.write(0x34, 0x80); bus.write(0x02, 0x01); cpu.setXRegister(0x30); bus.loadProgram(0x16, 0x00, 0x16, 0x01, 0x16, 0x02, 0x16, 0x03, 0x16, 0x04, 0x16, 0xd2); cpu.step(); assertEquals(0x00, bus.read(0x30)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x31)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x32)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x33)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x34)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x02)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_AND,"public void test_AND() throws MemoryAccessException { bus.write(0x30, 0x00); bus.write(0x31, 0x11); bus.write(0x32, 0xff); bus.write(0x33, 0x99); bus.write(0x34, 0x11); bus.write(0x35, 0x0f); bus.write(0x02, 0x11); cpu.setXRegister(0x30); bus.loadProgram(0x35, 0x00, 0x35, 0x01, 0xa9, 0xaa, 0x35, 0x02, 0x35, 0x03, 0x35, 0x04, 0xa9, 0xff, 0x35, 0x05, 0xa9, 0x01, 0x35, 0xd2); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.write(0x70, 0x00); bus.write(0x71, 0x01); cpu.setXRegister(0x70); bus.loadProgram(0x36, 0x00, 0x36, 0x01, 0x38, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01); cpu.step(); assertEquals(0x00, bus.read(0x70)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x71)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_EOR,"public void test_EOR() throws MemoryAccessException { bus.write(0x40, 0x00); bus.write(0x41, 0xff); bus.write(0x42, 0x33); bus.write(0x43, 0x44); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x88, 0x55, 0x10, 0x55, 0x11, 0x55, 0x12, 0x55, 0x13); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.write(0x30, 0x00); bus.write(0x31, 0x01); bus.write(0x32, 0x02); bus.write(0x33, 0x44); bus.write(0x34, 0x80); bus.write(0x35, 0x02); cpu.setXRegister(0x30); bus.loadProgram(0x56, 0x00, 0x56, 0x01, 0x56, 0x02, 0x56, 0x03, 0x56, 0x04, 0x38, 0x56, 0x05); cpu.step(); assertEquals(0x00, bus.read(0x30)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x31)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x32)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0x33)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x34)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x35)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_ADC,"public void test_ADC() throws MemoryAccessException { bus.write(0x40, 0x01); bus.write(0x41, 0xff); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x75, 0x10); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x75, 0x10); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x75, 0x10); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x75, 0x10); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x00, 0x75, 0x11); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0x75, 0x11); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0x75, 0x11); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0x75, 0x11); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_ADC_IncludesCarry,"public void test_ADC_IncludesCarry() throws MemoryAccessException { bus.write(0x40, 0x01); bus.loadProgram(0xa9, 0x00, 0x38, 0x75, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() throws MemoryAccessException { bus.write(0x40, 0x01); bus.write(0x41, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x75, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x75, 0x10); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x75, 0x10); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0x75, 0x10); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x00, 0x75, 0x11); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x49, 0x75, 0x11); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0x75, 0x11); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.write(0x40, 0x00); bus.write(0x41, 0x10); bus.loadProgram(0x76, 0x10, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11); cpu.setXRegister(0x30); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x41)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0x41)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setYRegister(0x00); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_LDY,"public void test_LDY() throws MemoryAccessException { bus.write(0x45, 0x00); bus.write(0x46, 0x0f); bus.write(0x47, 0x80); bus.loadProgram(0xb4, 0x10, 0xb4, 0x11, 0xb4, 0x12); cpu.setXRegister(0x35); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_LDA,"public void test_LDA() throws MemoryAccessException { bus.write(0x42, 0x00); bus.write(0x43, 0x0f); bus.write(0x44, 0x80); bus.loadProgram(0xb5, 0x10, 0xb5, 0x11, 0xb5, 0x12); cpu.setXRegister(0x32); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0x40, 0x00); bus.write(0x41, 0x80); bus.write(0x42, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xd5, 0x10, 0xd5, 0x11, 0xd5, 0x12); cpu.setXRegister(0x30); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_DEC,"public void test_DEC() throws MemoryAccessException { bus.write(0x40, 0x00); bus.write(0x41, 0x01); bus.write(0x42, 0x80); bus.write(0x43, 0xff); bus.loadProgram(0xd6, 0x10, 0xd6, 0x11, 0xd6, 0x12, 0xd6, 0x13); cpu.setXRegister(0x30); cpu.step(); assertEquals(0xff, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x41)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0x42)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0x43)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_SBC,"public void test_SBC() throws MemoryAccessException { bus.write(0x40, 0x01); bus.loadProgram(0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x7f, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x7d, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x80, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xff, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0xfd, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x02, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_SBC_IncludesNotOfCarry,"public void test_SBC_IncludesNotOfCarry() throws MemoryAccessException { bus.write(0x40, 0x01); bus.loadProgram(0x18, 0xa9, 0x05, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x03, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x18, 0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0xfe, cpu.getAccumulator()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x05, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); cpu.reset(); bus.loadProgram(0x38, 0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_SBC_DecimalMode,"public void test_SBC_DecimalMode() throws MemoryAccessException { bus.write(0x40, 0x01); bus.write(0x50, 0x11); bus.loadProgram(0xf8, 0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x99, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x97, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x50, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x02, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0xf8, 0xa9, 0x10, 0xf5, 0x20); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x98, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x05, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(4); assertEquals(0x04, cpu.getAccumulator()); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); cpu.reset(); bus.loadProgram(0x38, 0xf8, 0xa9, 0x00, 0xf5, 0x10); cpu.setXRegister(0x30); cpu.step(4); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageXModeTest.java,test_INC,"public void test_INC() throws MemoryAccessException { bus.write(0x30, 0x00); bus.write(0x31, 0x7f); bus.write(0x32, 0xff); cpu.setXRegister(0x20); bus.loadProgram(0xf6, 0x10, 0xf6, 0x11, 0xf6, 0x12); cpu.step(); assertEquals(0x01, bus.read(0x30)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0x31)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x32)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageYModeTest.java,test_STX,"public void test_STX() throws MemoryAccessException { cpu.setYRegister(0x30); cpu.setXRegister(0x00); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setXRegister(0x0f); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setXRegister(0x80); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
ac88786df72b1461a2960cecf8fc8251bae9cfa8,CpuZeroPageYModeTest.java,test_LDX,"public void test_LDX() throws MemoryAccessException { bus.write(0x40, 0x00); bus.write(0x41, 0x0f); bus.write(0x42, 0x80); bus.loadProgram(0xb6, 0x10, 0xb6, 0x11, 0xb6, 0x12); cpu.setYRegister(0x30); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/ac88786df72b1461a2960cecf8fc8251bae9cfa8
d858a50f1baba0ea4b34f6eea7618e0399b48fb8,Cpu.java,step,"public void step() throws MemoryAccessException { addr = pc; ir = bus.read(pc); irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize-1; i++) { args[i] = bus.read(pc); incrementPC(); } effectiveAddress = 0xffffff; effectiveData = -1; switch(irOpMode) { case 0: case 2: switch(irAddressMode) { case 0: effectiveAddress = -1; effectiveData = args[0]; break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(args[0]); } else { effectiveAddress = zpxAddress(args[0]); } effectiveData = bus.read(effectiveAddress); break; case 7: if (ir == 0xbe) { effectiveAddress = yAddress(args[0], args[1]); } else { effectiveAddress = xAddress(args[0], args[1]); } effectiveData = bus.read(effectiveAddress); break; } break; case 1: switch(irAddressMode) { case 0: effectiveAddress = bus.read(zpxAddress(args[0])); effectiveData = bus.read(effectiveAddress); break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: effectiveAddress = -1; effectiveData = args[0]; break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 4: effectiveAddress = yAddress(bus.read(args[0]), getYRegister()); effectiveData = bus.read(effectiveAddress); break; case 5: effectiveAddress = zpxAddress(args[0]); effectiveData = bus.read(effectiveAddress); break; case 6: effectiveAddress = yAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 7: effectiveAddress = xAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; } break; } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(args[0], args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(args[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(args[0], args[1]); break; case 0x6c: lo = address(args[0], args[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x01: case 0x05: case 0x09: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= effectiveData; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = a & effectiveData; setZeroFlag(tmp == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x21: case 0x25: case 0x29: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: a &= effectiveData; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x41: case 0x45: case 0x49: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= effectiveData; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x61: case 0x65: case 0x69: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, effectiveData); } else { a = adc(a, effectiveData); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); setArithmeticFlags(a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, y); setArithmeticFlags(y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, x); setArithmeticFlags(x); break; case 0xa0: case 0xa4: case 0xac: case 0xb4: case 0xbc: y = effectiveData; setArithmeticFlags(y); break; case 0xa2: case 0xa6: case 0xae: case 0xb6: case 0xbe: x = effectiveData; setArithmeticFlags(x); break; case 0xa1: case 0xa5: case 0xa9: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = effectiveData; setArithmeticFlags(a); break; case 0xc0: case 0xc4: case 0xcc: cmp(y, effectiveData); break; case 0xc1: case 0xc5: case 0xc9: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, effectiveData); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = --effectiveData & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: case 0xe4: case 0xec: cmp(x, effectiveData); break; case 0xe1: case 0xe5: case 0xe9: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, effectiveData); } else { a = sbc(a, effectiveData); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = ++effectiveData & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/d858a50f1baba0ea4b34f6eea7618e0399b48fb8
f174f0312fe0c5ae33113ef23b7613221de27f2b,Cpu.java,step,"public void step() throws MemoryAccessException { addr = pc; ir = bus.read(pc); irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize-1; i++) { args[i] = bus.read(pc); incrementPC(); } effectiveAddress = 0xffffff; effectiveData = -1; switch(irOpMode) { case 0: case 2: switch(irAddressMode) { case 0: effectiveAddress = -1; effectiveData = args[0]; break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(args[0]); } else { effectiveAddress = zpxAddress(args[0]); } effectiveData = bus.read(effectiveAddress); break; case 7: if (ir == 0xbe) { effectiveAddress = yAddress(args[0], args[1]); } else { effectiveAddress = xAddress(args[0], args[1]); } effectiveData = bus.read(effectiveAddress); break; } break; case 1: switch(irAddressMode) { case 0: tmp = args[0] + getXRegister(); effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); effectiveData = bus.read(effectiveAddress); break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: effectiveAddress = -1; effectiveData = args[0]; break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 4: tmp = address(bus.read(args[0]), bus.read((args[0]+1)&0xff)); effectiveAddress = (tmp + getYRegister())&0xffff; effectiveData = bus.read(effectiveAddress); break; case 5: effectiveAddress = zpxAddress(args[0]); effectiveData = bus.read(effectiveAddress); break; case 6: effectiveAddress = yAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 7: effectiveAddress = xAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; } break; } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(args[0], args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(args[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(args[0], args[1]); break; case 0x6c: lo = address(args[0], args[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x01: case 0x05: case 0x09: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= effectiveData; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = a & effectiveData; setZeroFlag(tmp == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x21: case 0x25: case 0x29: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: a &= effectiveData; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x41: case 0x45: case 0x49: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= effectiveData; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x61: case 0x65: case 0x69: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, effectiveData); } else { a = adc(a, effectiveData); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); setArithmeticFlags(a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, y); setArithmeticFlags(y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, x); setArithmeticFlags(x); break; case 0xa0: case 0xa4: case 0xac: case 0xb4: case 0xbc: y = effectiveData; setArithmeticFlags(y); break; case 0xa2: case 0xa6: case 0xae: case 0xb6: case 0xbe: x = effectiveData; setArithmeticFlags(x); break; case 0xa1: case 0xa5: case 0xa9: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = effectiveData; setArithmeticFlags(a); break; case 0xc0: case 0xc4: case 0xcc: cmp(y, effectiveData); break; case 0xc1: case 0xc5: case 0xc9: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, effectiveData); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = --effectiveData & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: case 0xe4: case 0xec: cmp(x, effectiveData); break; case 0xe1: case 0xe5: case 0xe9: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, effectiveData); } else { a = sbc(a, effectiveData); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = ++effectiveData & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
f174f0312fe0c5ae33113ef23b7613221de27f2b,Cpu.java,address,"int address(int lowByte, int hiByte) { return ((hiByte<<8)|lowByte) & 0xffff; }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
f174f0312fe0c5ae33113ef23b7613221de27f2b,Cpu.java,opcode,"String opcode(int opcode, int op1, int op2) { String opcodeName = Cpu.opcodeNames[opcode]; if (opcodeName == null) { return ""???""; } StringBuffer sb = new StringBuffer(opcodeName); switch (Cpu.instructionModes[opcode]) { case ABS: sb.append(String.format("" $%04X"", address(op1, op2))); break; case ABX: sb.append(String.format("" $%04X,X"", address(op1, op2))); break; case ABY: sb.append(String.format("" $%04X,Y"", address(op1, op2))); break; case IMM: sb.append(String.format("" #$%02X"", op1)); break; case IND: sb.append(String.format("" ($%04X)"", address(op1, op2))); break; case XIN: sb.append(String.format("" ($%02X),X"", op1)); break; case INY: sb.append(String.format("" ($%02X,Y)"", op1)); break; case REL: case ZPG: sb.append(String.format("" $%02X"", op1)); break; case ZPX: sb.append(String.format("" $%02X,X"", op1)); break; case ZPY: sb.append(String.format("" $%02X,Y"", op1)); break; } return sb.toString(); }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
f174f0312fe0c5ae33113ef23b7613221de27f2b,CpuIndexedIndirectModeTest.java,runBeforeEveryTest,"public void runBeforeEveryTest() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Cpu.DEFAULT_BASE_ADDRESS & 0x00ff); bus.write(0xfffd, (Cpu.DEFAULT_BASE_ADDRESS & 0xff00)>>>8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
f174f0312fe0c5ae33113ef23b7613221de27f2b,CpuIndexedIndirectModeTest.java,test_LDA,"public void test_LDA() throws Exception { bus.write(0x008c, 0x3f); bus.write(0x008d, 0xc4); bus.write(0xc43f, 0x45); cpu.setXRegister(0x0c); bus.loadProgram(0xa1, 0x80); cpu.step(1); assertEquals(0x45, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
f174f0312fe0c5ae33113ef23b7613221de27f2b,CpuIndexedIndirectModeTest.java,test_ORA,"public void test_ORA() throws Exception { bus.write(0x0012, 0x1f); bus.write(0x0013, 0xc5); bus.write(0xc51f, 0x31); cpu.setXRegister(0x02); cpu.setAccumulator(0x15); bus.loadProgram(0x01, 0x10); cpu.step(1); assertEquals(0x35, cpu.getAccumulator()); assertEquals(0x31, bus.read(0xc51f)); }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
f174f0312fe0c5ae33113ef23b7613221de27f2b,CpuIndexedIndirectModeTest.java,test_AND,"public void test_AND() throws Exception { bus.write(0x0012, 0x1f); bus.write(0x0013, 0xc5); bus.write(0xc51f, 0x31); cpu.setXRegister(0x02); cpu.setAccumulator(0x15); bus.loadProgram(0x21, 0x10); cpu.step(1); assertEquals(0x11, cpu.getAccumulator()); assertEquals(0x31, bus.read(0xc51f)); }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
f174f0312fe0c5ae33113ef23b7613221de27f2b,CpuIndirectIndexedModeTest.java,test_LDA,"public void test_LDA() throws Exception { assertEquals(cpu.toString(), 0x00, cpu.getAccumulator()); bus.write(0x0014, 0x00); bus.write(0x0015, 0xd8); bus.write(0xd828, 0x03); cpu.setYRegister(0x28); bus.loadProgram(0xb1, 0x14); cpu.step(1); assertEquals(0x03, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
f174f0312fe0c5ae33113ef23b7613221de27f2b,CpuIndirectIndexedModeTest.java,test_ORA,"public void test_ORA() throws Exception { bus.write(0x0014, 0x00); bus.write(0x0015, 0xd8); bus.write(0xd828, 0xe3); cpu.setYRegister(0x28); cpu.setAccumulator(0x32); bus.loadProgram(0x11, 0x14); cpu.step(1); assertEquals(0xf3, cpu.getAccumulator()); assertEquals(0xe3, bus.read(0xd828)); }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
f174f0312fe0c5ae33113ef23b7613221de27f2b,CpuIndirectIndexedModeTest.java,test_AND,"public void test_AND() throws Exception { bus.write(0x0014, 0x00); bus.write(0x0015, 0xd8); bus.write(0xd828, 0xe3); cpu.setYRegister(0x28); cpu.setAccumulator(0x32); bus.loadProgram(0x31, 0x14); cpu.step(1); assertEquals(0x22, cpu.getAccumulator()); assertEquals(0xe3, bus.read(0xd828)); }",https://www.github.com/sethm/symon/commit/f174f0312fe0c5ae33113ef23b7613221de27f2b
5c7a98df8647c6df1f70b19ec4401efa625aa501,CommandParser.java,run,"public void run() throws MemoryAccessException { try { String command = null; greeting(); prompt(); while (!shouldQuit(command = readLine())) { dispatch(command); prompt(); } writeLine(""\n\nGoodbye!""); } catch (IOException ex) { System.err.println(""Error: "" + ex.toString()); System.exit(1); } }",https://www.github.com/sethm/symon/commit/5c7a98df8647c6df1f70b19ec4401efa625aa501
5c7a98df8647c6df1f70b19ec4401efa625aa501,CommandParser.java,dispatch,public void dispatch(String command),https://www.github.com/sethm/symon/commit/5c7a98df8647c6df1f70b19ec4401efa625aa501
5c7a98df8647c6df1f70b19ec4401efa625aa501,Cpu.java,step,"public void step() throws MemoryAccessException { addr = pc; ir = bus.read(pc); irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize-1; i++) { args[i] = bus.read(pc); incrementPC(); } effectiveAddress = 0xffffff; effectiveData = -1; switch(irOpMode) { case 0: case 2: switch(irAddressMode) { case 0: effectiveData = args[0]; break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(args[0]); } else { effectiveAddress = zpxAddress(args[0]); } effectiveData = bus.read(effectiveAddress); break; case 7: if (ir == 0xbe) { effectiveAddress = yAddress(args[0], args[1]); } else { effectiveAddress = xAddress(args[0], args[1]); } effectiveData = bus.read(effectiveAddress); break; } break; case 1: switch(irAddressMode) { case 0: tmp = args[0] + getXRegister(); effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); effectiveData = bus.read(effectiveAddress); break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: effectiveAddress = -1; effectiveData = args[0]; break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 4: tmp = address(bus.read(args[0]), bus.read((args[0]+1)&0xff)); effectiveAddress = (tmp + getYRegister())&0xffff; effectiveData = bus.read(effectiveAddress); break; case 5: effectiveAddress = zpxAddress(args[0]); effectiveData = bus.read(effectiveAddress); break; case 6: effectiveAddress = yAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 7: effectiveAddress = xAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; } break; } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(args[0], args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(args[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(args[0], args[1]); break; case 0x6c: lo = address(args[0], args[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x01: case 0x05: case 0x09: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= effectiveData; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = a & effectiveData; setZeroFlag(tmp == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x21: case 0x25: case 0x29: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: a &= effectiveData; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x41: case 0x45: case 0x49: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= effectiveData; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x61: case 0x65: case 0x69: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, effectiveData); } else { a = adc(a, effectiveData); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); setArithmeticFlags(a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, y); setArithmeticFlags(y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, x); setArithmeticFlags(x); break; case 0xa0: case 0xa4: case 0xac: case 0xb4: case 0xbc: y = effectiveData; setArithmeticFlags(y); break; case 0xa2: case 0xa6: case 0xae: case 0xb6: case 0xbe: x = effectiveData; setArithmeticFlags(x); break; case 0xa1: case 0xa5: case 0xa9: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = effectiveData; setArithmeticFlags(a); break; case 0xc0: case 0xc4: case 0xcc: cmp(y, effectiveData); break; case 0xc1: case 0xc5: case 0xc9: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, effectiveData); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = --effectiveData & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: case 0xe4: case 0xec: cmp(x, effectiveData); break; case 0xe1: case 0xe5: case 0xe9: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, effectiveData); } else { a = sbc(a, effectiveData); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = ++effectiveData & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/5c7a98df8647c6df1f70b19ec4401efa625aa501
5c7a98df8647c6df1f70b19ec4401efa625aa501,Cpu.java,setResetVector,"void setResetVector(int address) throws MemoryAccessException { bus.write(RST_VECTOR_H, (address&0xff00)>>>8); bus.write(RST_VECTOR_L, address&0x00ff); }",https://www.github.com/sethm/symon/commit/5c7a98df8647c6df1f70b19ec4401efa625aa501
5c7a98df8647c6df1f70b19ec4401efa625aa501,Simulator.java,getState,public String getState() throws MemoryAccessException { return cpu.toString(); },https://www.github.com/sethm/symon/commit/5c7a98df8647c6df1f70b19ec4401efa625aa501
5c7a98df8647c6df1f70b19ec4401efa625aa501,Simulator.java,run,public void run() throws MemoryAccessException { parser.run(); },https://www.github.com/sethm/symon/commit/5c7a98df8647c6df1f70b19ec4401efa625aa501
5c7a98df8647c6df1f70b19ec4401efa625aa501,Simulator.java,load,"public void load(int address, int[] program)",https://www.github.com/sethm/symon/commit/5c7a98df8647c6df1f70b19ec4401efa625aa501
5c7a98df8647c6df1f70b19ec4401efa625aa501,Simulator.java,runTest,"public void runTest() throws MemoryAccessException { int[] zpData = { 0x39, 0x21, 0x12 }; int[] data = { 0xae, 0x13, 0x29 }; int[] program = { 0xa9, 0xff, 0xa0, 0x1a, 0xa2, 0x90, 0xa2, 0x02, 0x49, 0xff, 0xa9, 0x00, 0xa2, 0x00, 0x29, 0xff, 0xa0, 0x00, 0xa5, 0x00, 0xad, 0x00, 0xc8, 0x4c, 0x00, 0x03 }; int programLength = 12; load(0x0000, zpData); load(0x0300, program); load(0xc800, data); cpu.setResetVector(0x0300); cpu.reset(); for (int i = 0; i <= programLength; i++) { cpu.step(); System.out.println(cpu.toString()); } }",https://www.github.com/sethm/symon/commit/5c7a98df8647c6df1f70b19ec4401efa625aa501
5c7a98df8647c6df1f70b19ec4401efa625aa501,Simulator.java,main,"public static void main(String[] args) throws MemoryAccessException { try { new Simulator().run(); } catch (MemoryRangeException ex) { System.err.println(""Error: "" + ex.toString()); } }",https://www.github.com/sethm/symon/commit/5c7a98df8647c6df1f70b19ec4401efa625aa501
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,run,"public void run() throws MemoryAccessException { try { greeting(); prompt(); String command = null; while (!shouldQuit(command = readLine())) { try { dispatch(command); } catch (CommandFormatException ex) { writeLine(ex.getMessage()); } prompt(); } writeLine(""\n\nGoodbye!""); } catch (IOException ex) { System.err.println(""Error: "" + ex.toString()); System.exit(1); } }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,dispatch,public void dispatch(String commandLine),https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,doHelp,"public void doHelp(Command c) throws IOException { writeLine(""Symon 6502 Simulator""); writeLine(""""); writeLine(""All addresses must be in hexadecimal. Commands may be short or""); writeLine(""long (e.g. 'e' or 'ex' or 'examine'). Note that 'go' clears the""); writeLine(""Break processor status flag""); writeLine(""""); writeLine(""g [address [steps]] Start running at address.""); writeLine(""e [start [end]] Examine memory.""); writeLine(""d [address] [data] Deposit data into address.""); writeLine(""f [start] [end] [data] Fill memory with data.""); writeLine(""r Reset simulator.""); writeLine(""s Show CPU state.""); writeLine(""t Toggle trace.""); writeLine(""q (or Control-D) Quit.""); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,doGetState,"public void doGetState() throws IOException, MemoryAccessException { writeLine(cpu.toString()); writeLine(""Trace is "" + (trace ? ""on"" : ""off"")); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,doExamine,"public void doExamine(Command c) throws IOException, MemoryAccessException, CommandFormatException { try { if (c.numArgs() == 2) { int startAddress = stringToWord(c.getArgs()[0]); int endAddress = stringToWord(c.getArgs()[1]); while (startAddress < endAddress) { StringBuffer line = new StringBuffer(); int numBytes = 0; line.append(String.format(""%04x "", startAddress)); while (numBytes++ < 8 && startAddress <= endAddress) { line.append(String.format(""%02x "", bus.read(startAddress++))); } writeLine(line.toString()); } } else if (c.numArgs() == 1) { int address = stringToWord(c.getArgs()[0]); writeLine(String.format(""%04x %02x"", address, bus.read(address))); } else { throw new CommandFormatException(""e [start [end]]""); } } catch (NumberFormatException ex) { throw new CommandFormatException(""Address not understood""); } }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,doDeposit,"public void doDeposit(Command c) throws MemoryAccessException, CommandFormatException { if (c.numArgs() != 2) { throw new CommandFormatException(""d [address] [data]""); } try { int address = stringToWord(c.getArg(0)); int data = stringToByte(c.getArg(1)); bus.write(address, data); } catch (NumberFormatException ex) { throw new CommandFormatException(""Address not understood""); } }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,doFill,"public void doFill(Command c) throws MemoryAccessException, CommandFormatException { if (c.numArgs() != 3) { throw new CommandFormatException(""f [start] [end] [data]""); } try { int start = stringToWord(c.getArg(0)); int end = stringToWord(c.getArg(1)); int data = stringToByte(c.getArg(2)); while (start < end) { bus.write(start, data); start++; } } catch (NumberFormatException ex) { throw new CommandFormatException(""Address not understood""); } }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,doGo,"public void doGo(Command c) throws IOException, MemoryAccessException, CommandFormatException { if (c.numArgs() != 1 && c.numArgs() != 2) { throw new CommandFormatException(""g [address [steps]]""); } try { int start = stringToWord(c.getArg(0)); int steps = -1; if (c.numArgs() == 2) { steps = stringToWord(c.getArg(1)); } cpu.clearBreakFlag(); cpu.clearIrqDisableFlag(); cpu.setProgramCounter(start); while (!cpu.getBreakFlag() && (steps == -1 || steps-- > 0)) { cpu.step(); if (trace) { writeLine(cpu.toString()); } } if (!trace) { writeLine(cpu.toString()); } } catch (NumberFormatException ex) { throw new CommandFormatException(""Address not understood""); } }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,doToggleTrace,"public void doToggleTrace() throws IOException { this.trace = !trace; writeLine(""Trace is now "" + (trace ? ""on"" : ""off"")); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,doReset,public void doReset() throws MemoryAccessException { cpu.reset(); this.trace = false; },https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,doTest,"public void doTest() throws MemoryAccessException { int[] zpData = { 0x39, 0x21, 0x12 }; int[] data = { 0xae, 0x13, 0x29 }; int[] program = { 0xa9, 0xff, 0xa0, 0x1a, 0xa2, 0x90, 0xa2, 0x02, 0x49, 0xff, 0xa9, 0x00, 0xa2, 0x00, 0x29, 0xff, 0xa0, 0x00, 0xa5, 0x00, 0xad, 0x00, 0xc8, 0x4c, 0x00, 0x03 }; int programLength = 12; load(0x0000, zpData); load(0x0300, program); load(0xc800, data); cpu.setResetVector(0x0300); cpu.reset(); for (int i = 0; i <= programLength; i++) { cpu.step(); System.out.println(cpu.toString()); } }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,load,"public void load(int address, int[] data)",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,stringToWord,"private int stringToWord(String addrString) { return Integer.parseInt(addrString, 16) & 0xffff; }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,stringToByte,"private int stringToByte(String dataString) { return Integer.parseInt(dataString, 16) & 0xff; }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,greeting,"private void greeting() throws IOException { writeLine(""Welcome to the Symon Simulator!""); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,prompt,"private void prompt() throws IOException { out.write(""symon> ""); out.flush(); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,getCommand,public String getCommand() { return command; },https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,getArgs,public String[] getArgs() { return args; },https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,getArg,public String getArg(int argNum) { if (argNum > args.length - 1) { return null; } else { return args[argNum]; } },https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,numArgs,public int numArgs() { return args.length; },https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,Simulator.java,hasArgs,public boolean hasArgs() { return args.length > 0; },https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,CommandTest.java,testCommandShouldParseCorrectNumberOfArguments,"public void testCommandShouldParseCorrectNumberOfArguments() { Simulator.Command c; c = new Simulator.Command(""foo""); assertEquals(""foo"", c.getCommand()); assertEquals(0, c.numArgs()); c = new Simulator.Command(""foo bar""); assertEquals(""foo"", c.getCommand()); assertEquals(1, c.numArgs()); assertEquals(""bar"", c.getArgs()[0]); c = new Simulator.Command(""foo bar baz quux 0 100""); assertEquals(""foo"", c.getCommand()); assertEquals(5, c.numArgs()); assertEquals(""bar"", c.getArgs()[0]); assertEquals(""baz"", c.getArgs()[1]); assertEquals(""quux"", c.getArgs()[2]); assertEquals(""0"", c.getArgs()[3]); assertEquals(""100"", c.getArgs()[4]); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,CommandTest.java,testCommandShouldIgnoreWhitespaceBetweenTokens,"public void testCommandShouldIgnoreWhitespaceBetweenTokens() { Simulator.Command c; c = new Simulator.Command(""foo bar baz""); assertEquals(""foo"", c.getCommand()); assertEquals(2, c.numArgs()); assertEquals(""bar"", c.getArgs()[0]); assertEquals(""baz"", c.getArgs()[1]); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,CommandTest.java,testCommandShouldIgnoreWhitespaceBeforeCommand,"public void testCommandShouldIgnoreWhitespaceBeforeCommand() { Simulator.Command c; c = new Simulator.Command("" foo bar baz""); assertEquals(""foo"", c.getCommand()); assertEquals(2, c.numArgs()); assertEquals(""bar"", c.getArgs()[0]); assertEquals(""baz"", c.getArgs()[1]); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,CommandTest.java,testCommandShouldIgnoreWhitespaceAfterCommand,"public void testCommandShouldIgnoreWhitespaceAfterCommand() { Simulator.Command c; c = new Simulator.Command(""foo bar baz ""); assertEquals(""foo"", c.getCommand()); assertEquals(2, c.numArgs()); assertEquals(""bar"", c.getArgs()[0]); assertEquals(""baz"", c.getArgs()[1]); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,CpuAbsoluteXModeTest.java,test_AND,"public void test_AND() throws MemoryAccessException { bus.write(0x1a30, 0x00); bus.write(0x1a31, 0x11); bus.write(0x1a32, 0xff); bus.write(0x1a33, 0x99); bus.write(0x1a34, 0x11); bus.write(0x1a35, 0x0f); bus.write(0x1a02, 0x11); cpu.setXRegister(0x30); bus.loadProgram(0x3d, 0x00, 0x1a, 0x3d, 0x01, 0x1a, 0xa9, 0xaa, 0x3d, 0x02, 0x1a, 0x3d, 0x03, 0x1a, 0x3d, 0x04, 0x1a, 0xa9, 0xff, 0x3d, 0x05, 0x1a, 0xa9, 0x01, 0x3d, 0xd2, 0x19); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,CpuAbsoluteYModeTest.java,test_AND,"public void test_AND() throws MemoryAccessException { bus.write(0x1a30, 0x00); bus.write(0x1a31, 0x11); bus.write(0x1a32, 0xff); bus.write(0x1a33, 0x99); bus.write(0x1a34, 0x11); bus.write(0x1a35, 0x0f); bus.write(0x1a02, 0x11); cpu.setYRegister(0x30); bus.loadProgram(0x39, 0x00, 0x1a, 0x39, 0x01, 0x1a, 0xa9, 0xaa, 0x39, 0x02, 0x1a, 0x39, 0x03, 0x1a, 0x39, 0x04, 0x1a, 0xa9, 0xff, 0x39, 0x05, 0x1a, 0xa9, 0x01, 0x39, 0xd2, 0x19); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,CpuImpliedModeTest.java,test_BRK,"public void test_BRK() throws MemoryAccessException { cpu.setCarryFlag(); cpu.setOverflowFlag(); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW, cpu.getProcessorStatus()); assertEquals(0x00, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(Cpu.IRQ_VECTOR_H, 0x12); bus.write(Cpu.IRQ_VECTOR_L, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff)); assertEquals(0x06, bus.read(0x1fe)); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW|Cpu.P_BREAK, bus.read(0x1fd)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20|Cpu.P_CARRY|Cpu.P_OVERFLOW|Cpu.P_BREAK| Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,CpuTest.java,testStackPush,"public void testStackPush() throws MemoryAccessException { assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x00, bus.read(0x1ff)); cpu.stackPush(0x06); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); cpu.stackPush(0x05); assertEquals(0xfd, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); cpu.stackPush(0x04); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); cpu.stackPush(0x03); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); assertEquals(0x03, bus.read(0x1fc)); cpu.stackPush(0x02); assertEquals(0xfa, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); assertEquals(0x03, bus.read(0x1fc)); assertEquals(0x02, bus.read(0x1fb)); cpu.stackPush(0x01); assertEquals(0xf9, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x04, bus.read(0x1fd)); assertEquals(0x03, bus.read(0x1fc)); assertEquals(0x02, bus.read(0x1fb)); assertEquals(0x01, bus.read(0x1fa)); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
a3e57274a2c72b7d81cb8291002a45760157725b,CpuTest.java,testStackPeekDoesNotAlterStackPointer,"public void testStackPeekDoesNotAlterStackPointer() throws MemoryAccessException { assertEquals(0x00, cpu.stackPeek()); assertEquals(0xff, cpu.getStackPointer()); cpu.stackPush(0x01); assertEquals(0x01, cpu.stackPeek()); assertEquals(0xfe, cpu.getStackPointer()); cpu.stackPush(0x02); assertEquals(0x02, cpu.stackPeek()); assertEquals(0xfd, cpu.getStackPointer()); cpu.stackPush(0x03); assertEquals(0x03, cpu.stackPeek()); assertEquals(0xfc, cpu.getStackPointer()); cpu.stackPush(0x04); assertEquals(0x04, cpu.stackPeek()); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x04, cpu.stackPeek()); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x04, cpu.stackPeek()); assertEquals(0xfb, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/a3e57274a2c72b7d81cb8291002a45760157725b
e157f4a9727a96aff0159a47a833d53de2916ac3,Bus.java,read,"public int read(int address) throws MemoryAccessException { for (Device d : devices) { MemoryRange range = d.getMemoryRange(); if (range.includes(address)) { int devAddr = address - range.startAddress(); return d.read(devAddr); } } throw new MemoryAccessException(""Read failed! No device at address.""); }",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Bus.java,write,"public void write(int address, int value) throws MemoryAccessException { for (Device d : devices) { MemoryRange range = d.getMemoryRange(); if (range.includes(address)) { int devAddr = address - range.startAddress(); d.write(devAddr, value); return; } } throw new MemoryAccessException(""Write failed! No device at address.""); }",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Cpu.java,step,"public void step() throws MemoryAccessException { addr = pc; ir = bus.read(pc); irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize-1; i++) { args[i] = bus.read(pc); incrementPC(); } effectiveAddress = 0; effectiveData = 0; switch(irOpMode) { case 0: case 2: switch(irAddressMode) { case 0: effectiveData = args[0]; break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(args[0]); } else { effectiveAddress = zpxAddress(args[0]); } effectiveData = bus.read(effectiveAddress); break; case 7: if (ir == 0xbe) { effectiveAddress = yAddress(args[0], args[1]); } else { effectiveAddress = xAddress(args[0], args[1]); } effectiveData = bus.read(effectiveAddress); break; } break; case 1: switch(irAddressMode) { case 0: tmp = args[0] + getXRegister(); effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); effectiveData = bus.read(effectiveAddress); break; case 1: effectiveAddress = args[0]; effectiveData = bus.read(effectiveAddress); break; case 2: effectiveAddress = -1; effectiveData = args[0]; break; case 3: effectiveAddress = address(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 4: tmp = address(bus.read(args[0]), bus.read((args[0]+1)&0xff)); effectiveAddress = (tmp + getYRegister())&0xffff; effectiveData = bus.read(effectiveAddress); break; case 5: effectiveAddress = zpxAddress(args[0]); effectiveData = bus.read(effectiveAddress); break; case 6: effectiveAddress = yAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; case 7: effectiveAddress = xAddress(args[0], args[1]); effectiveData = bus.read(effectiveAddress); break; } break; } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(args[0], args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(args[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(args[0], args[1]); break; case 0x6c: lo = address(args[0], args[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x01: case 0x05: case 0x09: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= effectiveData; setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = a & effectiveData; setZeroFlag(tmp == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x21: case 0x25: case 0x29: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: a &= effectiveData; setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x41: case 0x45: case 0x49: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= effectiveData; setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x61: case 0x65: case 0x69: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, effectiveData); } else { a = adc(a, effectiveData); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(effectiveData); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); setArithmeticFlags(a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, y); setArithmeticFlags(y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, x); setArithmeticFlags(x); break; case 0xa0: case 0xa4: case 0xac: case 0xb4: case 0xbc: y = effectiveData; setArithmeticFlags(y); break; case 0xa2: case 0xa6: case 0xae: case 0xb6: case 0xbe: x = effectiveData; setArithmeticFlags(x); break; case 0xa1: case 0xa5: case 0xa9: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = effectiveData; setArithmeticFlags(a); break; case 0xc0: case 0xc4: case 0xcc: cmp(y, effectiveData); break; case 0xc1: case 0xc5: case 0xc9: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, effectiveData); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = --effectiveData & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: case 0xe4: case 0xec: cmp(x, effectiveData); break; case 0xe1: case 0xe5: case 0xe9: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, effectiveData); } else { a = sbc(a, effectiveData); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = ++effectiveData & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,run,"public void run() throws MemoryAccessException { try { greeting(); prompt(); String command = null; while (!shouldQuit(command = readLine())) { try { dispatch(command); } catch (CommandFormatException ex) { writeLine(ex.getMessage()); } prompt(); } writeLine(""\nGoodbye!""); } catch (IOException ex) { System.err.println(""Error: "" + ex.toString()); System.exit(1); } }",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,doHelp,"public void doHelp(Command c) throws IOException { writeLine(""Symon 6502 Simulator""); writeLine(""""); writeLine(""All addresses must be in hexadecimal.""); writeLine(""Commands may be short or long (e.g. 'e' or 'ex' or 'examine').""); writeLine(""Note that 'go' clears the BREAK processor status flag.""); writeLine(""""); writeLine(""g [address] [steps] Start running at address, or at PC""); writeLine(""e [start] [end] Examine memory at PC, or at start, "" + ""or from start to end""); writeLine(""d <address> <data> Deposit data into address.""); writeLine(""f <start> <end> <data> Fill memory with data.""); writeLine(""reset Reset simulator.""); writeLine(""set {pc,a,x,y} [data] Set register to data value.""); writeLine(""stat Show CPU state.""); writeLine(""step [address] Step once, optionally starting at "" + ""address""); writeLine(""trace Toggle trace.""); writeLine(""load <filename> Load binary file.""); writeLine(""q (or Control-D) Quit.""); }",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,doLoad,"public void doLoad(Command c) throws IOException, MemoryAccessException,",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,doSet,"public void doSet(Command c) throws MemoryAccessException,",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,doExamine,"public void doExamine(Command c) throws IOException, MemoryAccessException,",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,doDeposit,"public void doDeposit(Command c) throws MemoryAccessException,",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,doFill,"public void doFill(Command c) throws MemoryAccessException,",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,doStep,"public void doStep(Command c) throws IOException, MemoryAccessException,",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,doGo,"public void doGo(Command c) throws IOException, MemoryAccessException,",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
e157f4a9727a96aff0159a47a833d53de2916ac3,Simulator.java,greeting,"private void greeting() throws IOException { writeLine(""Welcome to the Symon 6502 Simulator. Type 'help' for help.""); }",https://www.github.com/sethm/symon/commit/e157f4a9727a96aff0159a47a833d53de2916ac3
596d05e3983e25546f3d4d4d9f974f77157c7d5e,Simulator.java,doHelp,"public void doHelp(Command c) throws IOException { writeLine(""Symon 6502 Simulator""); writeLine(""""); writeLine(""All addresses must be in hexadecimal.""); writeLine(""Commands may be short or long (e.g. 'e' or 'ex' or 'examine').""); writeLine(""Note that 'go' clears the BREAK processor status flag.""); writeLine(""""); writeLine(""h Show this help file.""); writeLine(""g [address] [steps] Start running at address, or at PC.""); writeLine(""e [start] [end] Examine memory at PC, start, or start-end.""); writeLine(""d <address> <data> Deposit data into address.""); writeLine(""f <start> <end> <data> Fill memory with data.""); writeLine(""reset Reset simulator.""); writeLine(""set {pc,a,x,y} [data] Set register to data value.""); writeLine(""stat Show CPU state.""); writeLine(""step [address] Step once, optionally starting at address.""); writeLine(""trace Toggle trace.""); writeLine(""load <file> <address> Load binary file at address.""); writeLine(""q (or Control-D) Quit.\n""); }",https://www.github.com/sethm/symon/commit/596d05e3983e25546f3d4d4d9f974f77157c7d5e
596d05e3983e25546f3d4d4d9f974f77157c7d5e,Simulator.java,greeting,"private void greeting() throws IOException { writeLine(""Welcome to the Symon 6502 Simulator. Type 'h' for help.""); }",https://www.github.com/sethm/symon/commit/596d05e3983e25546f3d4d4d9f974f77157c7d5e
00ab8cd9ffa1c982036720cbbe61730e1053588d,Cpu.java,step,"public void step() throws MemoryAccessException { addr = pc; ir = bus.read(pc); irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize-1; i++) { args[i] = bus.read(pc); incrementPC(); } effectiveAddress = 0; switch(irOpMode) { case 0: case 2: switch(irAddressMode) { case 0: break; case 1: effectiveAddress = args[0]; break; case 2: break; case 3: effectiveAddress = address(args[0], args[1]); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(args[0]); } else { effectiveAddress = zpxAddress(args[0]); } break; case 7: if (ir == 0xbe) { effectiveAddress = yAddress(args[0], args[1]); } else { effectiveAddress = xAddress(args[0], args[1]); } break; } break; case 1: switch(irAddressMode) { case 0: tmp = args[0] + getXRegister(); effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(args[0], args[1]); break; case 4: tmp = address(bus.read(args[0]), bus.read((args[0]+1)&0xff)); effectiveAddress = (tmp + getYRegister())&0xffff; break; case 5: effectiveAddress = zpxAddress(args[0]); break; case 6: effectiveAddress = yAddress(args[0], args[1]); break; case 7: effectiveAddress = xAddress(args[0], args[1]); break; } break; } switch(ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc+2 >> 8) & 0xff); stackPush(pc+2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc-1 >> 8) & 0xff); stackPush(pc-1 & 0xff); pc = address(args[0], args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(args[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(args[0], args[1]); break; case 0x6c: lo = address(args[0], args[1]); hi = lo+1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: a |= args[0]; setArithmeticFlags(a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = a & bus.read(effectiveAddress); setZeroFlag(tmp == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: a &= args[0]; setArithmeticFlags(a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: a &= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: a ^= args[0]; setArithmeticFlags(a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, args[0]); } else { a = adc(a, args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, bus.read(effectiveAddress)); } else { a = adc(a, bus.read(effectiveAddress)); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); setArithmeticFlags(a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, y); setArithmeticFlags(y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, x); setArithmeticFlags(x); break; case 0xa0: y = args[0]; setArithmeticFlags(y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: y = bus.read(effectiveAddress); setArithmeticFlags(y); break; case 0xa2: x = args[0]; setArithmeticFlags(x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: x = bus.read(effectiveAddress); setArithmeticFlags(x); break; case 0xa9: a = args[0]; setArithmeticFlags(a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0xc0: cmp(y, args[0]); break; case 0xc4: case 0xcc: cmp(y, bus.read(effectiveAddress)); break; case 0xc9: cmp(a, args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(x, args[0]); break; case 0xe4: case 0xec: cmp(x, bus.read(effectiveAddress)); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, args[0]); } else { a = sbc(a, args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, bus.read(effectiveAddress)); } else { a = sbc(a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Simulator.java,run,"public void run() throws MemoryAccessException, FifoUnderrunException { try { greeting(); prompt(); String command = null; while (!shouldQuit(command = readLine())) { try { dispatch(command); } catch (CommandFormatException ex) { writeLine(ex.getMessage()); } prompt(); } writeLine(""\nGoodbye!""); } catch (IOException ex) { System.err.println(""Error: "" + ex.toString()); System.exit(1); } }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Simulator.java,dispatch,"public void dispatch(String commandLine) throws MemoryAccessException,",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Simulator.java,doHelp,"public void doHelp(Command c) throws IOException { writeLine(""Symon 6502 Simulator""); writeLine(""""); writeLine(""All addresses must be in hexadecimal.""); writeLine(""Commands may be short or long (e.g. 'e' or 'ex' or 'examine').""); writeLine(""Note that 'go' clears the BREAK processor status flag.""); writeLine(""""); writeLine(""h Show this help file.""); writeLine(""e [start] [end] Examine memory at PC, start, or start-end.""); writeLine(""d <address> <data> Deposit data into address.""); writeLine(""f <start> <end> <data> Fill memory with data.""); writeLine(""set {pc,a,x,y} [data] Set register to data value.""); writeLine(""load <file> <address> Load binary file at address.""); writeLine(""g [address] [steps] Start running at address, or at PC.""); writeLine(""step [address] Step once, optionally starting at address.""); writeLine(""stat Show CPU state.""); writeLine(""reset Reset simulator.""); writeLine(""trace Toggle trace.""); writeLine(""q (or Control-D) Quit.\n""); }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Simulator.java,doLoad,"public void doLoad(Command c) throws IOException,",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Simulator.java,doExamine,"public void doExamine(Command c) throws IOException,",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Simulator.java,doStep,"public void doStep(Command c) throws IOException,",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Simulator.java,doGo,"public void doGo(Command c) throws IOException,",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Simulator.java,main,"public static void main(String[] args) throws MemoryAccessException,",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,read,"public int read(int address) throws MemoryAccessException { switch (address) { case DATA_REG: try { return rxRead(); } catch (FifoUnderrunException ex) { throw new MemoryAccessException(""Buffer underrun""); } case STAT_REG: return ((rxBuffer.isEmpty() ? 0x00 : 0x08) | (txBuffer.isEmpty() ? 0x10 : 0x00)); case CMND_REG: return commandRegister; case CTRL_REG: return controlRegister; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case 0: txWrite(data); break; case 1: reset(); break; case 2: commandRegister = data; break; case 3: controlRegister = data; break; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,toString,"public String toString() { return ""ACIA@"" + String.format(""%04X"", baseAddress); }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,rxRead,public int rxRead() throws FifoUnderrunException { return rxBuffer.pop(); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,rxWrite,public void rxWrite(int data) { rxBuffer.push(data); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,txRead,public int txRead() throws FifoUnderrunException { return txBuffer.pop(); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,txWrite,public void txWrite(int data) { txBuffer.push(data); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,hasTxChar,public boolean hasTxChar() { return !txBuffer.isEmpty(); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,hasRxChar,public boolean hasRxChar() { return !rxBuffer.isEmpty(); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,Acia.java,reset,private void reset() { txBuffer.reset(); rxBuffer.reset(); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,FifoRingBuffer.java,peek,"public int peek() throws FifoUnderrunException { if (isEmpty()) { throw new FifoUnderrunException(""Buffer Underrun""); } return fifoBuffer[readPtr]; }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,FifoRingBuffer.java,pop,"public int pop() throws FifoUnderrunException { if (isEmpty()) { throw new FifoUnderrunException(""Buffer Underrun""); } int val = fifoBuffer[readPtr]; incrementReadPointer(); return val; }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,FifoRingBuffer.java,isEmpty,public boolean isEmpty() { return(readPtr == writePtr); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,FifoRingBuffer.java,isFull,public boolean isFull() { return((readPtr == 0 && writePtr == (size - 1)) || writePtr == (readPtr - 1)); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,FifoRingBuffer.java,push,public void push(int val) { fifoBuffer[writePtr] = val; incrementWritePointer(); },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,FifoRingBuffer.java,reset,public void reset() { readPtr = 0; writePtr = 0; },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,FifoRingBuffer.java,incrementWritePointer,private void incrementWritePointer() { if (++writePtr == size) { writePtr = 0; } if (writePtr == readPtr) { incrementReadPointer(); } },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,FifoRingBuffer.java,incrementReadPointer,private void incrementReadPointer() { if (++readPtr == size) { readPtr = 0; } },https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,FifoRingBuffer.java,toString,"public String toString() { return ""[FifoRingBuffer: size="" + size + ""]""; }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,AciaTest.java,newAciaShouldHaveTxEmptyStatus,"public void newAciaShouldHaveTxEmptyStatus() throws Exception { Acia acia = new Acia(0x000); assertEquals(0x10, acia.read(0x0001)); }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,AciaTest.java,aciaShouldHaveTxEmptyStatusOffIfTxHasData,"public void aciaShouldHaveTxEmptyStatusOffIfTxHasData() throws Exception { Acia acia = new Acia(0x000); acia.txWrite('a'); assertEquals(0x00, acia.read(0x0001)); }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,AciaTest.java,aciaShouldHaveRxFullStatusOffIfRxHasData,"public void aciaShouldHaveRxFullStatusOffIfRxHasData() throws Exception { Acia acia = new Acia(0x000); acia.rxWrite('a'); assertEquals(0x18, acia.read(0x0001)); }",https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,AciaTest.java,aciaShouldHaveTxEmptyAndRxFullStatusOffIfRxAndTxHaveData,public void aciaShouldHaveTxEmptyAndRxFullStatusOffIfRxAndTxHaveData(),https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,AciaTest.java,readingBuffersUntilEmptyShouldResetStatus,public void readingBuffersUntilEmptyShouldResetStatus(),https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,AciaTest.java,readingPastEmptyRxBufferShouldThrowException,public void readingPastEmptyRxBufferShouldThrowException(),https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
00ab8cd9ffa1c982036720cbbe61730e1053588d,AciaTest.java,readingPastEmptyTxBufferShouldThrowException,public void readingPastEmptyTxBufferShouldThrowException(),https://www.github.com/sethm/symon/commit/00ab8cd9ffa1c982036720cbbe61730e1053588d
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,reset,"public void reset() throws MemoryAccessException { sp = 0xff; pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); ir = 0; carryFlag = false; irqDisableFlag = false; decimalModeFlag = false; breakFlag = false; overflowFlag = false; opTrap = false; stepCounter = 0L; }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,step,"public void step() throws MemoryAccessException { addr = pc; ir = bus.read(pc); irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize - 1; i++) { args[i] = bus.read(pc); incrementPC(); } stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = args[0]; break; case 2: break; case 3: effectiveAddress = address(args[0], args[1]); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(args[0]); } else { effectiveAddress = zpxAddress(args[0]); } break; case 7: if (ir == 0xbe) { effectiveAddress = yAddress(args[0], args[1]); } else { effectiveAddress = xAddress(args[0], args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = args[0] + getXRegister(); effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(args[0], args[1]); break; case 4: tmp = address(bus.read(args[0]), bus.read((args[0] + 1) & 0xff)); effectiveAddress = (tmp + getYRegister()) & 0xffff; break; case 5: effectiveAddress = zpxAddress(args[0]); break; case 6: effectiveAddress = yAddress(args[0], args[1]); break; case 7: effectiveAddress = xAddress(args[0], args[1]); break; } break; } switch (ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc + 2 >> 8) & 0xff); stackPush(pc + 2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc - 1 >> 8) & 0xff); stackPush(pc - 1 & 0xff); pc = address(args[0], args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(args[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(args[0], args[1]); break; case 0x6c: lo = address(args[0], args[1]); hi = lo + 1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: a |= args[0]; setArithmeticFlags(a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = a & bus.read(effectiveAddress); setZeroFlag(tmp == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: a &= args[0]; setArithmeticFlags(a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: a &= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: a ^= args[0]; setArithmeticFlags(a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, args[0]); } else { a = adc(a, args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, bus.read(effectiveAddress)); } else { a = adc(a, bus.read(effectiveAddress)); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); setArithmeticFlags(a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, y); setArithmeticFlags(y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, x); setArithmeticFlags(x); break; case 0xa0: y = args[0]; setArithmeticFlags(y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: y = bus.read(effectiveAddress); setArithmeticFlags(y); break; case 0xa2: x = args[0]; setArithmeticFlags(x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: x = bus.read(effectiveAddress); setArithmeticFlags(x); break; case 0xa9: a = args[0]; setArithmeticFlags(a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0xc0: cmp(y, args[0]); break; case 0xc4: case 0xcc: cmp(y, bus.read(effectiveAddress)); break; case 0xc9: cmp(a, args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(x, args[0]); break; case 0xe4: case 0xec: cmp(x, bus.read(effectiveAddress)); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, args[0]); } else { a = sbc(a, args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, bus.read(effectiveAddress)); } else { a = sbc(a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,getInstructionRegister,public int getInstructionRegister() { return this.ir; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,setInstructionRegister,public void setInstructionRegister(int op) { this.ir = op; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,getStepCounter,public long getStepCounter() { return stepCounter; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,setStepCounter,public void setStepCounter(long stepCount) { this.stepCounter = stepCount; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,setProcessorStatus,public void setProcessorStatus(int value) { if ((value & P_CARRY) != 0) setCarryFlag(); else clearCarryFlag(); if ((value & P_ZERO) != 0) setZeroFlag(); else clearZeroFlag(); if ((value & P_IRQ_DISABLE) != 0) setIrqDisableFlag(); else clearIrqDisableFlag(); if ((value & P_DECIMAL) != 0) setDecimalModeFlag(); else clearDecimalModeFlag(); if ((value & P_BREAK) != 0) setBreakFlag(); else clearBreakFlag(); if ((value & P_OVERFLOW) != 0) setOverflowFlag(); else clearOverflowFlag(); if ((value & P_NEGATIVE) != 0) setNegativeFlag(); else clearNegativeFlag(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,getProcessorStatusString,"public String getProcessorStatusString() { StringBuffer sb = new StringBuffer(""[""); sb.append(getNegativeFlag() ? 'N' : '.'); sb.append(getOverflowFlag() ? 'V' : '.'); sb.append(""-""); sb.append(getBreakFlag() ? 'B' : '.'); sb.append(getDecimalModeFlag() ? 'D' : '.'); sb.append(getIrqDisableFlag() ? 'I' : '.'); sb.append(getZeroFlag() ? 'Z' : '.'); sb.append(getCarryFlag() ? 'C' : '.'); sb.append(""]""); return sb.toString(); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,getOpcodeStatus,"public String getOpcodeStatus() { return opcode(ir, args[0], args[1]); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,getAddressStatus,"public String getAddressStatus() { return String.format(""$%04X"", addr); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,getARegisterStatus,"public String getARegisterStatus() { return String.format(""$%02X"", a); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,getXRegisterStatus,"public String getXRegisterStatus() { return String.format(""$%02X"", x); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,getYRegisterStatus,"public String getYRegisterStatus() { return String.format(""$%02X"", y); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,getProgramCounterStatus,"public String getProgramCounterStatus() { return String.format(""$%04X"", pc); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,toString,"public String toString() { String opcode = opcode(ir, args[0], args[1]); StringBuffer sb = new StringBuffer(String.format(""$%04X"", addr) + "" ""); sb.append(String.format(""%-14s"", opcode)); sb.append(""A="" + String.format(""$%02X"", a) + "" ""); sb.append(""X="" + String.format(""$%02X"", x) + "" ""); sb.append(""Y="" + String.format(""$%02X"", y) + "" ""); sb.append(""PC="" + String.format(""$%04X"", pc) + "" ""); sb.append(""P="" + getProcessorStatusString()); return sb.toString(); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,stackPush,"void stackPush(int data) throws MemoryAccessException { bus.write(0x100 + sp, data); if (sp == 0) sp = 0xff; else --sp; }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,stackPop,int stackPop() throws MemoryAccessException { if (sp == 0xff) sp = 0x00; else ++sp; return bus.read(0x100 + sp); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,stackPeek,int stackPeek() throws MemoryAccessException { return bus.read(0x100 + sp + 1); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,address,"int address(int lowByte, int hiByte) { return ((hiByte << 8) | lowByte) & 0xffff; }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,xAddress,"int xAddress(int lowByte, int hiByte) { return (address(lowByte, hiByte) + getXRegister()) & 0xffff; }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,yAddress,"int yAddress(int lowByte, int hiByte) { return (address(lowByte, hiByte) + getYRegister()) & 0xffff; }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,zpxAddress,int zpxAddress(int zp) { return (zp + getXRegister()) & 0xff; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,relAddress,int relAddress(int offset) { return (pc + (byte) offset) & 0xffff; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,zpyAddress,int zpyAddress(int zp) { return (zp + getYRegister()) & 0xff; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Cpu.java,setResetVector,"void setResetVector(int address) throws MemoryAccessException { bus.write(RST_VECTOR_H, (address & 0xff00) >>> 8); bus.write(RST_VECTOR_L, address & 0x00ff); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (actionEvent.getSource() == loadButton) { handleProgramLoad(); } else if (actionEvent.getSource() == resetButton) { handleReset(); } else if (actionEvent.getSource() == stepButton) { handleStep(); } else if (actionEvent.getSource() == quitButton) { handleQuit(); } else if (actionEvent.getSource() == runButton) { if (simulator.isRunning()) { stop(); } else { start(); } } },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,handleProgramLoad,"private void handleProgramLoad() { try { int retVal = fileChooser.showOpenDialog(MainWindow.this); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > simulator.memorySize()) { throw new IOException(""Program will not fit in available memory.""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } simulator.loadProgram(program, PROGRAM_START_ADDRESS); simulator.reset(); console.reset(); uiUpdater.updateUi(); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read file: "" + ex.getMessage()); ex.printStackTrace(); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error loading program""); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,handleReset,"private void handleReset() { if (simulator.isRunning()) { stop(); } try { logger.log(Level.INFO, ""Reset requested. Resetting CPU and clearing memory.""); simulator.reset(); simulator.clearMemory(); console.reset(); uiUpdater.updateUi(); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,handleStep,"private void handleStep() { try { simulator.step(); uiUpdater.updateUi(); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,handleQuit,private void handleQuit() { System.exit(0); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,stop,private void stop() { simulator.requestStop(); if (simulatorThread != null) { simulatorThread.interrupt(); simulatorThread = null; } },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,start,private void start() { simulatorThread = new Thread(simulator); simulatorThread.start(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,getConsole,public Console getConsole() { return this.console; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,getStatusPane,public StatusPane getStatusPane() { return statusPane; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,getRunButton,public JButton getRunButton() { return runButton; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,getLoadButton,public JButton getLoadButton() { return loadButton; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,getStepButton,public JButton getStepButton() { return stepButton; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,MainWindow.java,main,public static void main(String args[]) { try { Simulator simulator = new Simulator(); MainWindow app = new MainWindow(simulator); app.pack(); app.setVisible(true); simulator.reset(); } catch (MemoryAccessException e) { e.printStackTrace(); } catch (MemoryRangeException e) { e.printStackTrace(); } },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,loadProgram,"public void loadProgram(byte[] program, int startAddress) throws MemoryAccessException { cpu.setResetVector(startAddress); int addr = startAddress, i; for (i = 0; i < program.length; i++) { bus.write(addr++, program[i] & 0xff); } logger.log(Level.INFO, ""Loaded "" + i + "" bytes at address 0x"" + Integer.toString(startAddress, 16)); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,setUiUpdater,public void setUiUpdater(UiUpdater uiUpdater) { this.uiUpdater = uiUpdater; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,isRunning,public boolean isRunning() { return isRunning; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,requestStop,public void requestStop() { isRunning = false; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,reset,public void reset() throws MemoryAccessException { cpu.reset(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,clearMemory,public void clearMemory() { ram.fill(0x00); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,getProcessorStatus,public int getProcessorStatus() { return cpu.getProcessorStatus(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,getCpu,public Cpu getCpu() { return this.cpu; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,memorySize,public long memorySize() { return MEMORY_SIZE; },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Entering 'run' on main Simulator thread""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { uiUpdater.simulatorDidStart(); } }); try { while (isRunning && !cpu.getBreakFlag()) { step(); } } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } logger.log(Level.INFO, ""Exiting 'run'. BREAK="" + cpu.getBreakBit() + ""; RUN_FLAG="" + isRunning); isRunning = false; SwingUtilities.invokeLater(new Runnable() { public void run() { uiUpdater.simulatorDidStop(); } }); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,run,public void run() { uiUpdater.simulatorDidStart(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,run,public void run() { uiUpdater.simulatorDidStop(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,step,"public void step() throws MemoryAccessException, FifoUnderrunException { cpu.step(); while (acia.hasTxChar()) { uiUpdater.consoleWrite(acia.txRead()); } if (updatesRequested++ > MAX_REQUESTS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { uiUpdater.updateUi(); } }); updatesRequested = 0; } }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Simulator.java,run,public void run() { uiUpdater.updateUi(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Memory.java,fill,"public void fill(int val) { Arrays.fill(this.mem, val); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Console.java,reset,public void reset() { getModel().clear(); getModel().setCursorColumn(0); getModel().setCursorRow(0); repaint(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Console.java,keyTyped,public void keyTyped(KeyEvent keyEvent) { keyEvent.consume(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Console.java,keyPressed,"public void keyPressed(KeyEvent keyEvent) { int keyCode = keyEvent.getKeyCode(); int modifiersMask = keyEvent.getModifiers(); int modifiersExMask = keyEvent.getModifiersEx(); System.out.println(""Key Pressed #"" + keyEvent.getKeyCode() + "" : "" + KeyEvent.getKeyText(keyCode) + "" MASK : "" + modifiersMask + "" EXT MASK : "" + modifiersExMask ); keyEvent.consume(); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Console.java,keyReleased,public void keyReleased(KeyEvent keyEvent) { keyEvent.consume(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Console.java,mouseClicked,public void mouseClicked(MouseEvent mouseEvent) { },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Console.java,mousePressed,public void mousePressed(MouseEvent mouseEvent) { requestFocus(); mouseEvent.consume(); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Console.java,mouseReleased,public void mouseReleased(MouseEvent mouseEvent) { },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Console.java,mouseEntered,public void mouseEntered(MouseEvent mouseEvent) { },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,Console.java,mouseExited,public void mouseExited(MouseEvent mouseEvent) { },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,StatusPane.java,updateState,"public void updateState() { int state = this.cpu.getProcessorStatus(); carryFlagLabel.setIcon(iconForFlag(state, 0)); zeroFlagLabel.setIcon(iconForFlag(state, 1)); irqDisableFlagLabel.setIcon(iconForFlag(state, 2)); decimalModeFlagLabel.setIcon(iconForFlag(state, 3)); breakFlagLabel.setIcon(iconForFlag(state, 4)); overflowFlagLabel.setIcon(iconForFlag(state, 6)); negativeFlagLabel.setIcon(iconForFlag(state, 7)); opcodeLabel.setText(cpu.getOpcodeStatus()); pcLabel.setText(cpu.getProgramCounterStatus()); aLabel.setText(cpu.getARegisterStatus()); xLabel.setText(cpu.getXRegisterStatus()); yLabel.setText(cpu.getYRegisterStatus()); stepCountLabel.setText(Long.toString(cpu.getStepCounter())); repaint(); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,StatusPane.java,iconForFlag,"private ImageIcon iconForFlag(int state, int flagIndex) { ImageIcon imageIcon = null; if ((((state & 0xff) >> flagIndex) & 0x01) == 1) { switch (flagIndex) { case 0: imageIcon = carryOn; break; case 1: imageIcon = zeroOn; break; case 2: imageIcon = irqOn; break; case 3: imageIcon = decimalOn; break; case 4: imageIcon = breakOn; break; case 6: imageIcon = overflowOn; break; case 7: imageIcon = negativeOn; break; } } else { switch (flagIndex) { case 0: imageIcon = carryOff; break; case 1: imageIcon = zeroOff; break; case 2: imageIcon = irqOff; break; case 3: imageIcon = decimalOff; break; case 4: imageIcon = breakOff; break; case 6: imageIcon = overflowOff; break; case 7: imageIcon = negativeOff; break; } } return imageIcon; }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,UiUpdater.java,consoleWrite,public void consoleWrite(int i) { data.append((char) i); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,UiUpdater.java,simulatorDidStop,"public void simulatorDidStop() { mainWindow.getStepButton().setEnabled(true); mainWindow.getLoadButton().setEnabled(true); mainWindow.getRunButton().setText(""Run""); updateUi(); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,UiUpdater.java,simulatorDidStart,"public void simulatorDidStart() { mainWindow.getStepButton().setEnabled(false); mainWindow.getLoadButton().setEnabled(false); mainWindow.getRunButton().setText(""Stop""); updateUi(); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,UiUpdater.java,updateUi,"public void updateUi() { if (data.length() > 0) { console.getModel().print(data.toString()); console.repaint(); data.delete(0, data.length()); } statusPane.updateState(); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,CpuTest.java,testSetProcessorStatus,public void testSetProcessorStatus() { assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO | Cpu.P_OVERFLOW); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO | Cpu.P_OVERFLOW | Cpu.P_BREAK); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertTrue(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_DECIMAL); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertTrue(cpu.getDecimalModeFlag()); assertTrue(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_DECIMAL | Cpu.P_IRQ_DISABLE); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getIrqDisableFlag()); assertTrue(cpu.getDecimalModeFlag()); assertTrue(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x00); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); },https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,CpuTest.java,testPcStatus,"public void testPcStatus() { cpu.setProgramCounter(0x03fa); assertEquals(""$03FA"", cpu.getProgramCounterStatus()); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
a1d07bf22379bf5c14065fbb9c5797c1df126f12,CpuTest.java,testOpcodeStatus,"public void testOpcodeStatus() throws MemoryAccessException { bus.write(0x0200, 0xa9); bus.write(0x0201, 0xef); cpu.step(); assertEquals(""LDA #$EF"", cpu.getOpcodeStatus()); bus.write(0x0202, 0x00); cpu.step(); assertEquals(""BRK"", cpu.getOpcodeStatus()); cpu.step(); assertEquals(""BRK"", cpu.getOpcodeStatus()); }",https://www.github.com/sethm/symon/commit/a1d07bf22379bf5c14065fbb9c5797c1df126f12
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Cpu.java,reset,"public void reset() throws MemoryAccessException { sp = 0xff; pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); ir = 0; carryFlag = false; irqDisableFlag = false; decimalModeFlag = false; breakFlag = false; overflowFlag = false; zeroFlag = false; opTrap = false; stepCounter = 0L; }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Cpu.java,setResetVector,"public void setResetVector(int address) throws MemoryAccessException { bus.write(RST_VECTOR_H, (address & 0xff00) >>> 8); bus.write(RST_VECTOR_L, address & 0x00ff); }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Preferences.java,getDialog,public JDialog getDialog();,https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Preferences.java,getProgramStartAddress,public int getProgramStartAddress();,https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Preferences.java,getAciaAddress,public int getAciaAddress();,https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Preferences.java,updateUi,public void updateUi();,https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); mainWindow.setJMenuBar(createMenuBar()); this.console = new com.loomcom.symon.ui.Console(); this.statusPane = new StatusPanel(); fileChooser = new JFileChooser(); preferences = new PreferencesDialog(mainWindow, true); JPanel controlsContainer = new JPanel(); JPanel buttonContainer = new JPanel(); Dimension buttonPanelSize = new Dimension(console.getWidth(), 36); buttonContainer.setMinimumSize(buttonPanelSize); buttonContainer.setMaximumSize(buttonPanelSize); buttonContainer.setPreferredSize(buttonPanelSize); controlsContainer.setLayout(new BorderLayout()); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(resetButton); controlsContainer.add(console, BorderLayout.PAGE_START); controlsContainer.add(buttonContainer, BorderLayout.PAGE_END); mainWindow.getContentPane().add(controlsContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); runStopButton.addActionListener(this); stepButton.addActionListener(this); resetButton.addActionListener(this); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); console.requestFocus(); mainWindow.pack(); mainWindow.setVisible(true); }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,createMenuBar,"private JMenuBar createMenuBar() { JMenuBar menuBar = new JMenuBar(); JMenu fileMenu = new JMenu(""File""); menuBar.add(fileMenu); loadMenuItem = new JMenuItem(""Load Program""); loadMenuItem.setMnemonic(KeyEvent.VK_L); JMenuItem prefsItem = new JMenuItem(""Preferences...""); prefsItem.setMnemonic(KeyEvent.VK_P); JMenuItem quitItem = new JMenuItem(""Quit""); quitItem.setMnemonic(KeyEvent.VK_Q); loadMenuItem.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleProgramLoad(); } }); prefsItem.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { showAndUpdatePreferences(); } }); quitItem.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleQuit(); } }); fileMenu.add(loadMenuItem); fileMenu.add(prefsItem); fileMenu.add(quitItem); return menuBar; }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { handleProgramLoad(); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { showAndUpdatePreferences(); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { handleQuit(); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,showAndUpdatePreferences,public void showAndUpdatePreferences() { preferences.getDialog().setVisible(true); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (actionEvent.getSource() == resetButton) { handleReset(); } else if (actionEvent.getSource() == stepButton) { handleStep(); } else if (actionEvent.getSource() == runStopButton) { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } else { runLoop = new RunLoop(); runLoop.start(); } } },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,handleProgramLoad,"private void handleProgramLoad() { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > MEMORY_SIZE) { throw new IOException(""Program will not fit in available memory.""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } SwingUtilities.invokeLater(new Runnable() { public void run() { console.reset(); } }); loadProgram(program, preferences.getProgramStartAddress()); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read file: "" + ex.getMessage()); ex.printStackTrace(); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error loading program""); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,run,public void run() { console.reset(); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,handleReset,"private void handleReset() { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Reset requested. Resetting CPU and clearing memory.""); cpu.reset(); ram.fill(0x00); console.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { updateConsoleAndStatus(cpu); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,run,public void run() { updateConsoleAndStatus(cpu); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,handleStep,"private void handleStep() { try { step(); SwingUtilities.invokeLater(new Runnable() { public void run() { updateConsoleAndStatus(cpu); } }); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,handleQuit,private void handleQuit() { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); } System.exit(0); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,step,private void step() throws MemoryAccessException { cpu.step(); while (acia.hasTxChar()) { aciaBuffer.append((char) acia.txRead()); } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { updateConsoleAndStatus(cpu); } }); stepsSinceLastUpdate = 0; } },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,loadProgram,"private void loadProgram(byte[] program, int startAddress) throws MemoryAccessException { cpu.setResetVector(startAddress); int addr = startAddress, i; for (i = 0; i < program.length; i++) { bus.write(addr++, program[i] & 0xff); } logger.log(Level.INFO, ""Loaded "" + i + "" bytes at address 0x"" + Integer.toString(startAddress, 16)); cpu.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { updateConsoleAndStatus(cpu); } }); }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,updateConsoleAndStatus,"private void updateConsoleAndStatus(Cpu cpu) { if (aciaBuffer.length() > 0) { console.print(aciaBuffer.toString()); console.repaint(); aciaBuffer.delete(0, aciaBuffer.length()); } statusPane.updateState(cpu); }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,main,public static void main(String args[]) { SwingUtilities.invokeLater(new Runnable() { public void run() { try { Simulator simulator = new Simulator(); simulator.createAndShowUi(); simulator.handleReset(); } catch (MemoryRangeException e) { e.printStackTrace(); } } }); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,run,public void run() { try { Simulator simulator = new Simulator(); simulator.createAndShowUi(); simulator.handleReset(); } catch (MemoryRangeException e) { e.printStackTrace(); } },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,update,"public void update(Observable observable, Object o) { if (observable == preferences) { } }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(false); loadMenuItem.setEnabled(false); runStopButton.setText(""Stop""); } }); try { while (isRunning && !cpu.getBreakFlag()) { step(); } } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(true); loadMenuItem.setEnabled(true); runStopButton.setText(""Run""); updateConsoleAndStatus(cpu); } }); logger.log(Level.INFO, ""Exiting main run loop. BREAK="" + cpu.getBreakBit() + ""; RUN_FLAG="" + isRunning); isRunning = false; }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,run,"public void run() { stepButton.setEnabled(false); loadMenuItem.setEnabled(false); runStopButton.setText(""Stop""); }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Simulator.java,run,"public void run() { stepButton.setEnabled(true); loadMenuItem.setEnabled(true); runStopButton.setText(""Run""); updateConsoleAndStatus(cpu); }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Acia.java,read,"public int read(int address) throws MemoryAccessException { switch (address) { case DATA_REG: return rxRead(); case STAT_REG: return ((rxFull ? 0x08 : 0x00) | (txFull ? 0x00 : 0x10)); case CMND_REG: return commandRegister; case CTRL_REG: return controlRegister; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Acia.java,rxRead,public synchronized int rxRead() { rxFull = false; return rxChar; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Acia.java,rxWrite,public synchronized void rxWrite(int data) { rxFull = true; rxChar = data; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Acia.java,txRead,public synchronized int txRead() { txFull = false; return txChar; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Acia.java,txWrite,public synchronized void txWrite(int data) { txFull = true; txChar = data; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Acia.java,hasTxChar,public boolean hasTxChar() { return txFull; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Acia.java,hasRxChar,public boolean hasRxChar() { return rxFull; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,Acia.java,reset,private synchronized void reset() { txChar = 0; txFull = false; rxChar = 0; rxFull = false; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,PreferencesDialog.java,getDialog,public JDialog getDialog() { return dialog; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,PreferencesDialog.java,initComponents,"private void initComponents() { dialog.setTitle(""Preferences""); Container contents = dialog.getContentPane(); JPanel settingsContainer = new JPanel(); JPanel buttonsContainer = new JPanel(); GridBagLayout layout = new GridBagLayout(); settingsContainer.setLayout(layout); final JLabel aciaAddressLabel = new JLabel(""ACIA Address""); final JLabel programLoadAddressLabel = new JLabel(""Program Load Address""); aciaAddressField = new JTextField(8); programLoadAddressField = new JTextField(8); aciaAddressLabel.setLabelFor(aciaAddressField); programLoadAddressLabel.setLabelFor(programLoadAddressField); GridBagConstraints constraints = new GridBagConstraints(); constraints.insets = new Insets(5, 5, 5, 5); constraints.fill = GridBagConstraints.HORIZONTAL; constraints.gridx = 0; constraints.gridy = 0; settingsContainer.add(aciaAddressLabel, constraints); constraints.gridx = 1; settingsContainer.add(aciaAddressField, constraints); constraints.gridy = 1; constraints.gridx = 0; settingsContainer.add(programLoadAddressLabel, constraints); constraints.gridx = 1; settingsContainer.add(programLoadAddressField, constraints); JButton applyButton = new JButton(""Apply""); JButton cancelButton = new JButton(""Cancel""); cancelButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { updateUi(); dialog.setVisible(false); } }); applyButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { programLoadAddress = hexToInt(programLoadAddressField.getText()); aciaAddress = hexToInt(aciaAddressField.getText()); updateUi(); notifyObservers(); dialog.setVisible(false); } }); buttonsContainer.add(applyButton); buttonsContainer.add(cancelButton); contents.add(settingsContainer, BorderLayout.PAGE_START); contents.add(buttonsContainer, BorderLayout.PAGE_END); dialog.pack(); }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,PreferencesDialog.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { updateUi(); dialog.setVisible(false); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,PreferencesDialog.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { programLoadAddress = hexToInt(programLoadAddressField.getText()); aciaAddress = hexToInt(aciaAddressField.getText()); updateUi(); notifyObservers(); dialog.setVisible(false); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,PreferencesDialog.java,intToHex,"private String intToHex(int i) { return String.format(""%04x"", i); }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,PreferencesDialog.java,hexToInt,"private int hexToInt(String s) { try { return Integer.parseInt(s, 16); } catch (NumberFormatException ex) { return 0; } }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,PreferencesDialog.java,getProgramStartAddress,public int getProgramStartAddress() { return programLoadAddress; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,PreferencesDialog.java,getAciaAddress,public int getAciaAddress() { return aciaAddress; },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,PreferencesDialog.java,updateUi,public void updateUi() { aciaAddressField.setText(intToHex(aciaAddress)); programLoadAddressField.setText(intToHex(programLoadAddress)); },https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,StatusPanel.java,updateState,"public void updateState(Cpu cpu) { int state = cpu.getProcessorStatus(); carryFlagLabel.setIcon(iconForFlag(state, 0)); zeroFlagLabel.setIcon(iconForFlag(state, 1)); irqDisableFlagLabel.setIcon(iconForFlag(state, 2)); decimalModeFlagLabel.setIcon(iconForFlag(state, 3)); breakFlagLabel.setIcon(iconForFlag(state, 4)); overflowFlagLabel.setIcon(iconForFlag(state, 6)); negativeFlagLabel.setIcon(iconForFlag(state, 7)); opcodeField.setText(cpu.getOpcodeStatus()); pcField.setText(cpu.getProgramCounterStatus()); aField.setText(cpu.getARegisterStatus()); xField.setText(cpu.getXRegisterStatus()); yField.setText(cpu.getYRegisterStatus()); repaint(); }",https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14,AciaTest.java,readingBuffersShouldResetStatus,public void readingBuffersShouldResetStatus(),https://www.github.com/sethm/symon/commit/ed36690e9edd2b8240a4b0433fb7b8c0a69b8a14
365809459c30735dc4edde805b57513f14c00116,Simulator.java,handleReset,"private void handleReset() { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Reset requested. Resetting CPU and clearing memory.""); cpu.reset(); ram.fill(0x00); console.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Simulator.java,run,public void run() { statusPane.updateState(cpu); },https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Simulator.java,handleStep,"private void handleStep() { try { step(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Simulator.java,step,private void step() throws MemoryAccessException { cpu.step(); if (acia.hasTxChar()) { try { SwingUtilities.invokeAndWait(new Runnable() { public void run() { console.print(Character.toString((char)acia.txRead())); console.repaint(); } }); } catch (InvocationTargetException e) { e.printStackTrace(); } catch (InterruptedException e) { e.printStackTrace(); } } if (console.hasInput()) { acia.rxWrite((int)console.readInputChar()); } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); stepsSinceLastUpdate = 0; } },https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Simulator.java,run,public void run() { console.print(Character.toString((char)acia.txRead())); console.repaint(); },https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Simulator.java,loadProgram,"private void loadProgram(byte[] program, int startAddress) throws MemoryAccessException { cpu.setResetVector(startAddress); int addr = startAddress, i; for (i = 0; i < program.length; i++) { bus.write(addr++, program[i] & 0xff); } logger.log(Level.INFO, ""Loaded "" + i + "" bytes at address 0x"" + Integer.toString(startAddress, 16)); cpu.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); }",https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(false); loadMenuItem.setEnabled(false); runStopButton.setText(""Stop""); } }); try { while (isRunning && !cpu.getBreakFlag()) { step(); } } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(true); loadMenuItem.setEnabled(true); runStopButton.setText(""Run""); statusPane.updateState(cpu); } }); logger.log(Level.INFO, ""Exiting main run loop. BREAK="" + cpu.getBreakBit() + ""; RUN_FLAG="" + isRunning); isRunning = false; }",https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Simulator.java,run,"public void run() { stepButton.setEnabled(true); loadMenuItem.setEnabled(true); runStopButton.setText(""Run""); statusPane.updateState(cpu); }",https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Console.java,reset,public void reset() { getModel().clear(); getModel().setCursorColumn(0); getModel().setCursorRow(0); repaint(); this.hasInput = false; },https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Console.java,keyPressed,"public void keyPressed(KeyEvent keyEvent) { keyBuffer = keyEvent.getKeyChar(); hasInput = true; System.out.println(""Key Pressed (0x"" + Integer.toString((int)keyBuffer, 16) + "") : "" + keyBuffer); keyEvent.consume(); }",https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Console.java,hasInput,public boolean hasInput() { return hasInput; },https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
365809459c30735dc4edde805b57513f14c00116,Console.java,readInputChar,public char readInputChar() { hasInput = false; return this.keyBuffer; },https://www.github.com/sethm/symon/commit/365809459c30735dc4edde805b57513f14c00116
e012d97bb384d8b4b87d62c993f6399c2726c931,Cpu.java,stackPush,"void stackPush(int data) throws MemoryAccessException { bus.write(0x100 + sp, data); if (sp == 0) { sp = 0xff; } else { --sp; } }",https://www.github.com/sethm/symon/commit/e012d97bb384d8b4b87d62c993f6399c2726c931
e012d97bb384d8b4b87d62c993f6399c2726c931,Cpu.java,stackPop,int stackPop() throws MemoryAccessException { if (sp == 0xff) { sp = 0x00; } else { ++sp; } return bus.read(0x100 + sp); },https://www.github.com/sethm/symon/commit/e012d97bb384d8b4b87d62c993f6399c2726c931
c214cc9b431c686d184284d522dac8c4cb6e8d08,Cpu.java,reset,"public void reset() throws MemoryAccessException { sp = 0xff; pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); ir = 0; carryFlag = false; irqDisableFlag = false; decimalModeFlag = false; breakFlag = false; overflowFlag = false; zeroFlag = false; opTrap = false; stepCounter = 0L; a = 0; x = 0; y = 0; }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,Preferences.java,getBorderWidth,public int getBorderWidth();,https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); mainWindow.setJMenuBar(createMenuBar()); this.console = new com.loomcom.symon.ui.Console(); this.statusPane = new StatusPanel(); fileChooser = new JFileChooser(); preferences = new PreferencesDialog(mainWindow, true); preferences.addObserver(this); JPanel controlsContainer = new JPanel(); JPanel buttonContainer = new JPanel(); Dimension buttonPanelSize = new Dimension(console.getWidth(), 36); buttonContainer.setMinimumSize(buttonPanelSize); buttonContainer.setMaximumSize(buttonPanelSize); buttonContainer.setPreferredSize(buttonPanelSize); controlsContainer.setLayout(new BorderLayout()); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(resetButton); controlsContainer.add(console, BorderLayout.PAGE_START); controlsContainer.add(buttonContainer, BorderLayout.PAGE_END); mainWindow.getContentPane().add(controlsContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); runStopButton.addActionListener(this); stepButton.addActionListener(this); resetButton.addActionListener(this); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); console.requestFocus(); mainWindow.pack(); mainWindow.setVisible(true); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (actionEvent.getSource() == resetButton) { handleReset(); } else if (actionEvent.getSource() == stepButton) { handleStep(); } else if (actionEvent.getSource() == runStopButton) { console.requestFocus(); if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } else { runLoop = new RunLoop(); runLoop.start(); } } },https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,Simulator.java,step,private void step() throws MemoryAccessException { cpu.step(); if (acia.hasTxChar()) { console.print(Character.toString((char)acia.txRead())); console.repaint(); } if (console.hasInput()) { acia.rxWrite((int)console.readInputChar()); } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); stepsSinceLastUpdate = 0; } },https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,Simulator.java,update,"public void update(Observable observable, Object o) { if (observable == preferences) { int oldBorderWidth = console.getBorderWidth(); if (oldBorderWidth != preferences.getBorderWidth()) { console.setBorderWidth(preferences.getBorderWidth()); mainWindow.pack(); } } }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,Console.java,keyPressed,public void keyPressed(KeyEvent keyEvent) { keyBuffer = keyEvent.getKeyChar(); hasInput = true; keyEvent.consume(); },https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,PreferencesDialog.java,initComponents,"private void initComponents() { dialog.setTitle(""Preferences""); Container contents = dialog.getContentPane(); JPanel settingsContainer = new JPanel(); JPanel buttonsContainer = new JPanel(); GridBagLayout layout = new GridBagLayout(); settingsContainer.setLayout(layout); final JLabel aciaAddressLabel = new JLabel(""ACIA Address""); final JLabel programLoadAddressLabel = new JLabel(""Program Load Address""); final JLabel borderWidthLabel = new JLabel(""Console Border Width""); aciaAddressField = new JTextField(8); programLoadAddressField = new JTextField(8); borderWidthField = new JTextField(8); aciaAddressLabel.setLabelFor(aciaAddressField); programLoadAddressLabel.setLabelFor(programLoadAddressField); borderWidthLabel.setLabelFor(borderWidthField); GridBagConstraints constraints = new GridBagConstraints(); constraints.insets = new Insets(5, 5, 5, 5); constraints.fill = GridBagConstraints.HORIZONTAL; constraints.gridx = 0; constraints.gridy = 0; settingsContainer.add(aciaAddressLabel, constraints); constraints.gridx = 1; settingsContainer.add(aciaAddressField, constraints); constraints.gridy = 1; constraints.gridx = 0; settingsContainer.add(programLoadAddressLabel, constraints); constraints.gridx = 1; settingsContainer.add(programLoadAddressField, constraints); constraints.gridy = 2; constraints.gridx = 0; settingsContainer.add(borderWidthLabel, constraints); constraints.gridx = 1; settingsContainer.add(borderWidthField, constraints); JButton applyButton = new JButton(""Apply""); JButton cancelButton = new JButton(""Cancel""); cancelButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { updateUi(); dialog.setVisible(false); } }); applyButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { programLoadAddress = hexToInt(programLoadAddressField.getText()); aciaAddress = hexToInt(aciaAddressField.getText()); borderWidth = Integer.parseInt(borderWidthField.getText()); updateUi(); setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); } }); buttonsContainer.add(applyButton); buttonsContainer.add(cancelButton); contents.add(settingsContainer, BorderLayout.PAGE_START); contents.add(buttonsContainer, BorderLayout.PAGE_END); dialog.pack(); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,PreferencesDialog.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { programLoadAddress = hexToInt(programLoadAddressField.getText()); aciaAddress = hexToInt(aciaAddressField.getText()); borderWidth = Integer.parseInt(borderWidthField.getText()); updateUi(); setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); },https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,PreferencesDialog.java,getBorderWidth,public int getBorderWidth() { return borderWidth; },https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,PreferencesDialog.java,updateUi,public void updateUi() { aciaAddressField.setText(intToHex(aciaAddress)); programLoadAddressField.setText(intToHex(programLoadAddress)); borderWidthField.setText(Integer.toString(borderWidth)); },https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuAbsoluteXModeTest.java,test_ADC,"public void test_ADC() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab41, 0xff); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x7f, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x80, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0xff, 0x7d, 0x10, 0xab); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x7f, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x80, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0xff, 0x7d, 0x11, 0xab); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuAbsoluteXModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab41, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x7d, 0x10, 0xab); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x49, 0x7d, 0x10, 0xab); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x50, 0x7d, 0x10, 0xab); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x99, 0x7d, 0x10, 0xab); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x00, 0x7d, 0x11, 0xab); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x49, 0x7d, 0x11, 0xab); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x50, 0x7d, 0x11, 0xab); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuAbsoluteXModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x0f); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x80); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuAbsoluteYModeTest.java,setUp,"protected void setUp() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Cpu.DEFAULT_BASE_ADDRESS & 0x00ff); bus.write(0xfffd, (Cpu.DEFAULT_BASE_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuAbsoluteYModeTest.java,test_ADC,"public void test_ADC() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab41, 0xff); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x7f, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x80, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0xff, 0x79, 0x10, 0xab); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x7f, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0x80, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xa9, 0xff, 0x79, 0x11, 0xab); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuAbsoluteYModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() throws MemoryAccessException { bus.write(0xab40, 0x01); bus.write(0xab41, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x79, 0x10, 0xab); cpu.setYRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x49, 0x79, 0x10, 0xab); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x50, 0x79, 0x10, 0xab); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x99, 0x79, 0x10, 0xab); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x00, 0x79, 0x11, 0xab); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x49, 0x79, 0x11, 0xab); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setYRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x50, 0x79, 0x11, 0xab); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuAbsoluteYModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setYRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setAccumulator(0x0f); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setAccumulator(0x80); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuZeroPageXModeTest.java,test_ADC,"public void test_ADC() throws MemoryAccessException { bus.write(0x40, 0x01); bus.write(0x41, 0xff); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x75, 0x10); cpu.step(2); assertEquals(0x01, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x7f, 0x75, 0x10); cpu.step(2); assertEquals(0x80, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x80, 0x75, 0x10); cpu.step(2); assertEquals(0x81, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0xff, 0x75, 0x10); cpu.step(2); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x00, 0x75, 0x11); cpu.step(2); assertEquals(0xff, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x7f, 0x75, 0x11); cpu.step(2); assertEquals(0x7e, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0x80, 0x75, 0x11); cpu.step(2); assertEquals(0x7f, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xa9, 0xff, 0x75, 0x11); cpu.step(2); assertEquals(0xfe, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuZeroPageXModeTest.java,test_ADC_DecimalMode,"public void test_ADC_DecimalMode() throws MemoryAccessException { bus.write(0x40, 0x01); bus.write(0x41, 0x99); bus.loadProgram(0xf8, 0xa9, 0x01, 0x75, 0x10); cpu.setXRegister(0x30); cpu.step(3); assertEquals(0x02, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x49, 0x75, 0x10); cpu.step(3); assertEquals(0x50, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x50, 0x75, 0x10); cpu.step(3); assertEquals(0x51, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x99, 0x75, 0x10); cpu.step(3); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x00, 0x75, 0x11); cpu.step(3); assertEquals(0x99, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x49, 0x75, 0x11); cpu.step(3); assertEquals(0x48, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); cpu.reset(); cpu.setXRegister(0x30); bus.loadProgram(0xf8, 0xa9, 0x50, 0x75, 0x11); cpu.step(3); assertEquals(0x49, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuZeroPageXModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setYRegister(0x00); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setYRegister(0x0f); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setYRegister(0x80); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c214cc9b431c686d184284d522dac8c4cb6e8d08,CpuZeroPageXModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x0f); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x80); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/c214cc9b431c686d184284d522dac8c4cb6e8d08
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Cpu.java,getAccumulatorStatus,"public String getAccumulatorStatus() { return String.format(""$%02X"", a); }",https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Cpu.java,getStackPointerStatus,"public String getStackPointerStatus() { return String.format(""$%02X"", sp); }",https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Cpu.java,toString,"public String toString() { String opcode = opcode(ir, args[0], args[1]); StringBuffer sb = new StringBuffer(String.format(""$%04X"", addr) + "" ""); sb.append(String.format(""%-14s"", opcode)); sb.append(""A="" + getAccumulatorStatus() + "" ""); sb.append(""X="" + getXRegisterStatus() + "" ""); sb.append(""Y="" + getYRegisterStatus() + "" ""); sb.append(""PC="" + getProgramCounterStatus() + "" ""); sb.append(""SP="" + getStackPointerStatus() + "" ""); sb.append(""P="" + getProcessorStatusString()); return sb.toString(); }",https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); mainWindow.setJMenuBar(createMenuBar()); this.console = new com.loomcom.symon.ui.Console(); this.statusPane = new StatusPanel(); fileChooser = new JFileChooser(); preferences = new PreferencesDialog(mainWindow, true); preferences.addObserver(this); JPanel controlsContainer = new JPanel(); JPanel buttonContainer = new JPanel(); Dimension buttonPanelSize = new Dimension(console.getWidth(), 36); buttonContainer.setMinimumSize(buttonPanelSize); buttonContainer.setMaximumSize(buttonPanelSize); buttonContainer.setPreferredSize(buttonPanelSize); controlsContainer.setLayout(new BorderLayout()); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(resetButton); controlsContainer.add(console, BorderLayout.PAGE_START); mainWindow.getContentPane().add(controlsContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(this); stepButton.addActionListener(this); resetButton.addActionListener(this); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); console.requestFocus(); mainWindow.pack(); mainWindow.setVisible(true); }",https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Simulator.java,step,private void step() throws MemoryAccessException { delayLoop(); cpu.step(); if (acia.hasTxChar()) { console.print(Character.toString((char)acia.txRead())); console.repaint(); } if (console.hasInput()) { acia.rxWrite((int)console.readInputChar()); } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); stepsSinceLastUpdate = 0; } },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Simulator.java,delayLoop,private void delayLoop() { long startTime = System.nanoTime(); long stopTime = startTime + DELAY_BETWEEN_STEPS_NS; while (System.nanoTime() < stopTime) { ; } },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,read,"public int read(int address) throws MemoryAccessException { switch (address) { case DATA_REG: return rxRead(); case STAT_REG: return statusReg(); case CMND_REG: return commandRegister; case CTRL_REG: return controlRegister; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case 0: txWrite(data); break; case 1: reset(); break; case 2: commandRegister = data; break; case 3: setControlRegister(data); break; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,setControlRegister,public void setControlRegister(int data) { this.controlRegister = data; if (data == 0) { reset(); } else { int baudSelector = data & 0x0f; switch (baudSelector) { case 0: baudRate = 0; break; case 1: baudRate = 50; break; case 2: baudRate = 75; break; case 3: baudRate = 110; break; case 4: baudRate = 135; break; case 5: baudRate = 150; break; case 6: baudRate = 300; break; case 7: baudRate = 600; break; case 8: baudRate = 1200; break; case 9: baudRate = 1800; break; case 10: baudRate = 2400; break; case 11: baudRate = 3600; break; case 12: baudRate = 4800; break; case 13: baudRate = 7200; break; case 14: baudRate = 9600; break; case 15: baudRate = 19200; break; } baudRateDelay = calculateBaudRateDelay(); } },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,calculateBaudRateDelay,private long calculateBaudRateDelay() { if (baudRate > 0) { return (long)((1.0 / baudRate) * 1000000000 * 8); } else { return 0; } },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,getBaudRate,public int getBaudRate() { return baudRate; },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,setBaudRate,public void setBaudRate(int rate) { this.baudRate = rate; },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,statusReg,public int statusReg() { int stat = 0; if (rxFull && System.nanoTime() >= (lastRxRead + baudRateDelay)) { stat |= 0x08; } if (txEmpty && System.nanoTime() >= (lastTxWrite + baudRateDelay)) { stat |= 0x10; } return stat; },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,rxRead,public synchronized int rxRead() { lastRxRead = System.nanoTime(); rxFull = false; return rxChar; },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,txRead,public synchronized int txRead() { txEmpty = true; return txChar; },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,txWrite,public synchronized void txWrite(int data) { lastTxWrite = System.nanoTime(); txEmpty = false; txChar = data; },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,hasTxChar,public boolean hasTxChar() { return !txEmpty; },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,Acia.java,reset,private synchronized void reset() { txChar = 0; txEmpty = true; rxChar = 0; rxFull = false; },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,StatusPanel.java,updateState,"public void updateState(Cpu cpu) { int state = cpu.getProcessorStatus(); carryFlagLabel.setIcon(iconForFlag(state, 0)); zeroFlagLabel.setIcon(iconForFlag(state, 1)); irqDisableFlagLabel.setIcon(iconForFlag(state, 2)); decimalModeFlagLabel.setIcon(iconForFlag(state, 3)); breakFlagLabel.setIcon(iconForFlag(state, 4)); overflowFlagLabel.setIcon(iconForFlag(state, 6)); negativeFlagLabel.setIcon(iconForFlag(state, 7)); opcodeField.setText(cpu.getOpcodeStatus()); pcField.setText(cpu.getProgramCounterStatus()); spField.setText(cpu.getStackPointerStatus()); aField.setText(cpu.getAccumulatorStatus()); xField.setText(cpu.getXRegisterStatus()); yField.setText(cpu.getYRegisterStatus()); repaint(); }",https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,StatusPanel.java,makeLabel,private JLabel makeLabel(String text) { JLabel label = new JLabel(text); label.setAlignmentX(LEFT_ALIGNMENT); label.setBorder(LABEL_BORDER); label.setFont(LABEL_FONT); return label; },https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963,StatusPanel.java,makeTextField,"private JTextField makeTextField() { JTextField textField = new JTextField(""""); textField.setAlignmentX(LEFT_ALIGNMENT); textField.setEditable(false); return textField; }",https://www.github.com/sethm/symon/commit/c1caf8c6b4b4ab4bfee2049813ea222b3e3ff963
795ccfde5d01917ff4d9542d26fde5709c9284fb,Bus.java,read,"public int read(int address) throws MemoryAccessException { for (Device d : devices) { MemoryRange range = d.getMemoryRange(); if (range.includes(address)) { int devAddr = address - range.startAddress(); return d.read(devAddr); } } throw new MemoryAccessException(""Bus read failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Bus.java,write,"public void write(int address, int value) throws MemoryAccessException { for (Device d : devices) { MemoryRange range = d.getMemoryRange(); if (range.includes(address)) { int devAddr = address - range.startAddress(); d.write(devAddr, value); return; } } throw new MemoryAccessException(""Bus write failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,step,"public void step() throws MemoryAccessException { addr = pc; ir = bus.read(pc); irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize - 1; i++) { args[i] = bus.read(pc); incrementPC(); } stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = args[0]; break; case 2: break; case 3: effectiveAddress = address(args[0], args[1]); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(args[0]); } else { effectiveAddress = zpxAddress(args[0]); } break; case 7: if (ir == 0xbe) { effectiveAddress = yAddress(args[0], args[1]); } else { effectiveAddress = xAddress(args[0], args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = args[0] + getXRegister(); effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(args[0], args[1]); break; case 4: tmp = address(bus.read(args[0]), bus.read((args[0] + 1) & 0xff)); effectiveAddress = (tmp + getYRegister()) & 0xffff; break; case 5: effectiveAddress = zpxAddress(args[0]); break; case 6: effectiveAddress = yAddress(args[0], args[1]); break; case 7: effectiveAddress = xAddress(args[0], args[1]); break; } break; } switch (ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc + 2 >> 8) & 0xff); stackPush(pc + 2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc - 1 >> 8) & 0xff); stackPush(pc - 1 & 0xff); pc = address(args[0], args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(args[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(args[0], args[1]); break; case 0x6c: lo = address(args[0], args[1]); hi = lo + 1; pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: a |= args[0]; setArithmeticFlags(a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: a &= args[0]; setArithmeticFlags(a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: a &= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: a ^= args[0]; setArithmeticFlags(a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, args[0]); } else { a = adc(a, args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, bus.read(effectiveAddress)); } else { a = adc(a, bus.read(effectiveAddress)); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, x); break; case 0xa0: y = args[0]; setArithmeticFlags(y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: y = bus.read(effectiveAddress); setArithmeticFlags(y); break; case 0xa2: x = args[0]; setArithmeticFlags(x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: x = bus.read(effectiveAddress); setArithmeticFlags(x); break; case 0xa9: a = args[0]; setArithmeticFlags(a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0xc0: cmp(y, args[0]); break; case 0xc4: case 0xcc: cmp(y, bus.read(effectiveAddress)); break; case 0xc9: cmp(a, args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(x, args[0]); break; case 0xe4: case 0xec: cmp(x, bus.read(effectiveAddress)); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, args[0]); } else { a = sbc(a, args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, bus.read(effectiveAddress)); } else { a = sbc(a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(ir); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,adc,"private int adc(int acc, int operand) { int result = (operand & 0xff) + (acc & 0xff) + getCarryBit(); int carry6 = (operand & 0x7f) + (acc & 0x7f) + getCarryBit(); setCarryFlag((result & 0x100) != 0); setOverflowFlag(carryFlag ^ ((carry6 & 0x80) != 0)); result &= 0xff; setArithmeticFlags(result); return result; }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,adcDecimal,"private int adcDecimal(int acc, int operand) { int l, h, result; l = (acc & 0x0f) + (operand & 0x0f) + getCarryBit(); if ((l & 0xff) > 9) l += 6; h = (acc >> 4) + (operand >> 4) + (l > 15 ? 1 : 0); if ((h & 0xff) > 9) h += 6; result = (l & 0x0f) | (h << 4); result &= 0xff; setCarryFlag(h > 15); setZeroFlag(result == 0); setNegativeFlag(false); setOverflowFlag(false); return result; }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,sbc,"private int sbc(int acc, int operand) { int result; result = adc(acc, ~operand); setArithmeticFlags(result); return result; }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,sbcDecimal,"private int sbcDecimal(int acc, int operand) { int l, h, result; l = (acc & 0x0f) - (operand & 0x0f) - (carryFlag ? 0 : 1); if ((l & 0x10) != 0) l -= 6; h = (acc >> 4) - (operand >> 4) - ((l & 0x10) != 0 ? 1 : 0); if ((h & 0x10) != 0) h -= 6; result = (l & 0x0f) | (h << 4); setCarryFlag((h & 0xff) < 15); setZeroFlag(result == 0); setNegativeFlag(false); setOverflowFlag(false); return (result & 0xff); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,cmp,"private void cmp(int reg, int operand) { int tmp = (reg - operand) & 0xff; setCarryFlag(reg >= operand); setZeroFlag(tmp == 0); setNegativeFlag((tmp & 0x80) != 0); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,setArithmeticFlags,private void setArithmeticFlags(int reg) { zeroFlag = (reg == 0); negativeFlag = (reg & 0x80) != 0; },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,getLastProgramCounter,public int getLastProgramCounter() { return lastPc; },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,toString,"public String toString() { String opcode = opcode(ir, args[0], args[1]); StringBuffer sb = new StringBuffer(getInstructionByteStatus()); sb.append("" ""); sb.append(String.format(""%-14s"", opcode)); sb.append(""A:"" + String.format(""%02x"", a) + "" ""); sb.append(""X:"" + String.format(""%02x"", x) + "" ""); sb.append(""Y:"" + String.format(""%02x"", y) + "" ""); sb.append(""F:"" + String.format(""%02x"", getProcessorStatus()) + "" ""); sb.append(""S:"" + String.format(""1%02x"", sp) + "" ""); sb.append(getProcessorStatusString()); return sb.toString(); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,delayLoop,private void delayLoop(int opcode) { int clockSteps = Cpu.instructionClocks[0xff & opcode]; if (clockSteps == 0) { clockSteps = 1; } long startTime = System.nanoTime(); long stopTime = startTime + (CLOCK_IN_NS * clockSteps); while (System.nanoTime() < stopTime) { ; } },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,opcode,"String opcode(int opcode, int op1, int op2) { String opcodeName = Cpu.opcodeNames[opcode]; if (opcodeName == null) { return ""???""; } StringBuffer sb = new StringBuffer(opcodeName); switch (Cpu.instructionModes[opcode]) { case ABS: sb.append(String.format("" $%04X"", address(op1, op2))); break; case ABX: sb.append(String.format("" $%04X,X"", address(op1, op2))); break; case ABY: sb.append(String.format("" $%04X,Y"", address(op1, op2))); break; case IMM: sb.append(String.format("" #$%02X"", op1)); break; case IND: sb.append(String.format("" ($%04X)"", address(op1, op2))); break; case XIN: sb.append(String.format("" ($%02X,X)"", op1)); break; case INY: sb.append(String.format("" ($%02X),Y"", op1)); break; case REL: case ZPG: sb.append(String.format("" $%02X"", op1)); break; case ZPX: sb.append(String.format("" $%02X,X"", op1)); break; case ZPY: sb.append(String.format("" $%02X,Y"", op1)); break; } return sb.toString(); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Cpu.java,getInstructionByteStatus,"public String getInstructionByteStatus() { switch (Cpu.instructionSizes[ir]) { case 0: case 1: return String.format(""%04X %02X "", addr, ir); case 2: return String.format(""%04X %02X %02X "", addr, ir, args[0]); case 3: return String.format(""%04X %02X %02X %02X"", addr, ir, args[0], args[1]); default: return null; } }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (actionEvent.getSource() == resetButton) { coldReset(); } else if (actionEvent.getSource() == stepButton) { handleStep(); } else if (actionEvent.getSource() == runStopButton) { console.requestFocus(); if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } else { runLoop = new RunLoop(); runLoop.start(); } } },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Simulator.java,coldReset,"private void coldReset() { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Cold reset requested. Resetting CPU and clearing memory.""); cpu.reset(); ram.fill(0x00); console.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Simulator.java,step,"private void step() throws MemoryAccessException { cpu.step(); if (acia.hasTxChar()) { console.print(Character.toString((char)acia.txRead())); console.repaint(); } try { if (console.hasInput()) { acia.rxWrite((int)console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Simulator.java,loadProgram,"private void loadProgram(byte[] program, int startAddress) throws MemoryAccessException { int addr = startAddress, i; for (i = 0; i < program.length; i++) { bus.write(addr++, program[i] & 0xff); } logger.log(Level.INFO, ""Loaded "" + i + "" bytes at address 0x"" + Integer.toString(startAddress, 16)); cpu.reset(); cpu.setProgramCounter(preferences.getProgramStartAddress()); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Simulator.java,main,public static void main(String args[]) { SwingUtilities.invokeLater(new Runnable() { public void run() { try { Simulator simulator = new Simulator(); simulator.createAndShowUi(); simulator.coldReset(); } catch (Exception e) { e.printStackTrace(); } } }); },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Simulator.java,run,public void run() { try { Simulator simulator = new Simulator(); simulator.createAndShowUi(); simulator.coldReset(); } catch (Exception e) { e.printStackTrace(); } },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Memory.java,makeROM,"public static Memory makeROM(int address, int size, File f) throws MemoryRangeException, IOException { Memory memory = new Memory(address, size, true); memory.loadFromFile(f); return memory; }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Memory.java,makeRAM,"public static Memory makeRAM(int address, int size) throws MemoryRangeException { Memory memory = new Memory(address, size, false); return memory; }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Memory.java,loadFromFile,"public void loadFromFile(File file) throws MemoryRangeException, IOException { if (file.canRead()) { long fileSize = file.length(); if (fileSize > mem.length) { throw new MemoryRangeException(""File will not fit in available memory.""); } else { int i = 0; FileInputStream fis = new FileInputStream(file); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { mem[i++] = dis.readUnsignedByte(); } } } else { throw new IOException(""Cannot open file "" + file); } }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Console.java,reset,public void reset() { typeAheadBuffer.reset(); getModel().clear(); getModel().setCursorColumn(0); getModel().setCursorRow(0); repaint(); },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Console.java,hasInput,public boolean hasInput() { return !typeAheadBuffer.isEmpty(); },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Console.java,keyTyped,public void keyTyped(KeyEvent keyEvent) { char keyTyped = keyEvent.getKeyChar(); if (SWAP_CR_AND_LF) { if (keyTyped == 0x0a) { keyTyped = 0x0d; } else if (keyTyped == 0x0d) { keyTyped = 0x0a; } } if (SEND_CR_LF_FOR_CR && keyTyped == 0x0d) { typeAheadBuffer.push(0x0d); typeAheadBuffer.push(0x0a); } else { typeAheadBuffer.push(keyTyped); } keyEvent.consume(); },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Console.java,keyPressed,public void keyPressed(KeyEvent keyEvent) { keyEvent.consume(); },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,Console.java,readInputChar,public char readInputChar() throws FifoUnderrunException { return (char)typeAheadBuffer.pop(); },https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_ORA,"public void test_ORA() throws MemoryAccessException { bus.write(0x7f00, 0x00); bus.write(0x7f02, 0x11); bus.write(0x3504, 0x22); bus.write(0x3508, 0x44); bus.write(0x1210, 0x88); bus.loadProgram(0x0d, 0x00, 0x7f, 0x0d, 0x02, 0x7f, 0x0d, 0x04, 0x35, 0x0d, 0x08, 0x35, 0x0d, 0x10, 0x12); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.write(0x7f00, 0x00); bus.write(0x7f01, 0x01); bus.write(0x3502, 0x02); bus.write(0x3503, 0x44); bus.write(0x1204, 0x80); bus.loadProgram(0x0e, 0x00, 0x7f, 0x0e, 0x01, 0x7f, 0x0e, 0x02, 0x35, 0x0e, 0x03, 0x35, 0x0e, 0x04, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x7f00)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x7f01)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x3502)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x3503)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1204)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_BIT,"public void test_BIT() throws MemoryAccessException { bus.write(0x1200, 0xc0); bus.loadProgram(0xa9, 0x01, 0x2c, 0x00, 0x12, 0xa9, 0x0f, 0x2c, 0x00, 0x12, 0xa9, 0x40, 0x2c, 0x00, 0x12, 0xa9, 0x80, 0x2c, 0x00, 0x12, 0xa9, 0xc0, 0x2c, 0x00, 0x12, 0xa9, 0xff, 0x2c, 0x00, 0x12); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_AND,"public void test_AND() throws MemoryAccessException { bus.write(0x1200, 0x00); bus.write(0x1201, 0x11); bus.write(0x1202, 0xff); bus.write(0x1203, 0x99); bus.write(0x1204, 0x11); bus.write(0x1205, 0x0f); bus.loadProgram(0x2d, 0x00, 0x12, 0x2d, 0x01, 0x12, 0xa9, 0xaa, 0x2d, 0x02, 0x12, 0x2d, 0x03, 0x12, 0x2d, 0x04, 0x12, 0xa9, 0xff, 0x2d, 0x05, 0x12); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0xaa, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(2); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.write(0x1200, 0x00); bus.write(0x1201, 0x01); bus.loadProgram(0x2e, 0x00, 0x12, 0x2e, 0x01, 0x12, 0x38, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1200)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x1201)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_JMP,"public void test_JMP() throws MemoryAccessException { bus.loadProgram(0x4c, 0x00, 0x34); cpu.step(); assertEquals(0x3400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_EOR,"public void test_EOR() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0xff); bus.write(0x1212, 0x33); bus.write(0x1213, 0x44); bus.loadProgram(0xa9, 0x88, 0x4d, 0x10, 0x12, 0x4d, 0x11, 0x12, 0x4d, 0x12, 0x12, 0x4d, 0x13, 0x12); cpu.step(2); assertEquals(0x88, cpu.getAccumulator()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.write(0x1200, 0x00); bus.write(0x1201, 0x01); bus.write(0x1202, 0x02); bus.write(0x1203, 0x44); bus.write(0x1204, 0x80); bus.write(0x1205, 0x02); bus.loadProgram(0x4e, 0x00, 0x12, 0x4e, 0x01, 0x12, 0x4e, 0x02, 0x12, 0x4e, 0x03, 0x12, 0x4e, 0x04, 0x12, 0x38, 0x4e, 0x05, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1200)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1201)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x1202)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0x1203)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1204)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x1205)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x10); bus.loadProgram(0x6e, 0x10, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1211)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setYRegister(0x00); bus.loadProgram(0x8c, 0x10, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x8c, 0x10, 0x12); cpu.step(); assertEquals(0x0f, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x8c, 0x10, 0x12); cpu.step(); assertEquals(0x80, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setAccumulator(0x00); bus.loadProgram(0x8d, 0x10, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x8d, 0x10, 0x12); cpu.step(); assertEquals(0x0f, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x8d, 0x10, 0x12); cpu.step(); assertEquals(0x80, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_STX,"public void test_STX() throws MemoryAccessException { cpu.setXRegister(0x00); bus.loadProgram(0x8e, 0x10, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x0f); bus.loadProgram(0x8e, 0x10, 0x12); cpu.step(); assertEquals(0x0f, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x80); bus.loadProgram(0x8e, 0x10, 0x12); cpu.step(); assertEquals(0x80, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_LDA,"public void test_LDA() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x0f); bus.write(0x1212, 0x80); bus.loadProgram(0xad, 0x10, 0x12, 0xad, 0x11, 0x12, 0xad, 0x12, 0x12); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_LDX,"public void test_LDX() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x0f); bus.write(0x1212, 0x80); bus.loadProgram(0xae, 0x10, 0x12, 0xae, 0x11, 0x12, 0xae, 0x12, 0x12); cpu.step(); assertEquals(0x00, cpu.getXRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getXRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_LDY,"public void test_LDY() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x0f); bus.write(0x1212, 0x80); bus.loadProgram(0xbc, 0x10, 0x12, 0xbc, 0x11, 0x12, 0xbc, 0x12, 0x12); cpu.step(); assertEquals(0x00, cpu.getYRegister()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x0f, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, cpu.getYRegister()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x80); bus.write(0x1212, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xcd, 0x10, 0x12, 0xcd, 0x11, 0x12, 0xcd, 0x12, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_CPY,"public void test_CPY() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x80); bus.write(0x1212, 0xff); cpu.setYRegister(0x80); bus.loadProgram(0xcc, 0x10, 0x12, 0xcc, 0x11, 0x12, 0xcc, 0x12, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_DEC,"public void test_DEC() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x01); bus.write(0x1212, 0x80); bus.write(0x1213, 0xff); bus.loadProgram(0xce, 0x10, 0x12, 0xce, 0x11, 0x12, 0xce, 0x12, 0x12, 0xce, 0x13, 0x12); cpu.step(); assertEquals(0xff, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1211)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0x1212)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0x1213)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_CPX,"public void test_CPX() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x80); bus.write(0x1212, 0xff); cpu.setXRegister(0x80); bus.loadProgram(0xec, 0x10, 0x12, 0xec, 0x11, 0x12, 0xec, 0x12, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteModeTest.java,test_INC,"public void test_INC() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x7f); bus.write(0x1212, 0xff); bus.loadProgram(0xee, 0x10, 0x12, 0xee, 0x11, 0x12, 0xee, 0x12, 0x12); cpu.step(); assertEquals(0x01, bus.read(0x1210)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0x1211)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1212)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteXModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x0f); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x80); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteXModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0x80); bus.write(0xab42, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xdd, 0x10, 0xab, 0xdd, 0x11, 0xab, 0xdd, 0x12, 0xab); cpu.setXRegister(0x30); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteYModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setYRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setAccumulator(0x0f); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setAccumulator(0x80); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuAbsoluteYModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0x80); bus.write(0xab42, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xd9, 0x10, 0xab, 0xd9, 0x11, 0xab, 0xd9, 0x12, 0xab); cpu.setYRegister(0x30); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuImmediateModeTest.java,setUp,"public void setUp() throws MemoryRangeException, MemoryAccessException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Cpu.DEFAULT_BASE_ADDRESS & 0x00ff); bus.write(0xfffd, (Cpu.DEFAULT_BASE_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuImmediateModeTest.java,test_CPY_SetsCarryFlagIfYGreaterThanMemory,"public void test_CPY_SetsCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa0, 0x0a, 0xc0, 0x08); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0xfa, 0xc0, 0x80); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuImmediateModeTest.java,test_CPY_DoesNotSetCarryFlagIfYLessThanThanMemory,"public void test_CPY_DoesNotSetCarryFlagIfYLessThanThanMemory() throws MemoryAccessException { bus.loadProgram(0xa0, 0x08, 0xc0, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa0, 0x70, 0xc0, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuImmediateModeTest.java,test_CMP_SetsCarryFlagIfYGreaterThanMemory,"public void test_CMP_SetsCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa9, 0x0a, 0xc9, 0x08); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0xfa, 0xc9, 0x80); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuImmediateModeTest.java,test_CMP_DoesNotSetCarryFlagIfYGreaterThanMemory,"public void test_CMP_DoesNotSetCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa9, 0x08, 0xc9, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa9, 0x70, 0xc9, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuImmediateModeTest.java,test_CPX_SetsCarryFlagIfYGreaterThanMemory,"public void test_CPX_SetsCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa2, 0x0a, 0xe0, 0x08); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0xfa, 0xe0, 0x80); cpu.step(2); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuImmediateModeTest.java,test_CPX_DoesNotSetCarryFlagIfYGreaterThanMemory,"public void test_CPX_DoesNotSetCarryFlagIfYGreaterThanMemory() throws MemoryAccessException { bus.loadProgram(0xa2, 0x08, 0xe0, 0x0a); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.reset(); bus.loadProgram(0xa2, 0x70, 0xe0, 0x80); cpu.step(2); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageModeTest.java,test_BIT,"public void test_BIT() throws MemoryAccessException { bus.write(0x0000, 0xc0); bus.write(0x0010, 0x40); bus.write(0x0020, 0x80); bus.loadProgram(0xa9, 0x01, 0x24, 0x00, 0xa9, 0x0f, 0x24, 0x00, 0xa9, 0x40, 0x24, 0x20, 0xa9, 0x80, 0x24, 0x10, 0xa9, 0xc0, 0x24, 0x00, 0xa9, 0xff, 0x24, 0x00); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.step(2); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); cpu.step(2); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertTrue(cpu.getOverflowFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setYRegister(0x00); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setAccumulator(0x00); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageModeTest.java,test_STX,"public void test_STX() throws MemoryAccessException { cpu.setXRegister(0x00); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x0f); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x80); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageModeTest.java,test_CPY,"public void test_CPY() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x80); bus.write(0x12, 0xff); cpu.setYRegister(0x80); bus.loadProgram(0xc4, 0x10, 0xc4, 0x11, 0xc4, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x80); bus.write(0x12, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xc5, 0x10, 0xc5, 0x11, 0xc5, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageModeTest.java,test_CPX,"public void test_CPX() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x80); bus.write(0x12, 0xff); cpu.setXRegister(0x80); bus.loadProgram(0xe4, 0x10, 0xe4, 0x11, 0xe4, 0x12); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageXModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setYRegister(0x00); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setYRegister(0x0f); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setYRegister(0x80); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageXModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x0f); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x80); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageXModeTest.java,test_CMP,"public void test_CMP() throws MemoryAccessException { bus.write(0x40, 0x00); bus.write(0x41, 0x80); bus.write(0x42, 0xff); cpu.setAccumulator(0x80); bus.loadProgram(0xd5, 0x10, 0xd5, 0x11, 0xd5, 0x12); cpu.setXRegister(0x30); cpu.step(); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
795ccfde5d01917ff4d9542d26fde5709c9284fb,CpuZeroPageYModeTest.java,test_STX,"public void test_STX() throws MemoryAccessException { cpu.setYRegister(0x30); cpu.setXRegister(0x00); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setXRegister(0x0f); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setXRegister(0x80); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/795ccfde5d01917ff4d9542d26fde5709c9284fb
2ebdd254b3611d11aad0776a6d85548d8f520f23,Bus.java,addDevice,"public void addDevice(Device device) throws MemoryRangeException { MemoryRange memRange = device.getMemoryRange(); for (Device d : devices) { if (d.getMemoryRange().overlaps(memRange)) { throw new MemoryRangeException(""The device being added at "" + String.format(""$%04X"", memRange.startAddress()) + "" overlaps with an existing "" + ""device, '"" + d + ""'""); } } device.setBus(this); devices.add(device); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Bus.java,removeDevice,public void removeDevice(Device device) { if (devices.contains(device)) { devices.remove(device); } },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Bus.java,addCpu,public void addCpu(Cpu cpu) { this.cpu = cpu; cpu.setBus(this); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Cpu.java,setBehavior,public void setBehavior(CpuBehavior behavior) { this.behavior = behavior; },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Cpu.java,getBehavior,public CpuBehavior getBehavior() { return behavior; },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Cpu.java,step,"public void step() throws MemoryAccessException { addr = pc; ir = bus.read(pc); irAddressMode = (ir >> 2) & 0x07; irOpMode = ir & 0x03; incrementPC(); clearOpTrap(); instSize = Cpu.instructionSizes[ir]; for (int i = 0; i < instSize - 1; i++) { args[i] = bus.read(pc); incrementPC(); } stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = args[0]; break; case 2: break; case 3: effectiveAddress = address(args[0], args[1]); break; case 5: if (ir == 0x96 || ir == 0xb6) { effectiveAddress = zpyAddress(args[0]); } else { effectiveAddress = zpxAddress(args[0]); } break; case 7: if (ir == 0xbe) { effectiveAddress = yAddress(args[0], args[1]); } else { effectiveAddress = xAddress(args[0], args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = args[0] + getXRegister(); effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(args[0], args[1]); break; case 4: tmp = address(bus.read(args[0]), bus.read((args[0] + 1) & 0xff)); effectiveAddress = (tmp + getYRegister()) & 0xffff; break; case 5: effectiveAddress = zpxAddress(args[0]); break; case 6: effectiveAddress = yAddress(args[0], args[1]); break; case 7: effectiveAddress = xAddress(args[0], args[1]); break; } break; } switch (ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((pc + 2 >> 8) & 0xff); stackPush(pc + 2 & 0xff); stackPush(getProcessorStatus()); setIrqDisableFlag(); pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(getProcessorStatus()); break; case 0x10: if (!getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((pc - 1 >> 8) & 0xff); stackPush(pc - 1 & 0xff); pc = address(args[0], args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { pc = relAddress(args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(a); break; case 0x50: if (!getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: a = stackPop(); setArithmeticFlags(a); break; case 0x70: if (getOverflowFlag()) { pc = relAddress(args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: y = --y & 0xff; setArithmeticFlags(y); break; case 0x8a: a = x; setArithmeticFlags(a); break; case 0x90: if (!getCarryFlag()) { pc = relAddress(args[0]); } break; case 0x98: a = y; setArithmeticFlags(a); break; case 0x9a: setStackPointer(x); break; case 0xa8: y = a; setArithmeticFlags(y); break; case 0xaa: x = a; setArithmeticFlags(x); break; case 0xb0: if (getCarryFlag()) { pc = relAddress(args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: x = getStackPointer(); setArithmeticFlags(x); break; case 0xc8: y = ++y & 0xff; setArithmeticFlags(y); break; case 0xca: x = --x & 0xff; setArithmeticFlags(x); break; case 0xd0: if (!getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: x = ++x & 0xff; setArithmeticFlags(x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { pc = relAddress(args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: pc = address(args[0], args[1]); break; case 0x6c: lo = address(args[0], args[1]); if (args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = address(0x00, args[1]); } else { hi = lo + 1; } pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: a |= args[0]; setArithmeticFlags(a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: a |= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x0a: a = asl(a); setArithmeticFlags(a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: a &= args[0]; setArithmeticFlags(a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: a &= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x2a: a = rol(a); setArithmeticFlags(a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: a ^= args[0]; setArithmeticFlags(a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: a ^= bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0x4a: a = lsr(a); setArithmeticFlags(a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (decimalModeFlag) { a = adcDecimal(a, args[0]); } else { a = adc(a, args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (decimalModeFlag) { a = adcDecimal(a, bus.read(effectiveAddress)); } else { a = adc(a, bus.read(effectiveAddress)); } break; case 0x6a: a = ror(a); setArithmeticFlags(a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, x); break; case 0xa0: y = args[0]; setArithmeticFlags(y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: y = bus.read(effectiveAddress); setArithmeticFlags(y); break; case 0xa2: x = args[0]; setArithmeticFlags(x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: x = bus.read(effectiveAddress); setArithmeticFlags(x); break; case 0xa9: a = args[0]; setArithmeticFlags(a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: a = bus.read(effectiveAddress); setArithmeticFlags(a); break; case 0xc0: cmp(y, args[0]); break; case 0xc4: case 0xcc: cmp(y, bus.read(effectiveAddress)); break; case 0xc9: cmp(a, args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(x, args[0]); break; case 0xe4: case 0xec: cmp(x, bus.read(effectiveAddress)); break; case 0xe9: if (decimalModeFlag) { a = sbcDecimal(a, args[0]); } else { a = sbc(a, args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (decimalModeFlag) { a = sbcDecimal(a, bus.read(effectiveAddress)); } else { a = sbc(a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(ir); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); mainWindow.setJMenuBar(createMenuBar()); this.console = new com.loomcom.symon.ui.Console(); this.statusPane = new StatusPanel(); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); preferences.addObserver(this); JPanel controlsContainer = new JPanel(); JPanel buttonContainer = new JPanel(); Dimension buttonPanelSize = new Dimension(console.getWidth(), 36); buttonContainer.setMinimumSize(buttonPanelSize); buttonContainer.setMaximumSize(buttonPanelSize); buttonContainer.setPreferredSize(buttonPanelSize); controlsContainer.setLayout(new BorderLayout()); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(resetButton); controlsContainer.add(console, BorderLayout.PAGE_START); mainWindow.getContentPane().add(controlsContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(this); stepButton.addActionListener(this); resetButton.addActionListener(this); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); console.requestFocus(); mainWindow.pack(); mainWindow.setVisible(true); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,createMenuBar,"private JMenuBar createMenuBar() { JMenuBar menuBar = new JMenuBar(); JMenu fileMenu = new JMenu(""File""); menuBar.add(fileMenu); loadProgramItem = new JMenuItem(""Load Program""); loadProgramItem.setMnemonic(KeyEvent.VK_L); loadRomItem = new JMenuItem(""Load ROM...""); loadRomItem.setMnemonic(KeyEvent.VK_R); JMenuItem prefsItem = new JMenuItem(""Preferences...""); prefsItem.setMnemonic(KeyEvent.VK_P); JMenuItem quitItem = new JMenuItem(""Quit""); quitItem.setMnemonic(KeyEvent.VK_Q); loadProgramItem.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleProgramLoad(); } }); loadRomItem.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleRomLoad(); } }); prefsItem.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { showAndUpdatePreferences(); } }); quitItem.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleQuit(); } }); fileMenu.add(loadProgramItem); fileMenu.add(loadRomItem); fileMenu.add(prefsItem); fileMenu.add(quitItem); return menuBar; }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { handleRomLoad(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (actionEvent.getSource() == resetButton) { coldReset(); } else if (actionEvent.getSource() == stepButton) { handleStep(); } else if (actionEvent.getSource() == runStopButton) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,handleStart,private void handleStart() { console.requestFocus(); runLoop = new RunLoop(); runLoop.start(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,handleStop,private void handleStop() { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; simulatorDidStop(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,simulatorDidStop,private void simulatorDidStop() { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,handleRomLoad,"private void handleRomLoad() { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File romFile = fileChooser.getSelectedFile(); if (romFile.canRead()) { long fileSize = romFile.length(); if (fileSize != ROM_SIZE) { throw new IOException(""ROM file must be exactly "" + String.valueOf(fileSize) + "" bytes.""); } else { if (rom != null) { bus.removeDevice(rom); } bus.addDevice(Memory.makeROM(ROM_BASE, ROM_SIZE, romFile)); logger.log(Level.INFO, ""ROM File `"" + romFile.getName() + ""' loaded at "" + String.format(""0x%04X"", ROM_BASE)); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read file: "" + ex.getMessage()); ex.printStackTrace(); } catch (MemoryRangeException ex) { logger.log(Level.SEVERE, ""Memory range error loading ROM""); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,handleStep,"private void handleStep() { try { step(); simulatorDidStop(); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { console.startListening(); stepButton.setEnabled(false); loadProgramItem.setEnabled(false); loadRomItem.setEnabled(false); runStopButton.setText(""Stop""); } }); try { while (isRunning && !cpu.getBreakFlag()) { step(); } } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { console.stopListening(); stepButton.setEnabled(true); loadProgramItem.setEnabled(true); loadRomItem.setEnabled(true); runStopButton.setText(""Run""); statusPane.updateState(cpu); } }); logger.log(Level.INFO, ""Exiting main run loop. BREAK="" + cpu.getBreakBit() + ""; RUN_FLAG="" + isRunning); isRunning = false; }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,run,"public void run() { console.startListening(); stepButton.setEnabled(false); loadProgramItem.setEnabled(false); loadRomItem.setEnabled(false); runStopButton.setText(""Stop""); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Simulator.java,run,"public void run() { console.stopListening(); stepButton.setEnabled(true); loadProgramItem.setEnabled(true); loadRomItem.setEnabled(true); runStopButton.setText(""Run""); statusPane.updateState(cpu); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Via.java,write,"public void write(int address, int data) throws MemoryAccessException { }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Via.java,read,public int read(int address) throws MemoryAccessException { return 0; },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Via.java,toString,public String toString() { return null; },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Console.java,startListening,public void startListening() { this.isListening = true; },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Console.java,stopListening,public void stopListening() { this.isListening = false; },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Console.java,keyTyped,public void keyTyped(KeyEvent keyEvent) { if (isListening) { char keyTyped = keyEvent.getKeyChar(); if (SWAP_CR_AND_LF) { if (keyTyped == 0x0a) { keyTyped = 0x0d; } else if (keyTyped == 0x0d) { keyTyped = 0x0a; } } if (SEND_CR_LF_FOR_CR && keyTyped == 0x0d) { typeAheadBuffer.push((char) 0x0d); typeAheadBuffer.push((char) 0x0a); } else { typeAheadBuffer.push(keyTyped); } } keyEvent.consume(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,Console.java,readInputChar,public char readInputChar() throws FifoUnderrunException { return typeAheadBuffer.pop(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,FifoRingBuffer.java,pop,public E pop() throws FifoUnderrunException { return fifoBuffer.remove(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,FifoRingBuffer.java,isEmpty,public boolean isEmpty() { return fifoBuffer.isEmpty(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,FifoRingBuffer.java,push,public void push(E val) { if (fifoBuffer.size() == maxLength) { fifoBuffer.remove(); } fifoBuffer.offer(val); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,FifoRingBuffer.java,peek,public E peek() { return fifoBuffer.peek(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,FifoRingBuffer.java,reset,public void reset() { fifoBuffer.clear(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,FifoRingBuffer.java,length,public int length() { return fifoBuffer.size(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,FifoRingBuffer.java,toString,"public String toString() { return ""[FifoRingBuffer: size="" + fifoBuffer.size() + ""]""; }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,FifoRingBuffer.java,iterator,public Iterator<E> iterator() { return fifoBuffer.iterator(); },https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuAbsoluteModeTest.java,setUp,"protected void setUp() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuAccumulatorModeTest.java,setUp,"public void setUp() throws MemoryRangeException, MemoryAccessException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00)>>>8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuImmediateModeTest.java,setUp,"public void setUp() throws MemoryRangeException, MemoryAccessException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuIndexedIndirectModeTest.java,runBeforeEveryTest,"public void runBeforeEveryTest() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00)>>>8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuIndirectModeTest.java,test_JMP_notOnPageBoundary,"public void test_JMP_notOnPageBoundary() throws MemoryAccessException { bus.write(0x3400, 0x00); bus.write(0x3401, 0x54); bus.loadProgram(0x6c, 0x00, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuIndirectModeTest.java,test_JMP_with_ROR_Bug,"public void test_JMP_with_ROR_Bug() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.NMOS_WITH_ROR_BUG); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x2200, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuIndirectModeTest.java,test_JMP_withIndirectBug,"public void test_JMP_withIndirectBug() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x2200, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuIndirectModeTest.java,test_JMP_withOutIndirectBug,"public void test_JMP_withOutIndirectBug() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.NMOS_WITHOUT_INDIRECT_JMP_BUG); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuIndirectModeTest.java,test_JMP_cmos,"public void test_JMP_cmos() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.CMOS); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,CpuRelativeModeTest.java,setUp,"protected void setUp() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00)>>>8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
2ebdd254b3611d11aad0776a6d85548d8f520f23,FifoRingBufferTest.java,testRingBufferShouldDeleteOldestItemIfAtMaximum,"public void testRingBufferShouldDeleteOldestItemIfAtMaximum() { FifoRingBuffer<Character> buffer = new FifoRingBuffer<Character>(3); assertEquals(0, buffer.length()); buffer.push('a'); assertEquals(1, buffer.length()); assertTrue('a' == buffer.peek()); buffer.push('b'); assertEquals(2, buffer.length()); assertTrue('a' == buffer.peek()); buffer.push('c'); assertEquals(3, buffer.length()); assertTrue('a' == buffer.peek()); buffer.push('d'); assertEquals(3, buffer.length()); assertTrue('b' == buffer.peek()); buffer.push('e'); assertEquals(3, buffer.length()); assertTrue('c' == buffer.peek()); }",https://www.github.com/sethm/symon/commit/2ebdd254b3611d11aad0776a6d85548d8f520f23
a7d9239ef1a9d591b8dbc6352b84ba18fdadcbfb,Simulator.java,handleRomLoad,"private void handleRomLoad() { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File romFile = fileChooser.getSelectedFile(); if (romFile.canRead()) { long fileSize = romFile.length(); if (fileSize != ROM_SIZE) { throw new IOException(""ROM file must be exactly "" + String.valueOf(fileSize) + "" bytes.""); } else { if (rom != null) { bus.removeDevice(rom); } rom = Memory.makeROM(ROM_BASE, ROM_SIZE, romFile); bus.addDevice(rom); logger.log(Level.INFO, ""ROM File `"" + romFile.getName() + ""' loaded at "" + String.format(""0x%04X"", ROM_BASE)); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read file: "" + ex.getMessage()); ex.printStackTrace(); } catch (MemoryRangeException ex) { logger.log(Level.SEVERE, ""Memory range error loading ROM""); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/a7d9239ef1a9d591b8dbc6352b84ba18fdadcbfb
38a4458affe47d938ddce6b993b21f5af27f07fb,Preferences.java,getHaltOnBreak,public boolean getHaltOnBreak();,https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); preferences.addObserver(this); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); console.requestFocus(); mainWindow.pack(); mainWindow.setVisible(true); }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { handleStep(); },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { handleReset(); },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,handleReset,"private void handleReset() { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Cold reset requested. Resetting CPU and clearing memory.""); cpu.reset(); ram.fill(0x00); console.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,main,public static void main(String args[]) { SwingUtilities.invokeLater(new Runnable() { public void run() { try { Simulator simulator = new Simulator(); simulator.createAndShowUi(); simulator.handleReset(); } catch (Exception e) { e.printStackTrace(); } } }); },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,run,public void run() { try { Simulator simulator = new Simulator(); simulator.createAndShowUi(); simulator.handleReset(); } catch (Exception e) { e.printStackTrace(); } },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { console.startListening(); stepButton.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { while (isRunning && !(preferences.getHaltOnBreak() && cpu.getBreakFlag())) { step(); } } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { console.stopListening(); stepButton.setEnabled(true); menuBar.simulatorDidStop(); runStopButton.setText(""Run""); statusPane.updateState(cpu); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,run,"public void run() { console.startListening(); stepButton.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,run,"public void run() { console.stopListening(); stepButton.setEnabled(true); menuBar.simulatorDidStop(); runStopButton.setText(""Run""); statusPane.updateState(cpu); }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > MEMORY_SIZE) { throw new IOException(""Program will not fit in available memory.""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } SwingUtilities.invokeLater(new Runnable() { public void run() { console.reset(); } }); loadProgram(program, preferences.getProgramStartAddress()); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read program file: "" + ex.getMessage()); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error loading program: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File romFile = fileChooser.getSelectedFile(); if (romFile.canRead()) { long fileSize = romFile.length(); if (fileSize != ROM_SIZE) { throw new IOException(""ROM file must be exactly "" + String.valueOf(ROM_SIZE) + "" bytes.""); } else { if (rom != null) { bus.removeDevice(rom); } rom = Memory.makeROM(ROM_BASE, ROM_SIZE, romFile); bus.addDevice(rom); cpu.reset(); logger.log(Level.INFO, ""ROM File `"" + romFile.getName() + ""' loaded at "" + String.format(""0x%04X"", ROM_BASE)); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read ROM file: "" + ex.getMessage()); } catch (MemoryRangeException ex) { logger.log(Level.SEVERE, ""Memory range error while loading ROM file: "" + ex.getMessage()); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error while loading ROM file: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { preferences.getDialog().setVisible(true); },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); } System.exit(0); },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { SwingUtilities.invokeLater(new Runnable() { public void run() { console.setFont(new Font(""Monospaced"", Font.PLAIN, size)); mainWindow.pack(); } }); }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,run,"public void run() { console.setFont(new Font(""Monospaced"", Font.PLAIN, size)); mainWindow.pack(); }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,simulatorDidStart,public void simulatorDidStart() { loadProgramItem.setEnabled(false); loadRomItem.setEnabled(false); },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,simulatorDidStop,public void simulatorDidStop() { loadProgramItem.setEnabled(true); loadRomItem.setEnabled(true); },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); loadRomItem = new JMenuItem(new LoadRomAction()); JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(loadProgramItem); fileMenu.add(loadRomItem); fileMenu.add(prefsItem); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Font Size""); ButtonGroup group = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, group); makeFontSizeMenuItem(11, fontSubMenu, group); makeFontSizeMenuItem(12, fontSubMenu, group); makeFontSizeMenuItem(13, fontSubMenu, group); makeFontSizeMenuItem(14, fontSubMenu, group); makeFontSizeMenuItem(15, fontSubMenu, group); makeFontSizeMenuItem(16, fontSubMenu, group); makeFontSizeMenuItem(17, fontSubMenu, group); makeFontSizeMenuItem(18, fontSubMenu, group); makeFontSizeMenuItem(19, fontSubMenu, group); makeFontSizeMenuItem(20, fontSubMenu, group); viewMenu.add(fontSubMenu); add(viewMenu); }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,Simulator.java,makeFontSizeMenuItem,"private void makeFontSizeMenuItem(int size, JMenu fontSubMenu, ButtonGroup group) { Action action = new SetFontAction(size); JRadioButtonMenuItem item = new JRadioButtonMenuItem(action); item.setSelected(size == DEFAULT_FONT_SIZE); fontSubMenu.add(item); group.add(item); }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,PreferencesDialog.java,initComponents,"private void initComponents() { dialog.setTitle(""Preferences""); Container contents = dialog.getContentPane(); JPanel settingsContainer = new JPanel(); JPanel buttonsContainer = new JPanel(); GridBagLayout layout = new GridBagLayout(); settingsContainer.setLayout(layout); final JLabel haltOnBreakLabel = new JLabel(""Halt on BRK""); final JLabel programLoadAddressLabel = new JLabel(""Program Load Address""); final JLabel borderWidthLabel = new JLabel(""Console Border Width""); haltOnBreakCheckBox = new JCheckBox(); programLoadAddressField = new JTextField(8); borderWidthField = new JTextField(8); programLoadAddressLabel.setLabelFor(programLoadAddressField); borderWidthLabel.setLabelFor(borderWidthField); GridBagConstraints constraints = new GridBagConstraints(); constraints.insets = new Insets(5, 5, 5, 5); constraints.fill = GridBagConstraints.HORIZONTAL; constraints.gridx = 0; constraints.gridy = 0; settingsContainer.add(haltOnBreakLabel, constraints); constraints.gridx = 1; settingsContainer.add(haltOnBreakCheckBox, constraints); constraints.gridy = 1; constraints.gridx = 0; settingsContainer.add(programLoadAddressLabel, constraints); constraints.gridx = 1; settingsContainer.add(programLoadAddressField, constraints); constraints.gridy = 2; constraints.gridx = 0; settingsContainer.add(borderWidthLabel, constraints); constraints.gridx = 1; settingsContainer.add(borderWidthField, constraints); JButton applyButton = new JButton(""Apply""); JButton cancelButton = new JButton(""Cancel""); cancelButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { updateUi(); dialog.setVisible(false); } }); applyButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { haltOnBreak = haltOnBreakCheckBox.isSelected(); programLoadAddress = hexToInt(programLoadAddressField.getText()); borderWidth = Integer.parseInt(borderWidthField.getText()); updateUi(); setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); } }); buttonsContainer.add(applyButton); buttonsContainer.add(cancelButton); contents.add(settingsContainer, BorderLayout.PAGE_START); contents.add(buttonsContainer, BorderLayout.PAGE_END); dialog.pack(); }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,PreferencesDialog.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { haltOnBreak = haltOnBreakCheckBox.isSelected(); programLoadAddress = hexToInt(programLoadAddressField.getText()); borderWidth = Integer.parseInt(borderWidthField.getText()); updateUi(); setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,PreferencesDialog.java,getHaltOnBreak,public boolean getHaltOnBreak() { return haltOnBreak; },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,PreferencesDialog.java,updateUi,public void updateUi() { haltOnBreakCheckBox.setSelected(haltOnBreak); programLoadAddressField.setText(intToHex(programLoadAddress)); borderWidthField.setText(Integer.toString(borderWidth)); },https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
38a4458affe47d938ddce6b993b21f5af27f07fb,StatusPanel.java,makeTextField,"private JTextField makeTextField(Dimension size) { JTextField textField = new JTextField(""""); textField.setAlignmentX(LEFT_ALIGNMENT); textField.setEditable(false); textField.setMinimumSize(size); textField.setMaximumSize(size); textField.setPreferredSize(size); return textField; }",https://www.github.com/sethm/symon/commit/38a4458affe47d938ddce6b993b21f5af27f07fb
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,reset,"public void reset() throws MemoryAccessException { state.sp = 0xff; state.pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); state.ir = 0; state.carryFlag = false; state.zeroFlag = false; state.irqDisableFlag = false; state.decimalModeFlag = false; state.breakFlag = false; state.overflowFlag = false; state.negativeFlag = false; state.opTrap = false; state.stepCounter = 0L; state.a = 0; state.x = 0; state.y = 0; }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,step,"public void step() throws MemoryAccessException { state.lastPc = state.pc; state.ir = bus.read(state.pc); irAddressMode = (state.ir >> 2) & 0x07; irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc); incrementPC(); } state.stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = state.args[0] + state.x; effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 4: tmp = address(bus.read(state.args[0]), bus.read((state.args[0] + 1) & 0xff)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((state.pc + 2 >> 8) & 0xff); stackPush(state.pc + 2 & 0xff); stackPush(state.getStatusFlag()); setIrqDisableFlag(); state.pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(state.getStatusFlag()); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = address(state.args[0], state.args[1]); break; case 0x6c: lo = address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = adc(state.a, bus.read(effectiveAddress)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = sbc(state.a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,adc,"private int adc(int acc, int operand) { int result = (operand & 0xff) + (acc & 0xff) + getCarryBit(); int carry6 = (operand & 0x7f) + (acc & 0x7f) + getCarryBit(); setCarryFlag((result & 0x100) != 0); setOverflowFlag(state.carryFlag ^ ((carry6 & 0x80) != 0)); result &= 0xff; setArithmeticFlags(result); return result; }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,sbcDecimal,"private int sbcDecimal(int acc, int operand) { int l, h, result; l = (acc & 0x0f) - (operand & 0x0f) - (state.carryFlag ? 0 : 1); if ((l & 0x10) != 0) l -= 6; h = (acc >> 4) - (operand >> 4) - ((l & 0x10) != 0 ? 1 : 0); if ((h & 0x10) != 0) h -= 6; result = (l & 0x0f) | (h << 4); setCarryFlag((h & 0xff) < 15); setZeroFlag(result == 0); setNegativeFlag(false); setOverflowFlag(false); return (result & 0xff); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setArithmeticFlags,private void setArithmeticFlags(int reg) { state.zeroFlag = (reg == 0); state.negativeFlag = (reg & 0x80) != 0; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getCpuState,public CpuState getCpuState() { return state; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getNegativeFlag,public boolean getNegativeFlag() { return state.negativeFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setNegativeFlag,public void setNegativeFlag(boolean negativeFlag) { state.negativeFlag = negativeFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setNegativeFlag,public void setNegativeFlag() { state.negativeFlag = true; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,clearNegativeFlag,public void clearNegativeFlag() { state.negativeFlag = false; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getCarryFlag,public boolean getCarryFlag() { return state.carryFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getCarryBit,public int getCarryBit() { return (state.carryFlag ? 1 : 0); },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setCarryFlag,public void setCarryFlag(boolean carryFlag) { state.carryFlag = carryFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setCarryFlag,public void setCarryFlag() { state.carryFlag = true; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,clearCarryFlag,public void clearCarryFlag() { state.carryFlag = false; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getZeroFlag,public boolean getZeroFlag() { return state.zeroFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setZeroFlag,public void setZeroFlag(boolean zeroFlag) { state.zeroFlag = zeroFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setZeroFlag,public void setZeroFlag() { state.zeroFlag = true; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,clearZeroFlag,public void clearZeroFlag() { state.zeroFlag = false; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getIrqDisableFlag,public boolean getIrqDisableFlag() { return state.irqDisableFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setIrqDisableFlag,public void setIrqDisableFlag() { state.irqDisableFlag = true; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,clearIrqDisableFlag,public void clearIrqDisableFlag() { state.irqDisableFlag = false; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getDecimalModeFlag,public boolean getDecimalModeFlag() { return state.decimalModeFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setDecimalModeFlag,public void setDecimalModeFlag() { state.decimalModeFlag = true; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,clearDecimalModeFlag,public void clearDecimalModeFlag() { state.decimalModeFlag = false; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getBreakFlag,public boolean getBreakFlag() { return state.breakFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setBreakFlag,public void setBreakFlag() { state.breakFlag = true; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,clearBreakFlag,public void clearBreakFlag() { state.breakFlag = false; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getOverflowFlag,public boolean getOverflowFlag() { return state.overflowFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setOverflowFlag,public void setOverflowFlag(boolean overflowFlag) { state.overflowFlag = overflowFlag; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setOverflowFlag,public void setOverflowFlag() { state.overflowFlag = true; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,clearOverflowFlag,public void clearOverflowFlag() { state.overflowFlag = false; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setOpTrap,public void setOpTrap() { state.opTrap = true; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,clearOpTrap,public void clearOpTrap() { state.opTrap = false; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getAccumulator,public int getAccumulator() { return state.a; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setAccumulator,public void setAccumulator(int val) { state.a = val; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getXRegister,public int getXRegister() { return state.x; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setXRegister,public void setXRegister(int val) { state.x = val; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getYRegister,public int getYRegister() { return state.y; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setYRegister,public void setYRegister(int val) { state.y = val; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getProgramCounter,public int getProgramCounter() { return state.pc; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setProgramCounter,public void setProgramCounter(int addr) { state.pc = addr; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getStackPointer,public int getStackPointer() { return state.sp; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,setStackPointer,public void setStackPointer(int offset) { state.sp = offset; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getAccumulatorStatus,"public String getAccumulatorStatus() { return String.format(""$%02X"", state.a); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getXRegisterStatus,"public String getXRegisterStatus() { return String.format(""$%02X"", state.x); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getYRegisterStatus,"public String getYRegisterStatus() { return String.format(""$%02X"", state.y); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getProgramCounterStatus,"public String getProgramCounterStatus() { return String.format(""$%04X"", state.pc); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getStackPointerStatus,"public String getStackPointerStatus() { return String.format(""$%02X"", state.sp); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getProcessorStatus,public int getProcessorStatus() { return state.getStatusFlag(); },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,stackPush,"void stackPush(int data) throws MemoryAccessException { bus.write(0x100 + state.sp, data); if (state.sp == 0) { state.sp = 0xff; } else { --state.sp; } }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,stackPop,int stackPop() throws MemoryAccessException { if (state.sp == 0xff) { state.sp = 0x00; } else { ++state.sp; } return bus.read(0x100 + state.sp); },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,stackPeek,int stackPeek() throws MemoryAccessException { return bus.read(0x100 + state.sp + 1); },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,incrementPC,void incrementPC() { if (state.pc == 0xffff) { state.pc = 0; } else { ++state.pc; } },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,xAddress,"int xAddress(int lowByte, int hiByte) { return (address(lowByte, hiByte) + state.x) & 0xffff; }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,yAddress,"int yAddress(int lowByte, int hiByte) { return (address(lowByte, hiByte) + state.y) & 0xffff; }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,zpxAddress,int zpxAddress(int zp) { return (zp + state.x) & 0xff; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,relAddress,int relAddress(int offset) { return (state.pc + (byte) offset) & 0xffff; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,zpyAddress,int zpyAddress(int zp) { return (zp + state.y) & 0xff; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,toString,"public String toString() { String opcode = disassembleOp(); StringBuilder sb = new StringBuilder(getInstructionByteStatus()); sb.append("" ""); sb.append(String.format(""%-14s"", opcode)); sb.append(""A:"" + String.format(""%02x"", a) + "" ""); sb.append(""X:"" + String.format(""%02x"", x) + "" ""); sb.append(""Y:"" + String.format(""%02x"", y) + "" ""); sb.append(""F:"" + String.format(""%02x"", getStatusFlag()) + "" ""); sb.append(""S:"" + String.format(""1%02x"", sp) + "" ""); sb.append(getProcessorStatusString()); return sb.toString(); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getStatusFlag,public int getStatusFlag() { int status = 0x20; if (carryFlag) { status |= P_CARRY; } if (zeroFlag) { status |= P_ZERO; } if (irqDisableFlag) { status |= P_IRQ_DISABLE; } if (decimalModeFlag) { status |= P_DECIMAL; } if (breakFlag) { status |= P_BREAK; } if (overflowFlag) { status |= P_OVERFLOW; } if (negativeFlag) { status |= P_NEGATIVE; } return status; },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getInstructionByteStatus,"public String getInstructionByteStatus() { switch (Cpu.instructionSizes[ir]) { case 0: case 1: return String.format(""%04X %02X "", lastPc, ir); case 2: return String.format(""%04X %02X %02X "", lastPc, ir, args[0]); case 3: return String.format(""%04X %02X %02X %02X"", lastPc, ir, args[0], args[1]); default: return null; } }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,disassembleOp,"public String disassembleOp() { String mnemonic = opcodeNames[ir]; if (mnemonic == null) { return ""???""; } StringBuilder sb = new StringBuilder(mnemonic); switch (instructionModes[ir]) { case ABS: sb.append(String.format("" $%04X"", address(args[0], args[1]))); break; case ABX: sb.append(String.format("" $%04X,X"", address(args[0], args[1]))); break; case ABY: sb.append(String.format("" $%04X,Y"", address(args[0], args[1]))); break; case IMM: sb.append(String.format("" #$%02X"", args[0])); break; case IND: sb.append(String.format("" ($%04X)"", address(args[0], args[1]))); break; case XIN: sb.append(String.format("" ($%02X,X)"", args[0])); break; case INY: sb.append(String.format("" ($%02X),Y"", args[0])); break; case REL: case ZPG: sb.append(String.format("" $%02X"", args[0])); break; case ZPX: sb.append(String.format("" $%02X,X"", a)); break; case ZPY: sb.append(String.format("" $%02X,Y"", a)); break; } return sb.toString(); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,address,"private int address(int lowByte, int hiByte) { return ((hiByte << 8) | lowByte) & 0xffff; }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Cpu.java,getProcessorStatusString,"public String getProcessorStatusString() { StringBuilder sb = new StringBuilder(""[""); sb.append(negativeFlag ? 'N' : '.'); sb.append(overflowFlag ? 'V' : '.'); sb.append(""-""); sb.append(breakFlag ? 'B' : '.'); sb.append(decimalModeFlag ? 'D' : '.'); sb.append(irqDisableFlag ? 'I' : '.'); sb.append(zeroFlag ? 'Z' : '.'); sb.append(carryFlag ? 'C' : '.'); sb.append(""]""); return sb.toString(); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); preferences.addObserver(this); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); console.requestFocus(); mainWindow.pack(); mainWindow.setVisible(true); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Simulator.java,simulatorDidStop,private void simulatorDidStop() { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); if (traceLog.isVisible()) { traceLog.refresh(); } },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Simulator.java,step,"private void step() throws MemoryAccessException { cpu.step(); synchronized(traceLog) { traceLog.append(cpu.getCpuState()); } if (acia.hasTxChar()) { console.print(Character.toString((char)acia.txRead())); console.repaint(); } try { if (console.hasInput()) { acia.rxWrite((int)console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { synchronized(traceLog) { if (traceLog.isVisible()) { traceLog.setVisible(false); } else { traceLog.refresh(); traceLog.setVisible(true); } } },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); loadRomItem = new JMenuItem(new LoadRomAction()); JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(loadProgramItem); fileMenu.add(loadRomItem); fileMenu.add(prefsItem); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Font Size""); ButtonGroup group = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, group); makeFontSizeMenuItem(11, fontSubMenu, group); makeFontSizeMenuItem(12, fontSubMenu, group); makeFontSizeMenuItem(13, fontSubMenu, group); makeFontSizeMenuItem(14, fontSubMenu, group); makeFontSizeMenuItem(15, fontSubMenu, group); makeFontSizeMenuItem(16, fontSubMenu, group); makeFontSizeMenuItem(17, fontSubMenu, group); makeFontSizeMenuItem(18, fontSubMenu, group); makeFontSizeMenuItem(19, fontSubMenu, group); makeFontSizeMenuItem(20, fontSubMenu, group); viewMenu.add(fontSubMenu); JMenuItem showTraceLog = new JMenuItem(new ToggleTraceWindowAction()); viewMenu.add(showTraceLog); add(viewMenu); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,StatusPanel.java,updateState,"public void updateState(Cpu cpu) { Cpu.CpuState cpuState = cpu.getCpuState(); int status = cpu.getCpuState().getStatusFlag(); carryFlagLabel.setIcon(iconForFlag(status, 0)); zeroFlagLabel.setIcon(iconForFlag(status, 1)); irqDisableFlagLabel.setIcon(iconForFlag(status, 2)); decimalModeFlagLabel.setIcon(iconForFlag(status, 3)); breakFlagLabel.setIcon(iconForFlag(status, 4)); overflowFlagLabel.setIcon(iconForFlag(status, 6)); negativeFlagLabel.setIcon(iconForFlag(status, 7)); opcodeField.setText(cpu.getCpuState().disassembleOp()); pcField.setText(cpu.getProgramCounterStatus()); spField.setText(cpu.getStackPointerStatus()); aField.setText(cpu.getAccumulatorStatus()); xField.setText(cpu.getXRegisterStatus()); yField.setText(cpu.getYRegisterStatus()); repaint(); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,TraceLog.java,refresh,"public void refresh() { StringBuilder logString = new StringBuilder(); for (Cpu.CpuState state : traceLog) { logString.append(state.toString()); logString.append(""\n""); } logArea.setText(logString.toString()); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,TraceLog.java,append,public void append(Cpu.CpuState state) { traceLog.push(new Cpu.CpuState(state)); },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,TraceLog.java,isVisible,public boolean isVisible() { return traceLogWindow.isVisible(); },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,TraceLog.java,setVisible,public void setVisible(boolean b) { traceLogWindow.setVisible(b); },https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,CpuImpliedModeTest.java,test_BRK,"public void test_BRK() throws MemoryAccessException { cpu.setCarryFlag(); cpu.setOverflowFlag(); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW, cpu.getProcessorStatus()); assertEquals(0x00, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(Cpu.IRQ_VECTOR_H, 0x12); bus.write(Cpu.IRQ_VECTOR_L, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff)); assertEquals(0x06, bus.read(0x1fe)); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK, bus.read(0x1fd)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
bc3de808926679c57a641d706de8b3b2f5b24e9e,CpuIndexedIndirectModeTest.java,runBeforeEveryTest,"public void runBeforeEveryTest() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0x10000); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/bc3de808926679c57a641d706de8b3b2f5b24e9e
807a43ce6fd1bb57a2e3598ae9276209299928ad,Cpu.java,getAccumulatorStatus,"public String getAccumulatorStatus() { return ""$"" + HexUtil.byteToHex(state.a); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Cpu.java,getXRegisterStatus,"public String getXRegisterStatus() { return ""$"" + HexUtil.byteToHex(state.x); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Cpu.java,getYRegisterStatus,"public String getYRegisterStatus() { return ""$"" + HexUtil.byteToHex(state.y); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Cpu.java,getProgramCounterStatus,"public String getProgramCounterStatus() { return ""$"" + HexUtil.wordToHex(state.pc); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Cpu.java,getStackPointerStatus,"public String getStackPointerStatus() { return ""$"" + HexUtil.byteToHex(state.sp); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Cpu.java,toTraceEvent,"public String toTraceEvent() { String opcode = disassembleOp(); StringBuilder sb = new StringBuilder(getInstructionByteStatus()); sb.append("" ""); sb.append(String.format(""%-14s"", opcode)); sb.append(""A:"" + HexUtil.byteToHex(a) + "" ""); sb.append(""X:"" + HexUtil.byteToHex(x) + "" ""); sb.append(""Y:"" + HexUtil.byteToHex(y) + "" ""); sb.append(""F:"" + HexUtil.byteToHex(getStatusFlag()) + "" ""); sb.append(""S:1"" + HexUtil.byteToHex(sp) + "" ""); sb.append(getProcessorStatusString() + ""\n""); return sb.toString(); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Cpu.java,getInstructionByteStatus,"public String getInstructionByteStatus() { switch (Cpu.instructionSizes[ir]) { case 0: case 1: return HexUtil.wordToHex(lastPc) + "" "" + HexUtil.byteToHex(ir) + "" ""; case 2: return HexUtil.wordToHex(lastPc) + "" "" + HexUtil.byteToHex(ir) + "" "" + HexUtil.byteToHex(args[0]) + "" ""; case 3: return HexUtil.wordToHex(lastPc) + "" "" + HexUtil.byteToHex(ir) + "" "" + HexUtil.byteToHex(args[0]) + "" "" + HexUtil.byteToHex(args[1]); default: return null; } }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Cpu.java,disassembleOp,"public String disassembleOp() { String mnemonic = opcodeNames[ir]; if (mnemonic == null) { return ""???""; } StringBuilder sb = new StringBuilder(mnemonic); switch (instructionModes[ir]) { case ABS: sb.append("" $"" + HexUtil.wordToHex(address(args[0], args[1]))); break; case ABX: sb.append("" $"" + HexUtil.wordToHex(address(args[0], args[1])) + "",X""); break; case ABY: sb.append("" $"" + HexUtil.wordToHex(address(args[0], args[1])) + "",Y""); break; case IMM: sb.append("" #$"" + HexUtil.byteToHex(args[0])); break; case IND: sb.append("" ($"" + HexUtil.wordToHex(address(args[0], args[1])) + "")""); break; case XIN: sb.append("" ($"" + HexUtil.byteToHex(args[0]) + "",X)""); break; case INY: sb.append("" ($"" + HexUtil.byteToHex(args[0]) + ""),Y""); break; case REL: case ZPG: sb.append("" $"" + HexUtil.byteToHex(args[0])); break; case ZPX: sb.append("" $"" + HexUtil.byteToHex(a) + "",X""); break; case ZPY: sb.append("" $"" + HexUtil.byteToHex(a) + "",Y""); break; } return sb.toString(); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Simulator.java,handleStart,private void handleStart() { console.requestFocus(); runLoop = new RunLoop(); runLoop.start(); traceLog.simulatorDidStart(); },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Simulator.java,simulatorDidStop,private void simulatorDidStop() { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); traceLog.simulatorDidStop(); if (traceLog.isVisible()) { traceLog.refresh(); } },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Simulator.java,handleReset,"private void handleReset() { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Cold reset requested. Resetting CPU and clearing memory.""); cpu.reset(); ram.fill(0x00); console.reset(); traceLog.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,Simulator.java,step,"private void step() throws MemoryAccessException { cpu.step(); traceLog.append(cpu.getCpuState()); if (acia.hasTxChar()) { console.print(Character.toString((char)acia.txRead())); console.repaint(); } try { if (console.hasInput()) { acia.rxWrite((int)console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,TraceLog.java,refresh,public void refresh() { synchronized (this) { StringBuilder logString = new StringBuilder(); for (Cpu.CpuState state : traceLog) { logString.append(state.toTraceEvent()); } traceLogTextArea.setText(logString.toString()); } },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,TraceLog.java,reset,"public void reset() { synchronized (this) { traceLog.reset(); traceLogTextArea.setText(""""); traceLogTextArea.setEnabled(true); } }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,TraceLog.java,append,public void append(Cpu.CpuState state) { synchronized(this) { traceLog.push(new Cpu.CpuState(state)); } },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,TraceLog.java,simulatorDidStart,public void simulatorDidStart() { traceLogTextArea.setEnabled(false); },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,TraceLog.java,simulatorDidStop,public void simulatorDidStop() { traceLogTextArea.setEnabled(true); },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,TraceLog.java,isVisible,public boolean isVisible() { return traceLogFrame.isVisible(); },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,TraceLog.java,setVisible,public void setVisible(boolean b) { traceLogFrame.setVisible(b); },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,HexUtil.java,byteToHex,public static String byteToHex(int val) { return HEX_CONSTANTS[val & 0xff]; },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,HexUtil.java,wordToHex,public static String wordToHex(int val) { StringBuilder sb = new StringBuilder(4); sb.append(HEX_CONSTANTS[(val >> 8) & 0xff]); sb.append(HEX_CONSTANTS[val & 0xff]); return sb.toString(); },https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,HexUtilTest.java,testByteToHex,"public void testByteToHex() { assertEquals(""FE"", HexUtil.byteToHex(0xfe)); assertEquals(""00"", HexUtil.byteToHex(0)); assertEquals(""0A"", HexUtil.byteToHex(10)); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,HexUtilTest.java,testByteToHexIgnoresSign,"public void testByteToHexIgnoresSign() { assertEquals(""FF"", HexUtil.byteToHex(-1)); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,HexUtilTest.java,testByteToHexMasksLowByte,"public void testByteToHexMasksLowByte() { assertEquals(""FE"", HexUtil.byteToHex(0xfffe)); assertEquals(""00"", HexUtil.byteToHex(0xff00)); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,HexUtilTest.java,testWordToHex,"public void testWordToHex() { assertEquals(""0000"", HexUtil.wordToHex(0)); assertEquals(""FFFF"", HexUtil.wordToHex(65535)); assertEquals(""FFFE"", HexUtil.wordToHex(65534)); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,HexUtilTest.java,testWordToHexIgnoresSign,"public void testWordToHexIgnoresSign() { assertEquals(""FFFF"", HexUtil.wordToHex(-1)); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
807a43ce6fd1bb57a2e3598ae9276209299928ad,HexUtilTest.java,testWordToHexMasksTwoLowBytes,"public void testWordToHexMasksTwoLowBytes() { assertEquals(""FFFE"", HexUtil.wordToHex(0xfffffe)); assertEquals(""FF00"", HexUtil.wordToHex(0xffff00)); }",https://www.github.com/sethm/symon/commit/807a43ce6fd1bb57a2e3598ae9276209299928ad
f70ce22259b261c18e763bbb854e51306268a3dc,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); loadRomItem = new JMenuItem(new LoadRomAction()); JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(loadProgramItem); fileMenu.add(loadRomItem); fileMenu.add(prefsItem); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); JRadioButtonMenuItem showTraceLog = new JRadioButtonMenuItem(new ToggleTraceWindowAction()); viewMenu.add(showTraceLog); add(viewMenu); }",https://www.github.com/sethm/symon/commit/f70ce22259b261c18e763bbb854e51306268a3dc
0215e2e3d86f0ef6cfed29d021e3745b3170489d,Simulator.java,handleStop,private void handleStop() { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; },https://www.github.com/sethm/symon/commit/0215e2e3d86f0ef6cfed29d021e3745b3170489d
0215e2e3d86f0ef6cfed29d021e3745b3170489d,Simulator.java,handleStep,"private void handleStep() { try { step(); if (traceLog.isVisible()) { traceLog.refresh(); } } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/0215e2e3d86f0ef6cfed29d021e3745b3170489d
0215e2e3d86f0ef6cfed29d021e3745b3170489d,Simulator.java,step,"private void step() throws MemoryAccessException { cpu.step(); traceLog.append(cpu.getCpuState()); if (acia.hasTxChar()) { console.print(Character.toString((char) acia.txRead())); console.repaint(); } try { if (console.hasInput()) { acia.rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/0215e2e3d86f0ef6cfed29d021e3745b3170489d
0215e2e3d86f0ef6cfed29d021e3745b3170489d,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { console.startListening(); stepButton.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { while (isRunning && !(preferences.getHaltOnBreak() && cpu.getBreakFlag())) { step(); } } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); runStopButton.setText(""Run""); stepButton.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/0215e2e3d86f0ef6cfed29d021e3745b3170489d
0215e2e3d86f0ef6cfed29d021e3745b3170489d,Simulator.java,run,"public void run() { statusPane.updateState(cpu); runStopButton.setText(""Run""); stepButton.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); }",https://www.github.com/sethm/symon/commit/0215e2e3d86f0ef6cfed29d021e3745b3170489d
0215e2e3d86f0ef6cfed29d021e3745b3170489d,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { synchronized (traceLog) { if (traceLog.isVisible()) { traceLog.setVisible(false); } else { traceLog.refresh(); traceLog.setVisible(true); } } },https://www.github.com/sethm/symon/commit/0215e2e3d86f0ef6cfed29d021e3745b3170489d
0215e2e3d86f0ef6cfed29d021e3745b3170489d,HexUtilTest.java,testAllBytesAreCorrect,"public void testAllBytesAreCorrect() { for (int i = 0; i <= 0xff; i++) { assertEquals(String.format(""%02X"", i), HexUtil.byteToHex(i)); } }",https://www.github.com/sethm/symon/commit/0215e2e3d86f0ef6cfed29d021e3745b3170489d
f7c5c3b7636a82225d740f5ecf863a156054dc05,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); preferences.addObserver(this); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(bus); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); console.requestFocus(); mainWindow.pack(); mainWindow.setVisible(true); }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,Simulator.java,handleStep,"private void handleStep() { try { step(); SwingUtilities.invokeLater(new Runnable() { public void run() { if (traceLog.isVisible()) { traceLog.refresh(); } statusPane.updateState(cpu); } }); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,Simulator.java,run,public void run() { if (traceLog.isVisible()) { traceLog.refresh(); } statusPane.updateState(cpu); },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,Simulator.java,main,public static void main(String args[]) { SwingUtilities.invokeLater(new Runnable() { public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); Simulator simulator = new Simulator(); simulator.createAndShowUi(); simulator.handleReset(); } catch (Exception e) { e.printStackTrace(); } } }); },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,Simulator.java,run,public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); Simulator simulator = new Simulator(); simulator.createAndShowUi(); simulator.handleReset(); } catch (Exception e) { e.printStackTrace(); } },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { synchronized (memoryWindow) { if (memoryWindow.isVisible()) { memoryWindow.setVisible(false); } else { memoryWindow.setVisible(true); } } },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); loadRomItem = new JMenuItem(new LoadRomAction()); JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(loadProgramItem); fileMenu.add(loadRomItem); fileMenu.add(prefsItem); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); JRadioButtonMenuItem showTraceLog = new JRadioButtonMenuItem(new ToggleTraceWindowAction()); viewMenu.add(showTraceLog); JRadioButtonMenuItem showMemoryTable = new JRadioButtonMenuItem(new ToggleMemoryWindowAction()); viewMenu.add(showMemoryTable); add(viewMenu); }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,setPageNumber,public void setPageNumber(int pageNumber) { memoryTableModel.setPageNumber(pageNumber); },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,getPageNumber,public int getPageNumber() { return memoryTableModel.getPageNumber(); },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,updatePageNumberTextField,private void updatePageNumberTextField() { pageNumberTextField.setText(HexUtil.byteToHex(getPageNumber())); },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,createUi,"private void createUi() { setTitle(""Memory Contents""); this.memoryTable = new JTable(memoryTableModel); memoryTable.setDragEnabled(false); memoryTable.setCellSelectionEnabled(false); memoryTable.setShowGrid(false); pageNumberLabel = new JLabel(""Page Number""); pageNumberTextField = new JTextField(8); pageNumberTextField.addActionListener(this); updatePageNumberTextField(); JPanel controlPanel = new JPanel(); JPanel memoryPanel = new JPanel(); memoryPanel.setLayout(new BorderLayout()); controlPanel.add(pageNumberLabel); controlPanel.add(pageNumberTextField); this.scrollPane = new JScrollPane(memoryTable); scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); memoryPanel.add(scrollPane, BorderLayout.CENTER); setLayout(new BorderLayout()); getContentPane().add(controlPanel, BorderLayout.NORTH); getContentPane().add(memoryPanel, BorderLayout.CENTER); setMinimumSize(MINIMUM_SIZE); setPreferredSize(MINIMUM_SIZE); pack(); }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,actionPerformed,"public void actionPerformed(ActionEvent e) { if (e.getSource() == pageNumberTextField) { String pageNumberInput = pageNumberTextField.getText(); try { int newPageNumber = Integer.parseInt(pageNumberInput, 16); setPageNumber(newPageNumber & 0xff); memoryTable.updateUI(); } catch (NumberFormatException ex) { Logger.getLogger(this.getClass().getName()).log(Level.WARNING, ""Can't parse page number "" + pageNumberInput); } updatePageNumberTextField(); } }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,setPageNumber,public void setPageNumber(int pageNumber) { this.pageNumber = pageNumber; },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,getPageNumber,public int getPageNumber() { return this.pageNumber; },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,getRowCount,public int getRowCount() { return ROW_COUNT; },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,getColumnCount,public int getColumnCount() { return COLUMN_COUNT; },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,getColumnName,public String getColumnName(int i) { return null; },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,getColumnClass,public Class<?> getColumnClass(int i) { return String.class; },https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,isCellEditable,"public boolean isCellEditable(int row, int column) { return column > 0; }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,getValueAt,"public Object getValueAt(int row, int column) { try { if (column == 0) { return HexUtil.wordToHex(fullAddress(row, 1)); } else { return HexUtil.byteToHex(bus.read(fullAddress(row, column))); } } catch (MemoryAccessException ex) { return ""??""; } }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,setValueAt,"public void setValueAt(Object o, int row, int column) { if (column > 0) { try { String hexValue = (String)o; int fullAddress = fullAddress(row, column); int newValue = Integer.parseInt(hexValue, 16); bus.write(fullAddress, newValue); } catch (MemoryAccessException ex) { ; } catch (NumberFormatException ex) { ; } catch (ClassCastException ex) { ; } fireTableCellUpdated(row, column); } }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,MemoryWindow.java,fullAddress,"private int fullAddress(int row, int column) { int pageAddress = ((row * 8) + (column - 1)) & 0xff; return (pageNumber << 8) | pageAddress; }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
f7c5c3b7636a82225d740f5ecf863a156054dc05,StatusPanel.java,makeTextField,"private JTextField makeTextField(Dimension size) { JTextField textField = new JTextField(""""); textField.setAlignmentX(LEFT_ALIGNMENT); textField.setEditable(false); textField.setMinimumSize(size); textField.setMaximumSize(size); textField.setPreferredSize(size); textField.setBackground(Color.WHITE); return textField; }",https://www.github.com/sethm/symon/commit/f7c5c3b7636a82225d740f5ecf863a156054dc05
933b09827a9a0c9812520c3798d653e6a7c1bc26,MemoryWindow.java,createUi,"private void createUi() { setTitle(""Memory Contents""); this.memoryTable = new JTable(memoryTableModel); memoryTable.setDragEnabled(false); memoryTable.setCellSelectionEnabled(false); memoryTable.setShowGrid(false); JLabel pageNumberLabel = new JLabel(""Page Number""); pageNumberTextField = new JTextField(8); pageNumberTextField.addActionListener(this); updatePageNumberTextField(); JPanel controlPanel = new JPanel(); JPanel memoryPanel = new JPanel(); memoryPanel.setLayout(new BorderLayout()); controlPanel.add(pageNumberLabel); controlPanel.add(pageNumberTextField); JScrollPane scrollPane = new JScrollPane(memoryTable); scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); memoryPanel.add(scrollPane, BorderLayout.CENTER); setLayout(new BorderLayout()); getContentPane().add(controlPanel, BorderLayout.NORTH); getContentPane().add(memoryPanel, BorderLayout.CENTER); setMinimumSize(MINIMUM_SIZE); setPreferredSize(MINIMUM_SIZE); pack(); }",https://www.github.com/sethm/symon/commit/933b09827a9a0c9812520c3798d653e6a7c1bc26
3636e78435a876b4f3161f820b073a11c08acc64,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); preferences.addObserver(this); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(bus); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); console.requestFocus(); mainWindow.pack(); mainWindow.setVisible(true); }",https://www.github.com/sethm/symon/commit/3636e78435a876b4f3161f820b073a11c08acc64
3636e78435a876b4f3161f820b073a11c08acc64,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); loadRomItem = new JMenuItem(new LoadRomAction()); JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(loadProgramItem); fileMenu.add(loadRomItem); fileMenu.add(prefsItem); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); final JCheckBoxMenuItem showTraceLog = new JCheckBoxMenuItem(new ToggleTraceWindowAction()); traceLog.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); } }); viewMenu.add(showTraceLog); final JCheckBoxMenuItem showMemoryTable = new JCheckBoxMenuItem(new ToggleMemoryWindowAction()); memoryWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); } }); viewMenu.add(showMemoryTable); add(viewMenu); }",https://www.github.com/sethm/symon/commit/3636e78435a876b4f3161f820b073a11c08acc64
3636e78435a876b4f3161f820b073a11c08acc64,Simulator.java,windowClosing,public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); },https://www.github.com/sethm/symon/commit/3636e78435a876b4f3161f820b073a11c08acc64
3636e78435a876b4f3161f820b073a11c08acc64,Simulator.java,windowClosing,public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); },https://www.github.com/sethm/symon/commit/3636e78435a876b4f3161f820b073a11c08acc64
3636e78435a876b4f3161f820b073a11c08acc64,Simulator.java,makeFontSizeMenuItem,"private void makeFontSizeMenuItem(int size, JMenu fontSubMenu, ButtonGroup group) { Action action = new SetFontAction(size); JCheckBoxMenuItem item = new JCheckBoxMenuItem(action); item.setSelected(size == DEFAULT_FONT_SIZE); fontSubMenu.add(item); group.add(item); }",https://www.github.com/sethm/symon/commit/3636e78435a876b4f3161f820b073a11c08acc64
3636e78435a876b4f3161f820b073a11c08acc64,PreferencesDialog.java,createUi,"private void createUi() { dialog.setTitle(""Preferences""); Container contents = dialog.getContentPane(); JPanel settingsContainer = new JPanel(); JPanel buttonsContainer = new JPanel(); GridBagLayout layout = new GridBagLayout(); settingsContainer.setLayout(layout); final JLabel haltOnBreakLabel = new JLabel(""Halt on BRK""); final JLabel programLoadAddressLabel = new JLabel(""Program Load Address""); final JLabel borderWidthLabel = new JLabel(""Console Border Width""); haltOnBreakCheckBox = new JCheckBox(); programLoadAddressField = new JTextField(8); borderWidthField = new JTextField(8); programLoadAddressLabel.setLabelFor(programLoadAddressField); borderWidthLabel.setLabelFor(borderWidthField); GridBagConstraints constraints = new GridBagConstraints(); constraints.insets = new Insets(5, 5, 5, 5); constraints.fill = GridBagConstraints.HORIZONTAL; constraints.gridx = 0; constraints.gridy = 0; settingsContainer.add(haltOnBreakLabel, constraints); constraints.gridx = 1; settingsContainer.add(haltOnBreakCheckBox, constraints); constraints.gridy = 1; constraints.gridx = 0; settingsContainer.add(programLoadAddressLabel, constraints); constraints.gridx = 1; settingsContainer.add(programLoadAddressField, constraints); constraints.gridy = 2; constraints.gridx = 0; settingsContainer.add(borderWidthLabel, constraints); constraints.gridx = 1; settingsContainer.add(borderWidthField, constraints); JButton applyButton = new JButton(""Apply""); JButton cancelButton = new JButton(""Cancel""); cancelButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { updateUi(); dialog.setVisible(false); } }); applyButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { haltOnBreak = haltOnBreakCheckBox.isSelected(); programLoadAddress = hexToInt(programLoadAddressField.getText()); borderWidth = Integer.parseInt(borderWidthField.getText()); updateUi(); setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); } }); buttonsContainer.add(applyButton); buttonsContainer.add(cancelButton); contents.add(settingsContainer, BorderLayout.PAGE_START); contents.add(buttonsContainer, BorderLayout.PAGE_END); dialog.pack(); }",https://www.github.com/sethm/symon/commit/3636e78435a876b4f3161f820b073a11c08acc64
3636e78435a876b4f3161f820b073a11c08acc64,StatusPanel.java,createUi,"private void createUi() { Border emptyBorder = BorderFactory.createEmptyBorder(EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER); Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED); setBorder(BorderFactory.createCompoundBorder(emptyBorder, etchedBorder)); GridBagLayout layout = new GridBagLayout(); GridBagConstraints constraints = new GridBagConstraints(); setLayout(layout); JPanel statusFlagsPanel = new JPanel(); statusFlagsPanel.setAlignmentX(LEFT_ALIGNMENT); carryOn = new ImageIcon(this.getClass().getResource(""images/C_on.png"")); carryOff = new ImageIcon(this.getClass().getResource(""images/C_off.png"")); zeroOn = new ImageIcon(this.getClass().getResource(""images/Z_on.png"")); zeroOff = new ImageIcon(this.getClass().getResource(""images/Z_off.png"")); irqOn = new ImageIcon(this.getClass().getResource(""images/I_on.png"")); irqOff = new ImageIcon(this.getClass().getResource(""images/I_off.png"")); decimalOn = new ImageIcon(this.getClass().getResource(""images/D_on.png"")); decimalOff = new ImageIcon(this.getClass().getResource(""images/D_off.png"")); breakOn = new ImageIcon(this.getClass().getResource(""images/B_on.png"")); breakOff = new ImageIcon(this.getClass().getResource(""images/B_off.png"")); overflowOn = new ImageIcon(this.getClass().getResource(""images/O_on.png"")); overflowOff = new ImageIcon(this.getClass().getResource(""images/O_off.png"")); negativeOn = new ImageIcon(this.getClass().getResource(""images/N_on.png"")); negativeOff = new ImageIcon(this.getClass().getResource(""images/N_off.png"")); carryFlagLabel = new JLabel(carryOff, JLabel.CENTER); zeroFlagLabel = new JLabel(zeroOff, JLabel.CENTER); irqDisableFlagLabel = new JLabel(irqOff, JLabel.CENTER); decimalModeFlagLabel = new JLabel(decimalOff, JLabel.CENTER); breakFlagLabel = new JLabel(breakOff, JLabel.CENTER); overflowFlagLabel = new JLabel(overflowOff, JLabel.CENTER); negativeFlagLabel = new JLabel(negativeOff, JLabel.CENTER); statusFlagsPanel.add(negativeFlagLabel); statusFlagsPanel.add(overflowFlagLabel); statusFlagsPanel.add(breakFlagLabel); statusFlagsPanel.add(decimalModeFlagLabel); statusFlagsPanel.add(irqDisableFlagLabel); statusFlagsPanel.add(zeroFlagLabel); statusFlagsPanel.add(carryFlagLabel); statusFlagsLabel = makeLabel(""Flags""); opcodeLabel = makeLabel(""IR""); pcLabel = makeLabel(""PC""); spLabel = makeLabel(""SP""); aLabel = makeLabel(""A""); xLabel = makeLabel(""X""); yLabel = makeLabel(""Y""); opcodeField = makeTextField(LARGE_TEXT_FIELD_SIZE); pcField = makeTextField(LARGE_TEXT_FIELD_SIZE); spField = makeTextField(SMALL_TEXT_FIELD_SIZE); aField = makeTextField(SMALL_TEXT_FIELD_SIZE); xField = makeTextField(SMALL_TEXT_FIELD_SIZE); yField = makeTextField(SMALL_TEXT_FIELD_SIZE); constraints.anchor = GridBagConstraints.LINE_START; constraints.gridwidth = 2; constraints.gridx = 0; constraints.gridy = 0; add(statusFlagsLabel, constraints); constraints.gridy = 1; add(statusFlagsPanel, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 2; add(opcodeLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 3; add(opcodeField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 4; add(pcLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 5; add(pcField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridwidth = 1; constraints.gridy = 6; add(spLabel, constraints); constraints.gridx = 1; add(aLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 7; add(spField, constraints); constraints.gridx = 1; add(aField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridx = 0; constraints.gridy = 8; add(yLabel, constraints); constraints.gridx = 1; add(xLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 9; add(xField, constraints); constraints.gridx = 1; add(yField, constraints); }",https://www.github.com/sethm/symon/commit/3636e78435a876b4f3161f820b073a11c08acc64
61b342ff0102f7119d45c7e8169bee1ec890ac38,MemoryWindow.java,createUi,"private void createUi() { setTitle(""Memory Contents""); this.memoryTable = new JTable(memoryTableModel); memoryTable.setDragEnabled(false); memoryTable.setCellSelectionEnabled(false); memoryTable.setShowGrid(true); memoryTable.setShowHorizontalLines(true); memoryTable.setShowVerticalLines(true); memoryTable.setGridColor(Color.LIGHT_GRAY); memoryTable.getTableHeader().setReorderingAllowed(false); memoryTable.getTableHeader().setResizingAllowed(false); memoryTable.getTableHeader().setVisible(false); ToolTipManager.sharedInstance().unregisterComponent(memoryTable); ToolTipManager.sharedInstance().unregisterComponent(memoryTable.getTableHeader()); JLabel pageNumberLabel = new JLabel(""Page Number""); pageNumberTextField = new JTextField(8); pageNumberTextField.addActionListener(this); updatePageNumberTextField(); JPanel controlPanel = new JPanel(); JPanel memoryPanel = new JPanel(); memoryPanel.setLayout(new BorderLayout()); memoryPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); controlPanel.add(pageNumberLabel); controlPanel.add(pageNumberTextField); JScrollPane scrollPane = new JScrollPane(memoryTable); scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); memoryPanel.add(scrollPane, BorderLayout.CENTER); setLayout(new BorderLayout()); getContentPane().add(controlPanel, BorderLayout.NORTH); getContentPane().add(memoryPanel, BorderLayout.CENTER); setMinimumSize(MINIMUM_SIZE); setPreferredSize(MINIMUM_SIZE); pack(); }",https://www.github.com/sethm/symon/commit/61b342ff0102f7119d45c7e8169bee1ec890ac38
da8250778e170bcba68141c4fc35e4d7166237c6,Cpu.java,step,"public void step() throws MemoryAccessException { state.lastPc = state.pc; state.ir = bus.read(state.pc); irAddressMode = (state.ir >> 2) & 0x07; irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc); incrementPC(); } state.stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 4: tmp = address(bus.read(state.args[0]), bus.read((state.args[0] + 1) & 0xff)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: if (!getIrqDisableFlag()) { setBreakFlag(); stackPush((state.pc + 1 >> 8) & 0xff); stackPush(state.pc + 1 & 0xff); stackPush(state.getStatusFlag()); setIrqDisableFlag(); state.pc = address(bus.read(IRQ_VECTOR_L), bus.read(IRQ_VECTOR_H)); } break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = address(state.args[0], state.args[1]); break; case 0x6c: lo = address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = adc(state.a, bus.read(effectiveAddress)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = sbc(state.a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); }",https://www.github.com/sethm/symon/commit/da8250778e170bcba68141c4fc35e4d7166237c6
da8250778e170bcba68141c4fc35e4d7166237c6,Cpu.java,getInstruction,public int getInstruction() { return state.ir; },https://www.github.com/sethm/symon/commit/da8250778e170bcba68141c4fc35e4d7166237c6
da8250778e170bcba68141c4fc35e4d7166237c6,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { console.startListening(); stepButton.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); runStopButton.setText(""Run""); stepButton.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/da8250778e170bcba68141c4fc35e4d7166237c6
da8250778e170bcba68141c4fc35e4d7166237c6,Simulator.java,shouldContinue,private boolean shouldContinue() { return isRunning && !(preferences.getHaltOnBreak() && cpu.getInstruction() == 0x00); },https://www.github.com/sethm/symon/commit/da8250778e170bcba68141c4fc35e4d7166237c6
da8250778e170bcba68141c4fc35e4d7166237c6,CpuImpliedModeTest.java,test_BRK,"public void test_BRK() throws MemoryAccessException { cpu.setCarryFlag(); cpu.setOverflowFlag(); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW, cpu.getProcessorStatus()); assertEquals(0x00, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(0xffff, 0x12); bus.write(0xfffe, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK, bus.read(0x1fd)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/da8250778e170bcba68141c4fc35e4d7166237c6
da8250778e170bcba68141c4fc35e4d7166237c6,CpuImpliedModeTest.java,test_PHP,"public void test_PHP() throws MemoryAccessException { bus.loadProgram(0x08); cpu.setProcessorStatus(0x27); cpu.step(); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x37, cpu.stackPeek()); assertEquals(0x27, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/da8250778e170bcba68141c4fc35e4d7166237c6
da8250778e170bcba68141c4fc35e4d7166237c6,CpuIndexedIndirectModeTest.java,testZeroPageWrap,"public void testZeroPageWrap() throws Exception { bus.write(0x0020, 0x01); bus.write(0x0021, 0x07); bus.write(0x0701, 0xaa); bus.write(0x000f, 0x02); bus.write(0x0010, 0x08); bus.write(0x0802, 0xbb); bus.write(0x010f, 0x03); bus.write(0x0110, 0x09); bus.write(0x0903, 0xcc); cpu.setXRegister(0x10); bus.loadProgram(0xa1, 0x10, 0xa1, 0xff); cpu.step(1); assertEquals(0xaa, cpu.getAccumulator()); cpu.step(1); assertEquals(0xbb, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/da8250778e170bcba68141c4fc35e4d7166237c6
34fb8940ae92599e8d039a33b0c5eee7c568fec1,StatusPanel.java,createUi,"private void createUi() { Border emptyBorder = BorderFactory.createEmptyBorder(EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER); Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED); setBorder(BorderFactory.createCompoundBorder(emptyBorder, etchedBorder)); GridBagLayout layout = new GridBagLayout(); GridBagConstraints constraints = new GridBagConstraints(); setLayout(layout); JPanel statusFlagsPanel = new JPanel(); statusFlagsPanel.setAlignmentX(LEFT_ALIGNMENT); carryOn = new ImageIcon(this.getClass().getResource(""images/C_on.png"")); carryOff = new ImageIcon(this.getClass().getResource(""images/C_off.png"")); zeroOn = new ImageIcon(this.getClass().getResource(""images/Z_on.png"")); zeroOff = new ImageIcon(this.getClass().getResource(""images/Z_off.png"")); irqOn = new ImageIcon(this.getClass().getResource(""images/I_on.png"")); irqOff = new ImageIcon(this.getClass().getResource(""images/I_off.png"")); decimalOn = new ImageIcon(this.getClass().getResource(""images/D_on.png"")); decimalOff = new ImageIcon(this.getClass().getResource(""images/D_off.png"")); breakOn = new ImageIcon(this.getClass().getResource(""images/B_on.png"")); breakOff = new ImageIcon(this.getClass().getResource(""images/B_off.png"")); overflowOn = new ImageIcon(this.getClass().getResource(""images/O_on.png"")); overflowOff = new ImageIcon(this.getClass().getResource(""images/O_off.png"")); negativeOn = new ImageIcon(this.getClass().getResource(""images/N_on.png"")); negativeOff = new ImageIcon(this.getClass().getResource(""images/N_off.png"")); carryFlagLabel = new JLabel(carryOff, JLabel.CENTER); zeroFlagLabel = new JLabel(zeroOff, JLabel.CENTER); irqDisableFlagLabel = new JLabel(irqOff, JLabel.CENTER); decimalModeFlagLabel = new JLabel(decimalOff, JLabel.CENTER); breakFlagLabel = new JLabel(breakOff, JLabel.CENTER); overflowFlagLabel = new JLabel(overflowOff, JLabel.CENTER); negativeFlagLabel = new JLabel(negativeOff, JLabel.CENTER); statusFlagsPanel.add(negativeFlagLabel); statusFlagsPanel.add(overflowFlagLabel); statusFlagsPanel.add(breakFlagLabel); statusFlagsPanel.add(decimalModeFlagLabel); statusFlagsPanel.add(irqDisableFlagLabel); statusFlagsPanel.add(zeroFlagLabel); statusFlagsPanel.add(carryFlagLabel); statusFlagsLabel = makeLabel(""Flags""); opcodeLabel = makeLabel(""IR""); pcLabel = makeLabel(""PC""); spLabel = makeLabel(""SP""); aLabel = makeLabel(""A""); xLabel = makeLabel(""X""); yLabel = makeLabel(""Y""); opcodeField = makeTextField(LARGE_TEXT_FIELD_SIZE); pcField = makeTextField(LARGE_TEXT_FIELD_SIZE); spField = makeTextField(SMALL_TEXT_FIELD_SIZE); aField = makeTextField(SMALL_TEXT_FIELD_SIZE); xField = makeTextField(SMALL_TEXT_FIELD_SIZE); yField = makeTextField(SMALL_TEXT_FIELD_SIZE); constraints.anchor = GridBagConstraints.LINE_START; constraints.gridwidth = 2; constraints.gridx = 0; constraints.gridy = 0; add(statusFlagsLabel, constraints); constraints.gridy = 1; add(statusFlagsPanel, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 2; add(opcodeLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 3; add(opcodeField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 4; add(pcLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 5; add(pcField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridwidth = 1; constraints.gridy = 6; add(spLabel, constraints); constraints.gridx = 1; add(aLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 7; add(spField, constraints); constraints.gridx = 1; add(aField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridx = 0; constraints.gridy = 8; add(xLabel, constraints); constraints.gridx = 1; add(yLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 9; add(xField, constraints); constraints.gridx = 1; add(yField, constraints); }",https://www.github.com/sethm/symon/commit/34fb8940ae92599e8d039a33b0c5eee7c568fec1
4ccb7bec971cfdca2a0a64ab08fd981466b01685,Simulator.java,handleReset,"private void handleReset() { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Reset requested. Resetting CPU.""); cpu.reset(); console.reset(); traceLog.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/4ccb7bec971cfdca2a0a64ab08fd981466b01685
4ccb7bec971cfdca2a0a64ab08fd981466b01685,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); runStopButton.setText(""Run""); stepButton.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/4ccb7bec971cfdca2a0a64ab08fd981466b01685
4ccb7bec971cfdca2a0a64ab08fd981466b01685,Simulator.java,run,"public void run() { stepButton.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); }",https://www.github.com/sethm/symon/commit/4ccb7bec971cfdca2a0a64ab08fd981466b01685
4ccb7bec971cfdca2a0a64ab08fd981466b01685,Console.java,keyTyped,public void keyTyped(KeyEvent keyEvent) { char keyTyped = keyEvent.getKeyChar(); if (SWAP_CR_AND_LF) { if (keyTyped == 0x0a) { keyTyped = 0x0d; } else if (keyTyped == 0x0d) { keyTyped = 0x0a; } } if (SEND_CR_LF_FOR_CR && keyTyped == 0x0d) { typeAheadBuffer.push((char) 0x0d); typeAheadBuffer.push((char) 0x0a); } else { typeAheadBuffer.push(keyTyped); } keyEvent.consume(); },https://www.github.com/sethm/symon/commit/4ccb7bec971cfdca2a0a64ab08fd981466b01685
4ccb7bec971cfdca2a0a64ab08fd981466b01685,StatusPanel.java,createUi,"private void createUi() { Border emptyBorder = BorderFactory.createEmptyBorder(EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER); Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED); setBorder(BorderFactory.createCompoundBorder(emptyBorder, etchedBorder)); GridBagLayout layout = new GridBagLayout(); GridBagConstraints constraints = new GridBagConstraints(); setLayout(layout); JPanel statusFlagsPanel = new JPanel(); statusFlagsPanel.setAlignmentX(LEFT_ALIGNMENT); carryOn = new ImageIcon(this.getClass().getResource(""images/C_on.png"")); carryOff = new ImageIcon(this.getClass().getResource(""images/C_off.png"")); zeroOn = new ImageIcon(this.getClass().getResource(""images/Z_on.png"")); zeroOff = new ImageIcon(this.getClass().getResource(""images/Z_off.png"")); irqOn = new ImageIcon(this.getClass().getResource(""images/I_on.png"")); irqOff = new ImageIcon(this.getClass().getResource(""images/I_off.png"")); decimalOn = new ImageIcon(this.getClass().getResource(""images/D_on.png"")); decimalOff = new ImageIcon(this.getClass().getResource(""images/D_off.png"")); breakOn = new ImageIcon(this.getClass().getResource(""images/B_on.png"")); breakOff = new ImageIcon(this.getClass().getResource(""images/B_off.png"")); overflowOn = new ImageIcon(this.getClass().getResource(""images/O_on.png"")); overflowOff = new ImageIcon(this.getClass().getResource(""images/O_off.png"")); negativeOn = new ImageIcon(this.getClass().getResource(""images/N_on.png"")); negativeOff = new ImageIcon(this.getClass().getResource(""images/N_off.png"")); carryFlagLabel = new JLabel(carryOff, JLabel.CENTER); zeroFlagLabel = new JLabel(zeroOff, JLabel.CENTER); irqDisableFlagLabel = new JLabel(irqOff, JLabel.CENTER); decimalModeFlagLabel = new JLabel(decimalOff, JLabel.CENTER); breakFlagLabel = new JLabel(breakOff, JLabel.CENTER); overflowFlagLabel = new JLabel(overflowOff, JLabel.CENTER); negativeFlagLabel = new JLabel(negativeOff, JLabel.CENTER); carryFlagLabel.setToolTipText(""Carry: The last operation caused an overflow "" + ""from bit 7 of the result or an underflow from bit 0""); zeroFlagLabel.setToolTipText(""Zero: The result of the last operation was 0""); irqDisableFlagLabel.setToolTipText(""Interrupt Disable: Processor will not respond to IRQ""); decimalModeFlagLabel.setToolTipText(""Decimal Mode""); breakFlagLabel.setToolTipText(""Break: BRK instruction occurred""); overflowFlagLabel.setToolTipText(""Overflow: The result of the last operation was "" + ""an invalid 2's complement result""); negativeFlagLabel.setToolTipText(""Negative: The result of the last operation set bit 7""); statusFlagsPanel.add(negativeFlagLabel); statusFlagsPanel.add(overflowFlagLabel); statusFlagsPanel.add(breakFlagLabel); statusFlagsPanel.add(decimalModeFlagLabel); statusFlagsPanel.add(irqDisableFlagLabel); statusFlagsPanel.add(zeroFlagLabel); statusFlagsPanel.add(carryFlagLabel); statusFlagsLabel = makeLabel(""Flags""); opcodeLabel = makeLabel(""IR""); pcLabel = makeLabel(""PC""); spLabel = makeLabel(""SP""); aLabel = makeLabel(""A""); xLabel = makeLabel(""X""); yLabel = makeLabel(""Y""); statusFlagsLabel.setToolTipText(""6502 Processor Status Flags""); opcodeLabel.setToolTipText(""Instruction Register""); pcLabel.setToolTipText(""Program Counter""); spLabel.setToolTipText(""Stack Pointer""); opcodeField = makeTextField(LARGE_TEXT_FIELD_SIZE); pcField = makeTextField(LARGE_TEXT_FIELD_SIZE); spField = makeTextField(SMALL_TEXT_FIELD_SIZE); aField = makeTextField(SMALL_TEXT_FIELD_SIZE); xField = makeTextField(SMALL_TEXT_FIELD_SIZE); yField = makeTextField(SMALL_TEXT_FIELD_SIZE); constraints.anchor = GridBagConstraints.LINE_START; constraints.gridwidth = 2; constraints.gridx = 0; constraints.gridy = 0; add(statusFlagsLabel, constraints); constraints.gridy = 1; add(statusFlagsPanel, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 2; add(opcodeLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 3; add(opcodeField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 4; add(pcLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 5; add(pcField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridwidth = 1; constraints.gridy = 6; add(spLabel, constraints); constraints.gridx = 1; add(aLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 7; add(spField, constraints); constraints.gridx = 1; add(aField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridx = 0; constraints.gridy = 8; add(xLabel, constraints); constraints.gridx = 1; add(yLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 9; add(xField, constraints); constraints.gridx = 1; add(yField, constraints); }",https://www.github.com/sethm/symon/commit/4ccb7bec971cfdca2a0a64ab08fd981466b01685
429fec97b2cf9fda788cb1f2251b2244e4a4706c,Cpu.java,disassembleOp,"public String disassembleOp() { String mnemonic = opcodeNames[ir]; if (mnemonic == null) { return ""???""; } StringBuilder sb = new StringBuilder(mnemonic); switch (instructionModes[ir]) { case ABS: sb.append("" $"" + HexUtil.wordToHex(address(args[0], args[1]))); break; case ABX: sb.append("" $"" + HexUtil.wordToHex(address(args[0], args[1])) + "",X""); break; case ABY: sb.append("" $"" + HexUtil.wordToHex(address(args[0], args[1])) + "",Y""); break; case IMM: sb.append("" #$"" + HexUtil.byteToHex(args[0])); break; case IND: sb.append("" ($"" + HexUtil.wordToHex(address(args[0], args[1])) + "")""); break; case XIN: sb.append("" ($"" + HexUtil.byteToHex(args[0]) + "",X)""); break; case INY: sb.append("" ($"" + HexUtil.byteToHex(args[0]) + ""),Y""); break; case REL: case ZPG: sb.append("" $"" + HexUtil.byteToHex(args[0])); break; case ZPX: sb.append("" $"" + HexUtil.byteToHex(args[0]) + "",X""); break; case ZPY: sb.append("" $"" + HexUtil.byteToHex(args[0]) + "",Y""); break; } return sb.toString(); }",https://www.github.com/sethm/symon/commit/429fec97b2cf9fda788cb1f2251b2244e4a4706c
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(bus); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); console.requestFocus(); mainWindow.pack(); mainWindow.setVisible(true); }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } },https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); },https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,Simulator.java,handleStep,"private void handleStep(int numSteps) { try { for (int i = 0; i < numSteps; i++) { step(); } SwingUtilities.invokeLater(new Runnable() { public void run() { if (traceLog.isVisible()) { traceLog.refresh(); } statusPane.updateState(cpu); } }); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(false); stepCountBox.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,Simulator.java,run,"public void run() { stepButton.setEnabled(false); stepCountBox.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,Simulator.java,run,"public void run() { statusPane.updateState(cpu); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,MemoryWindow.java,updateControls,private void updateControls() { int pageNumber = getPageNumber(); previousPageButton.setEnabled(pageNumber > 0x00); nextPageButton.setEnabled(pageNumber < 0xff); pageNumberTextField.setText(HexUtil.byteToHex(pageNumber)); },https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,MemoryWindow.java,createUi,"private void createUi() { setTitle(""Memory Contents""); this.memoryTable = new MemoryTable(memoryTableModel); memoryTable.setDragEnabled(false); memoryTable.setCellSelectionEnabled(false); memoryTable.setIntercellSpacing(new Dimension(0, 0)); memoryTable.getTableHeader().setReorderingAllowed(false); memoryTable.getTableHeader().setResizingAllowed(false); memoryTable.getTableHeader().setVisible(false); memoryTable.getColumnModel().getColumn(0).setMaxWidth(ADDR_COL_WIDTH); for (int i = 1; i < ASCII_COL_START; i++) { memoryTable.getColumnModel().getColumn(i).setMaxWidth(HEX_COL_WIDTH); } for (int i = ASCII_COL_START; i <= ASCII_COL_END; i++) { memoryTable.getColumnModel().getColumn(i).setMaxWidth(ASCII_COL_WIDTH); } MemoryTableCellRenderer memoryTableCellRenderer = new MemoryTableCellRenderer(); memoryTableCellRenderer.setHorizontalAlignment(JLabel.CENTER); memoryTable.setDefaultRenderer(String.class, memoryTableCellRenderer); ToolTipManager.sharedInstance().unregisterComponent(memoryTable); ToolTipManager.sharedInstance().unregisterComponent(memoryTable.getTableHeader()); JLabel pageNumberLabel = new JLabel(""Page""); pageNumberTextField = new JTextField(8); pageNumberTextField.addActionListener(this); nextPageButton = new JButton(""Next >>""); previousPageButton = new JButton(""<< Prev""); nextPageButton.addActionListener(this); previousPageButton.addActionListener(this); updateControls(); JPanel controlPanel = new JPanel(); JPanel memoryPanel = new JPanel(); memoryPanel.setLayout(new BorderLayout()); memoryPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); controlPanel.add(previousPageButton); controlPanel.add(pageNumberLabel); controlPanel.add(pageNumberTextField); controlPanel.add(nextPageButton); JScrollPane scrollPane = new JScrollPane(memoryTable); scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); memoryPanel.add(scrollPane, BorderLayout.CENTER); setLayout(new BorderLayout()); getContentPane().add(controlPanel, BorderLayout.NORTH); getContentPane().add(memoryPanel, BorderLayout.CENTER); setMinimumSize(MINIMUM_SIZE); memoryPanel.setPreferredSize(memoryTable.getPreferredSize()); setPreferredSize(memoryPanel.getPreferredSize()); pack(); }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,MemoryWindow.java,actionPerformed,"public void actionPerformed(ActionEvent e) { if (e.getSource() == previousPageButton) { int currentPage = getPageNumber(); if (currentPage > 0x00) { setPageNumber(currentPage - 1); updateControls(); memoryTable.updateUI(); } } else if (e.getSource() == nextPageButton) { int currentPage = getPageNumber(); if (currentPage < 0xff) { setPageNumber(currentPage + 1); updateControls(); memoryTable.updateUI(); } } else if (e.getSource() == pageNumberTextField) { String pageNumberInput = pageNumberTextField.getText(); try { int newPageNumber = Integer.parseInt(pageNumberInput, 16); setPageNumber(newPageNumber & 0xff); memoryTable.updateUI(); } catch (NumberFormatException ex) { Logger.getLogger(this.getClass().getName()).log(Level.WARNING, ""Can't parse page number "" + pageNumberInput); } updateControls(); } }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,MemoryWindow.java,editCellAt,"public boolean editCellAt(int row, int col, EventObject e) { boolean result = super.editCellAt(row, col, e); final Component editor = getEditorComponent(); if (editor != null && editor instanceof JTextComponent) { ((JTextComponent) editor).selectAll(); } return result; }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,MemoryWindow.java,getTableCellRendererComponent,"public Component getTableCellRendererComponent(JTable table, Object value,",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,MemoryWindow.java,isCellEditable,"public boolean isCellEditable(int row, int column) { return (column > 0 && column < ASCII_COL_START); }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,MemoryWindow.java,getValueAt,"public Object getValueAt(int row, int column) { try { if (column == 0) { return HexUtil.wordToHex(fullAddress(row, 1)); } else if (column < 9) { return HexUtil.byteToHex(bus.read(fullAddress(row, column))); } else { return HexUtil.byteToAscii(bus.read(fullAddress(row, column - 8))); } } catch (MemoryAccessException ex) { return ""??""; } }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,MemoryWindow.java,setValueAt,"public void setValueAt(Object o, int row, int column) { if (column > 0) { try { String hexValue = (String)o; int fullAddress = fullAddress(row, column); int newValue = Integer.parseInt(hexValue, 16) & 0xff; bus.write(fullAddress, newValue); } catch (MemoryAccessException ex) { ; } catch (NumberFormatException ex) { ; } catch (ClassCastException ex) { ; } fireTableCellUpdated(row, column); } }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,PreferencesDialog.java,createUi,"private void createUi() { dialog.setTitle(""Preferences""); Container contents = dialog.getContentPane(); JPanel settingsContainer = new JPanel(); JPanel buttonsContainer = new JPanel(); GridBagLayout layout = new GridBagLayout(); settingsContainer.setLayout(layout); final JLabel haltOnBreakLabel = new JLabel(""Halt on BRK""); final JLabel programLoadAddressLabel = new JLabel(""Program Load Address""); haltOnBreakCheckBox = new JCheckBox(); programLoadAddressField = new JTextField(8); programLoadAddressLabel.setLabelFor(programLoadAddressField); GridBagConstraints constraints = new GridBagConstraints(); constraints.insets = new Insets(5, 5, 5, 5); constraints.fill = GridBagConstraints.HORIZONTAL; constraints.gridx = 0; constraints.gridy = 0; settingsContainer.add(haltOnBreakLabel, constraints); constraints.gridx = 1; settingsContainer.add(haltOnBreakCheckBox, constraints); constraints.gridy = 1; constraints.gridx = 0; settingsContainer.add(programLoadAddressLabel, constraints); constraints.gridx = 1; settingsContainer.add(programLoadAddressField, constraints); JButton applyButton = new JButton(""Apply""); JButton cancelButton = new JButton(""Cancel""); cancelButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { updateUi(); dialog.setVisible(false); } }); applyButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { haltOnBreak = haltOnBreakCheckBox.isSelected(); programLoadAddress = hexToInt(programLoadAddressField.getText()); updateUi(); setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); } }); buttonsContainer.add(applyButton); buttonsContainer.add(cancelButton); contents.add(settingsContainer, BorderLayout.PAGE_START); contents.add(buttonsContainer, BorderLayout.PAGE_END); dialog.pack(); }",https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,PreferencesDialog.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { haltOnBreak = haltOnBreakCheckBox.isSelected(); programLoadAddress = hexToInt(programLoadAddressField.getText()); updateUi(); setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); },https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,PreferencesDialog.java,updateUi,public void updateUi() { haltOnBreakCheckBox.setSelected(haltOnBreak); programLoadAddressField.setText(intToHex(programLoadAddress)); },https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
6a50476bfe2d064fd778fb5d8ec3922ebbe1e227,HexUtil.java,byteToAscii,public static String byteToAscii(int val) { if (val >= 32 && val <= 126) { return ASCII_CONSTANTS[val - 32]; } else { return NON_PRINTABLE; } },https://www.github.com/sethm/symon/commit/6a50476bfe2d064fd778fb5d8ec3922ebbe1e227
a5af522c5c91ab28fdcc0c49a78e6660017e2bbf,MemoryWindow.java,createUi,"private void createUi() { setTitle(""Memory Contents""); this.memoryTable = new MemoryTable(memoryTableModel); memoryTable.setDragEnabled(false); memoryTable.setCellSelectionEnabled(false); memoryTable.setIntercellSpacing(new Dimension(0, 0)); memoryTable.getTableHeader().setReorderingAllowed(false); memoryTable.getTableHeader().setResizingAllowed(false); memoryTable.getTableHeader().setVisible(false); memoryTable.setShowGrid(false); memoryTable.getColumnModel().getColumn(0).setMaxWidth(ADDR_COL_WIDTH); for (int i = 1; i < ASCII_COL_START; i++) { memoryTable.getColumnModel().getColumn(i).setMaxWidth(HEX_COL_WIDTH); } for (int i = ASCII_COL_START; i <= ASCII_COL_END; i++) { memoryTable.getColumnModel().getColumn(i).setMaxWidth(ASCII_COL_WIDTH); } MemoryTableCellRenderer memoryTableCellRenderer = new MemoryTableCellRenderer(); memoryTableCellRenderer.setHorizontalAlignment(JLabel.CENTER); memoryTable.setDefaultRenderer(String.class, memoryTableCellRenderer); ToolTipManager.sharedInstance().unregisterComponent(memoryTable); ToolTipManager.sharedInstance().unregisterComponent(memoryTable.getTableHeader()); JLabel pageNumberLabel = new JLabel(""Page""); pageNumberTextField = new JTextField(8); pageNumberTextField.addActionListener(this); nextPageButton = new JButton(""Next >>""); previousPageButton = new JButton(""<< Prev""); nextPageButton.addActionListener(this); previousPageButton.addActionListener(this); updateControls(); JPanel controlPanel = new JPanel(); JPanel memoryPanel = new JPanel(); memoryPanel.setLayout(new BorderLayout()); memoryPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); controlPanel.add(previousPageButton); controlPanel.add(pageNumberLabel); controlPanel.add(pageNumberTextField); controlPanel.add(nextPageButton); JScrollPane scrollPane = new JScrollPane(memoryTable); scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); memoryPanel.add(scrollPane, BorderLayout.CENTER); setLayout(new BorderLayout()); getContentPane().add(controlPanel, BorderLayout.NORTH); getContentPane().add(memoryPanel, BorderLayout.CENTER); setMinimumSize(MINIMUM_SIZE); memoryPanel.setPreferredSize(memoryTable.getPreferredSize()); setPreferredSize(memoryPanel.getPreferredSize()); pack(); }",https://www.github.com/sethm/symon/commit/a5af522c5c91ab28fdcc0c49a78e6660017e2bbf
d1a05aeb2b9b0f46d2afb3dd611034a92db43c76,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File romFile = fileChooser.getSelectedFile(); if (romFile.canRead()) { long fileSize = romFile.length(); if (fileSize != ROM_SIZE) { throw new IOException(""ROM file must be exactly "" + String.valueOf(ROM_SIZE) + "" bytes.""); } else { if (rom != null) { bus.removeDevice(rom); } rom = Memory.makeROM(ROM_BASE, ROM_BASE + ROM_SIZE - 1, romFile); bus.addDevice(rom); cpu.reset(); logger.log(Level.INFO, ""ROM File `"" + romFile.getName() + ""' loaded at "" + String.format(""0x%04X"", ROM_BASE)); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read ROM file: "" + ex.getMessage()); } catch (MemoryRangeException ex) { logger.log(Level.SEVERE, ""Memory range error while loading ROM file: "" + ex.getMessage()); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error while loading ROM file: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/d1a05aeb2b9b0f46d2afb3dd611034a92db43c76
d1a05aeb2b9b0f46d2afb3dd611034a92db43c76,Memory.java,makeROM,"public static Memory makeROM(int startAddress, int endAddress, File f) throws MemoryRangeException, IOException { Memory memory = new Memory(startAddress, endAddress, true); memory.loadFromFile(f); return memory; }",https://www.github.com/sethm/symon/commit/d1a05aeb2b9b0f46d2afb3dd611034a92db43c76
d1a05aeb2b9b0f46d2afb3dd611034a92db43c76,Memory.java,makeRAM,"public static Memory makeRAM(int startAddress, int endAddress) throws MemoryRangeException { Memory memory = new Memory(startAddress, endAddress, false); return memory; }",https://www.github.com/sethm/symon/commit/d1a05aeb2b9b0f46d2afb3dd611034a92db43c76
1c9c742477ede2240ce32cf5ab1112367b2c1f5e,BusTest.java,testAddDevice,"public void testAddDevice() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x00ff, true); Device rom = new Memory(0x0100, 0x02ff, false); Bus b = new Bus(0x0000, 0xffff); assertEquals(0, b.getDevices().size()); b.addDevice(memory); assertEquals(1, b.getDevices().size()); b.addDevice(rom); assertEquals(2, b.getDevices().size()); }",https://www.github.com/sethm/symon/commit/1c9c742477ede2240ce32cf5ab1112367b2c1f5e
1c9c742477ede2240ce32cf5ab1112367b2c1f5e,BusTest.java,testIsCompleteWithOneDevice,"public void testIsCompleteWithOneDevice() throws MemoryRangeException { Device memory = new Memory(0x0000, 0xffff, true); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertTrue(""Address space should have been complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/1c9c742477ede2240ce32cf5ab1112367b2c1f5e
1c9c742477ede2240ce32cf5ab1112367b2c1f5e,BusTest.java,testIsCompleteWithTwoDevices,"public void testIsCompleteWithTwoDevices() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x7fff, true); Device rom = new Memory(0x8000, 0xffff, false); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(rom); assertTrue(""Address space should have been complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/1c9c742477ede2240ce32cf5ab1112367b2c1f5e
1c9c742477ede2240ce32cf5ab1112367b2c1f5e,BusTest.java,testIsCompleteWithThreeDevices,"public void testIsCompleteWithThreeDevices() throws MemoryRangeException { Device memory = new Memory(0x0000, 0x7fff, true); Device rom1 = new Memory(0x8000, 0xBfff, false); Device rom2 = new Memory(0xC000, 0xffff, false); Bus b = new Bus(0x0000, 0xffff); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(memory); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(rom1); assertFalse(""Address space was unexpectedly complete!"", b.isComplete()); b.addDevice(rom2); assertTrue(""Address space should have been complete!"", b.isComplete()); }",https://www.github.com/sethm/symon/commit/1c9c742477ede2240ce32cf5ab1112367b2c1f5e
d8deca227f03d998ae54cba6bd0fd97c5ad2f6e6,Device.java,getSize,public int getSize(){ return size; },https://www.github.com/sethm/symon/commit/d8deca227f03d998ae54cba6bd0fd97c5ad2f6e6
bc6b93e3fe1562f1cd2d420e5778c48b285d4458,Bus.java,isComplete,public boolean isComplete() { if (devices.isEmpty()) { return false; } int filledMemory = 0; for (Device d : devices) { filledMemory += d.getSize(); } return filledMemory == endAddress - startAddress + 1; },https://www.github.com/sethm/symon/commit/bc6b93e3fe1562f1cd2d420e5778c48b285d4458
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Simulator.java,createAndShowUi,"public void createAndShowUi() { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(bus); videoWindow = new VideoWindow(crtc.getCrtPanel()); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Simulator.java,step,"private void step() throws MemoryAccessException { cpu.step(); traceLog.append(cpu.getCpuState()); if (acia.hasTxChar()) { console.print(Character.toString((char) acia.txRead())); console.repaint(); } try { if (console.hasInput()) { acia.rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (stepsSinceLastCrtcRefresh++ > stepsBetweenCrtcRefreshes) { videoWindow.refreshDisplay(); stepsSinceLastCrtcRefresh = 0; } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { synchronized (videoWindow) { if (videoWindow.isVisible()) { videoWindow.setVisible(false); } else { videoWindow.setVisible(true); } } },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); loadRomItem = new JMenuItem(new LoadRomAction()); JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(loadProgramItem); fileMenu.add(loadRomItem); fileMenu.add(prefsItem); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); final JCheckBoxMenuItem showTraceLog = new JCheckBoxMenuItem(new ToggleTraceWindowAction()); traceLog.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); } }); viewMenu.add(showTraceLog); final JCheckBoxMenuItem showMemoryTable = new JCheckBoxMenuItem(new ToggleMemoryWindowAction()); memoryWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); } }); viewMenu.add(showMemoryTable); final JCheckBoxMenuItem showVideoWindow = new JCheckBoxMenuItem(new ToggleVideoWindowAction()); videoWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showVideoWindow.setSelected(false); } }); viewMenu.add(showVideoWindow); add(viewMenu); }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Simulator.java,windowClosing,public void windowClosing(WindowEvent e) { showVideoWindow.setSelected(false); },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Crtc.java,loadCharRom,private byte[] loadCharRom(String resource) throws IOException { BufferedInputStream bis = null; try { bis = new BufferedInputStream(this.getClass().getResourceAsStream(resource)); ByteArrayOutputStream bos = new ByteArrayOutputStream(); while (bis.available() > 0) { bos.write(bis.read()); } bos.flush(); bos.close(); return bos.toByteArray(); } finally { if (bis != null) { bis.close(); } } },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Crtc.java,getCrtPanel,public CrtPanel getCrtPanel() { return crtPanel; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Crtc.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case REGISTER_SELECT: setCurrentRegister(data); case REGISTER_WRITE: writeRegisterValue(data); default: throw new MemoryAccessException(""No such address.""); } }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Crtc.java,read,"public int read(int address) throws MemoryAccessException { switch (address) { case REGISTER_SELECT: return status(); case REGISTER_WRITE: return 0; default: throw new MemoryAccessException(""No such address.""); } }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Crtc.java,status,private int status() { return 0; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Crtc.java,setCurrentRegister,private void setCurrentRegister(int registerNumber) { this.currentRegister = registerNumber; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Crtc.java,writeRegisterValue,private void writeRegisterValue(int data) { },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,Memory.java,getDmaAccess,public int[] getDmaAccess() { return mem; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,run,public void run() { SwingUtilities.invokeLater(new Runnable() { public void run() { if (cursorBlinkEnabled) { cursorEnabled = !cursorEnabled; repaint(); } } }); },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,run,public void run() { if (cursorBlinkEnabled) { cursorEnabled = !cursorEnabled; repaint(); } },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,paintComponent,"public void paintComponent(Graphics g) { for (int i = 0; i < pageSize; i++) { int address = startAddress + i; int originX = (i % horizontalDisplayed) * charWidth; int originY = (i / horizontalDisplayed) * scanLinesPerRow; image.getRaster().setPixels(originX, originY, charWidth, scanLinesPerRow, getGlyph(i, videoRam[address])); } Graphics2D g2d = (Graphics2D)g; if (shouldScale) { g2d.scale(scaleX, scaleY); } g2d.drawImage(image, 0, 0, null); }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,setStartAddress,public void setStartAddress(int address) { startAddress = address; repaint(); },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getGlyph,"private int[] getGlyph(int position, int chr) { int romOffset = (chr & 0xff) * (charHeight * charWidth); int[] glyph = new int[charWidth * scanLinesPerRow]; for (int i = 0; i < (charWidth * Math.min(charHeight, scanLinesPerRow)); i++) { glyph[i] = charRom[romOffset + i]; } if (cursorEnabled && cursorPosition == position) { int cursorStart = Math.min(glyph.length, cursorStartLine * charWidth); int cursorStop = Math.min(glyph.length, (cursorStopLine + 1) * charWidth); for (int i = cursorStart; i < cursorStop; i++) { glyph[i] ^= 0xff; } } return glyph; }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getWidth,public int getWidth() { return (int) dimensions.getWidth(); },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getHeight,public int getHeight() { return (int) dimensions.getHeight(); },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getPreferredSize,public Dimension getPreferredSize() { return dimensions; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getMaximumSize,public Dimension getMaximumSize() { return dimensions; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getMinimumSize,public Dimension getMinimumSize() { return dimensions; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getCursorStartLine,public int getCursorStartLine() { return cursorStartLine; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,setCursorStartLine,public void setCursorStartLine(int cursorStartLine) { this.cursorStartLine = cursorStartLine; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getCursorStopLine,public int getCursorStopLine() { return cursorStopLine; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,setCursorStopLine,public void setCursorStopLine(int cursorStopLine) { this.cursorStopLine = cursorStopLine; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getCursorBlinkDelay,public int getCursorBlinkDelay() { return cursorBlinkDelay; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,setCursorBlinkDelay,public void setCursorBlinkDelay(int cursorBlinkDelay) { this.cursorBlinkDelay = cursorBlinkDelay; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getCursorPosition,public int getCursorPosition() { return cursorPosition; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,setCursorPosition,public void setCursorPosition(int cursorPosition) { this.cursorPosition = cursorPosition; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,isCursorEnabled,public boolean isCursorEnabled() { return cursorEnabled; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,setCursorEnabled,public void setCursorEnabled(boolean cursorEnabled) { this.cursorEnabled = cursorEnabled; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,isCursorBlinkEnabled,public boolean isCursorBlinkEnabled() { return cursorBlinkEnabled; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,setCursorBlinkEnabled,"public void setCursorBlinkEnabled(boolean cursorBlinkEnabled) { if (cursorBlinkEnabled && cursorBlinker == null) { cursorBlinker = scheduler.scheduleAtFixedRate(new CursorBlinker(), cursorBlinkDelay, cursorBlinkDelay, TimeUnit.MILLISECONDS); } else if (!cursorBlinkEnabled && cursorBlinker != null) { cursorBlinker.cancel(true); cursorBlinker = null; } this.cursorBlinkEnabled = cursorBlinkEnabled; repaint(); }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,setScanLinesPerRow,public void setScanLinesPerRow(int scanLinesPerRow) { this.scanLinesPerRow = scanLinesPerRow; buildImage(); },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,getScanLinesPerRow,public int getScanLinesPerRow() { return scanLinesPerRow; },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,buildImage,"private void buildImage() { int rasterWidth = charWidth * horizontalDisplayed; int rasterHeight = scanLinesPerRow * verticalDisplayed; this.image = new BufferedImage(rasterWidth, rasterHeight, BufferedImage.TYPE_BYTE_BINARY); this.dimensions = new Dimension(rasterWidth * scaleX, rasterHeight * scaleY); }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,CrtPanel.java,convertCharRom,"private int[] convertCharRom(byte[] rawBytes, int charWidth) { int[] converted = new int[rawBytes.length * charWidth]; int romIndex = 0; for (int i = 0; i < converted.length;) { byte charRow = rawBytes[romIndex++]; for (int j = 7; j >= 0; j--) { converted[i++] = ((charRow & (1 << j)) == 0) ? 0 : 0xff; } } return converted; }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,VideoWindow.java,createUi,"public void createUi() { setTitle(""Composite Video""); int borderWidth = (int) (crtPanel.getWidth() * 0.08); int borderHeight = (int) (crtPanel.getHeight() * 0.08); JPanel containerPane = new JPanel(); containerPane.setBorder(BorderFactory.createEmptyBorder(borderHeight, borderWidth, borderHeight, borderWidth)); containerPane.setLayout(new BorderLayout()); containerPane.setBackground(Color.black); containerPane.add(crtPanel, BorderLayout.CENTER); getContentPane().add(containerPane); setResizable(false); pack(); }",https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
e7e3c77e3ff0267419f8d64f596a83169dd97f4d,VideoWindow.java,refreshDisplay,public void refreshDisplay() { if (isVisible()) { repaint(); } },https://www.github.com/sethm/symon/commit/e7e3c77e3ff0267419f8d64f596a83169dd97f4d
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(bus); videoWindow = new VideoWindow(crtc, 2, 2); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); }",https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Crtc.java,write,"public void write(int address, int data) throws MemoryAccessException { logger.info(""[write] Writing CRTC address="" + address + "" data="" + data); switch (address) { case REGISTER_SELECT: setCurrentRegister(data); break; case REGISTER_WRITE: writeRegisterValue(data); break; default: throw new MemoryAccessException(""No such address.""); } notifyListeners(); }",https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Crtc.java,getDmaAccess,public int[] getDmaAccess() { return memory.getDmaAccess(); },https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Crtc.java,getHorizontalDisplayed,public int getHorizontalDisplayed() { return horizontalDisplayed; },https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Crtc.java,getVerticalDisplayed,public int getVerticalDisplayed() { return verticalDisplayed; },https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Crtc.java,getCursorBlinkRate,public int getCursorBlinkRate() { return cursorBlinkRate; },https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Crtc.java,getPageSize,public int getPageSize() { return pageSize; },https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Crtc.java,writeRegisterValue,"private void writeRegisterValue(int data) { logger.info(""Writing CRTC Register #"" + currentRegister + "" with value "" + String.format(""$%02X"", data)); switch (currentRegister) { case HORIZONTAL_DISPLAYED: horizontalDisplayed = data; pageSize = horizontalDisplayed * verticalDisplayed; break; case VERTICAL_DISPLAYED: verticalDisplayed = data; pageSize = horizontalDisplayed * verticalDisplayed; break; case MODE_CONTROL: break; case SCAN_LINE: scanLinesPerRow = data; break; default: logger.info(""Ignoring.""); break; } notifyListeners(); }",https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Device.java,registerListener,public void registerListener(DeviceChangeListener listener) { deviceChangeListeners.add(listener); },https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,Device.java,notifyListeners,public void notifyListeners() { for (DeviceChangeListener l : deviceChangeListeners) { l.deviceStateChanged(); } },https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,DeviceChangeListener.java,deviceStateChanged,public void deviceStateChanged();,https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,VideoWindow.java,paintComponent,"public void paintComponent(Graphics g) { for (int i = 0; i < crtc.getPageSize(); i++) { int address = crtc.getStartAddress() + i; int originX = (i % horizontalDisplayed) * CHAR_WIDTH; int originY = (i / horizontalDisplayed) * scanLinesPerRow; image.getRaster().setPixels(originX, originY, CHAR_WIDTH, scanLinesPerRow, getGlyph(i, videoRam[address])); } Graphics2D g2d = (Graphics2D)g; if (shouldScale) { g2d.scale(scaleX, scaleY); } g2d.drawImage(image, 0, 0, null); }",https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,VideoWindow.java,run,public void run() { SwingUtilities.invokeLater(new Runnable() { public void run() { if (cursorBlinkRate > 0) { showCursor = !showCursor; repaint(); } } }); },https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,VideoWindow.java,run,public void run() { if (cursorBlinkRate > 0) { showCursor = !showCursor; repaint(); } },https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,VideoWindow.java,createAndShowUi,"public void createAndShowUi() { setTitle(""Composite Video""); int borderWidth = 20; int borderHeight = 20; JPanel containerPane = new JPanel(); containerPane.setBorder(BorderFactory.createEmptyBorder(borderHeight, borderWidth, borderHeight, borderWidth)); containerPane.setLayout(new BorderLayout()); containerPane.setBackground(Color.black); containerPane.add(new VideoPanel(), BorderLayout.CENTER); getContentPane().add(containerPane, BorderLayout.CENTER); setResizable(false); pack(); }",https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,VideoWindow.java,buildImage,"private void buildImage() { int rasterWidth = CHAR_WIDTH * horizontalDisplayed; int rasterHeight = scanLinesPerRow * verticalDisplayed; this.image = new BufferedImage(rasterWidth, rasterHeight, BufferedImage.TYPE_BYTE_BINARY); this.dimensions = new Dimension(rasterWidth * scaleX, rasterHeight * scaleY); }",https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,VideoWindow.java,deviceStateChanged,"public void deviceStateChanged() { boolean repackNeeded = false; if (horizontalDisplayed != crtc.getHorizontalDisplayed()) { horizontalDisplayed = crtc.getHorizontalDisplayed(); repackNeeded = true; } if (verticalDisplayed != crtc.getVerticalDisplayed()) { verticalDisplayed = crtc.getVerticalDisplayed(); repackNeeded = true; } if (scanLinesPerRow != crtc.getScanLinesPerRow()) { scanLinesPerRow = crtc.getScanLinesPerRow(); repackNeeded = true; } if (cursorBlinkRate != crtc.getCursorBlinkRate()) { cursorBlinkRate = crtc.getCursorBlinkRate(); if (cursorBlinker != null) { cursorBlinker.cancel(true); cursorBlinker = null; } if (cursorBlinkRate > 0) { cursorBlinker = scheduler.scheduleAtFixedRate(new CursorBlinker(), cursorBlinkRate, cursorBlinkRate, TimeUnit.MILLISECONDS); } } if (repackNeeded) { buildImage(); invalidate(); pack(); } }",https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
6dde766f5a398b242d52a32406ca4ec3adca2fbd,VideoWindow.java,getGlyph,"private int[] getGlyph(int position, int chr) { int romOffset = (chr & 0xff) * (CHAR_HEIGHT * CHAR_WIDTH); int[] glyph = new int[CHAR_WIDTH * scanLinesPerRow]; for (int i = 0; i < (CHAR_WIDTH * Math.min(CHAR_HEIGHT, scanLinesPerRow)); i++) { glyph[i] = charRom[romOffset + i]; } if (showCursor && crtc.isCursorEnabled() && crtc.getCursorPosition() == position) { int cursorStart = Math.min(glyph.length, crtc.getCursorStartLine() * CHAR_WIDTH); int cursorStop = Math.min(glyph.length, (crtc.getCursorStopLine() + 1) * CHAR_WIDTH); for (int i = cursorStart; i < cursorStop; i++) { glyph[i] ^= 0xff; } } return glyph; }",https://www.github.com/sethm/symon/commit/6dde766f5a398b242d52a32406ca4ec3adca2fbd
3c68c639958e3394c465a438717aa745930298c6,Crtc.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case REGISTER_SELECT: setCurrentRegister(data); break; case REGISTER_WRITE: writeRegisterValue(data); break; default: throw new MemoryAccessException(""No such address.""); } notifyListeners(); }",https://www.github.com/sethm/symon/commit/3c68c639958e3394c465a438717aa745930298c6
3c68c639958e3394c465a438717aa745930298c6,Crtc.java,writeRegisterValue,private void writeRegisterValue(int data) { switch (currentRegister) { case HORIZONTAL_DISPLAYED: horizontalDisplayed = data; pageSize = horizontalDisplayed * verticalDisplayed; break; case VERTICAL_DISPLAYED: verticalDisplayed = data; pageSize = horizontalDisplayed * verticalDisplayed; break; case MODE_CONTROL: break; case SCAN_LINE: scanLinesPerRow = data; break; case CURSOR_START: cursorStartLine = data & 0x1f; int cursorMode = (data & 0x60) >> 5; switch (cursorMode) { case 0: cursorEnabled = true; cursorBlinkRate = 0; break; case 1: cursorEnabled = false; cursorBlinkRate = 0; break; case 2: cursorEnabled = true; cursorBlinkRate = 500; break; case 3: cursorEnabled = true; cursorBlinkRate = 1000; break; } break; case CURSOR_END: cursorStopLine = data & 0x1f; break; case DISPLAY_START_HIGH: startAddress = ((data & 0xff) << 8) | (startAddress & 0x00ff); break; case DISPLAY_START_LOW: startAddress = ((data & 0xff) | (startAddress & 0xff00)); break; case CURSOR_POSITION_HIGH: cursorPosition = ((data & 0xff) << 8) | (cursorPosition & 0x00ff); break; case CURSOR_POSITION_LOW: cursorPosition = (data & 0xff) | (cursorPosition & 0xff00); break; default: break; } notifyListeners(); },https://www.github.com/sethm/symon/commit/3c68c639958e3394c465a438717aa745930298c6
3c68c639958e3394c465a438717aa745930298c6,VideoWindow.java,paintComponent,"public void paintComponent(Graphics g) { for (int i = 0; i < crtc.getPageSize(); i++) { int address = crtc.getStartAddress() + i; int originX = (i % horizontalDisplayed) * CHAR_WIDTH; int originY = (i / horizontalDisplayed) * scanLinesPerRow; image.getRaster().setPixels(originX, originY, CHAR_WIDTH, scanLinesPerRow, getGlyph(address)); } Graphics2D g2d = (Graphics2D)g; if (shouldScale) { g2d.scale(scaleX, scaleY); } g2d.drawImage(image, 0, 0, null); }",https://www.github.com/sethm/symon/commit/3c68c639958e3394c465a438717aa745930298c6
3c68c639958e3394c465a438717aa745930298c6,VideoWindow.java,run,public void run() { SwingUtilities.invokeLater(new Runnable() { public void run() { if (cursorBlinkRate > 0) { hideCursor = !hideCursor; repaint(); } } }); },https://www.github.com/sethm/symon/commit/3c68c639958e3394c465a438717aa745930298c6
3c68c639958e3394c465a438717aa745930298c6,VideoWindow.java,run,public void run() { if (cursorBlinkRate > 0) { hideCursor = !hideCursor; repaint(); } },https://www.github.com/sethm/symon/commit/3c68c639958e3394c465a438717aa745930298c6
3c68c639958e3394c465a438717aa745930298c6,VideoWindow.java,deviceStateChanged,"public void deviceStateChanged() { boolean repackNeeded = false; if (horizontalDisplayed != crtc.getHorizontalDisplayed()) { horizontalDisplayed = crtc.getHorizontalDisplayed(); repackNeeded = true; } if (verticalDisplayed != crtc.getVerticalDisplayed()) { verticalDisplayed = crtc.getVerticalDisplayed(); repackNeeded = true; } if (scanLinesPerRow != crtc.getScanLinesPerRow()) { scanLinesPerRow = crtc.getScanLinesPerRow(); repackNeeded = true; } if (cursorBlinkRate != crtc.getCursorBlinkRate()) { cursorBlinkRate = crtc.getCursorBlinkRate(); if (cursorBlinker != null) { cursorBlinker.cancel(true); cursorBlinker = null; hideCursor = false; } if (cursorBlinkRate > 0) { cursorBlinker = scheduler.scheduleAtFixedRate(new CursorBlinker(), cursorBlinkRate, cursorBlinkRate, TimeUnit.MILLISECONDS); } } if (repackNeeded) { buildImage(); invalidate(); pack(); } }",https://www.github.com/sethm/symon/commit/3c68c639958e3394c465a438717aa745930298c6
3c68c639958e3394c465a438717aa745930298c6,VideoWindow.java,createAndShowUi,"private void createAndShowUi() { setTitle(""Composite Video""); int borderWidth = 20; int borderHeight = 20; JPanel containerPane = new JPanel(); containerPane.setBorder(BorderFactory.createEmptyBorder(borderHeight, borderWidth, borderHeight, borderWidth)); containerPane.setLayout(new BorderLayout()); containerPane.setBackground(Color.black); containerPane.add(new VideoPanel(), BorderLayout.CENTER); getContentPane().add(containerPane, BorderLayout.CENTER); setResizable(false); pack(); }",https://www.github.com/sethm/symon/commit/3c68c639958e3394c465a438717aa745930298c6
3c68c639958e3394c465a438717aa745930298c6,VideoWindow.java,getGlyph,"private int[] getGlyph(int address) { int chr = videoRam[address]; int romOffset = (chr & 0xff) * (CHAR_HEIGHT * CHAR_WIDTH); int[] glyph = new int[CHAR_WIDTH * scanLinesPerRow]; for (int i = 0; i < (CHAR_WIDTH * Math.min(CHAR_HEIGHT, scanLinesPerRow)); i++) { glyph[i] = charRom[romOffset + i]; } if (!hideCursor && crtc.isCursorEnabled() && crtc.getCursorPosition() == address) { int cursorStart = Math.min(glyph.length, crtc.getCursorStartLine() * CHAR_WIDTH); int cursorStop = Math.min(glyph.length, (crtc.getCursorStopLine() + 1) * CHAR_WIDTH); for (int i = cursorStart; i < cursorStop; i++) { glyph[i] ^= 0xff; } } return glyph; }",https://www.github.com/sethm/symon/commit/3c68c639958e3394c465a438717aa745930298c6
3c68c639958e3394c465a438717aa745930298c6,VideoWindow.java,loadCharRom,private int[] loadCharRom(String resource) throws IOException { BufferedInputStream bis = null; try { bis = new BufferedInputStream(this.getClass().getResourceAsStream(resource)); ByteArrayOutputStream bos = new ByteArrayOutputStream(); while (bis.available() > 0) { bos.write(bis.read()); } bos.flush(); bos.close(); byte[] raw = bos.toByteArray(); int[] converted = new int[raw.length * CHAR_WIDTH]; int romIndex = 0; for (int i = 0; i < converted.length;) { byte charRow = raw[romIndex++]; for (int j = 7; j >= 0; j--) { converted[i++] = ((charRow & (1 << j)) == 0) ? 0 : 0xff; } } return converted; } finally { if (bis != null) { bis.close(); } } },https://www.github.com/sethm/symon/commit/3c68c639958e3394c465a438717aa745930298c6
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,Crtc.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case REGISTER_SELECT: setCurrentRegister(data); break; case REGISTER_RW: writeRegisterValue(data); break; } }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,Crtc.java,read,public int read(int address) throws MemoryAccessException { switch (address) { case REGISTER_RW: switch (currentRegister) { case CURSOR_POSITION_LOW: return cursorPosition & 0xff; case CURSOR_POSITION_HIGH: return cursorPosition >> 8; default: return 0; } default: return 0; } },https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,Crtc.java,writeRegisterValue,"private void writeRegisterValue(int data) throws MemoryAccessException { int oldStartAddress = startAddress; int oldCursorPosition = cursorPosition; switch (currentRegister) { case HORIZONTAL_DISPLAYED: horizontalDisplayed = data; pageSize = horizontalDisplayed * verticalDisplayed; break; case VERTICAL_DISPLAYED: verticalDisplayed = data; pageSize = horizontalDisplayed * verticalDisplayed; break; case MODE_CONTROL: break; case SCAN_LINE: scanLinesPerRow = data; break; case CURSOR_START: cursorStartLine = data & 0x1f; int cursorMode = (data & 0x60) >> 5; switch (cursorMode) { case 0: cursorEnabled = true; cursorBlinkRate = 0; break; case 1: cursorEnabled = false; cursorBlinkRate = 0; break; case 2: cursorEnabled = true; cursorBlinkRate = 500; break; case 3: cursorEnabled = true; cursorBlinkRate = 1000; break; } break; case CURSOR_END: cursorStopLine = data & 0x1f; break; case DISPLAY_START_HIGH: startAddress = ((data & 0xff) << 8) | (startAddress & 0x00ff); break; case DISPLAY_START_LOW: startAddress = ((data & 0xff) | (startAddress & 0xff00)); break; case CURSOR_POSITION_HIGH: cursorPosition = ((data & 0xff) << 8) | (cursorPosition & 0x00ff); break; case CURSOR_POSITION_LOW: cursorPosition = (data & 0xff) | (cursorPosition & 0xff00); break; default: break; } if (startAddress + pageSize > memory.endAddress()) { startAddress = oldStartAddress; throw new MemoryAccessException(""Cannot draw screen starting at selected address.""); } if (cursorPosition > memory.endAddress()) { cursorPosition = oldCursorPosition; throw new MemoryAccessException(""Cannot position cursor past end of memory.""); } notifyListeners(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,createDevices,"public void createDevices() throws Exception { crtc = new Crtc(0x9000, memory); crtc.registerListener(changeListener); when(memory.startAddress()).thenReturn(0); when(memory.endAddress()).thenReturn(0x7fff); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,selectingRegisterDoesNotTriggedrCallback,"public void selectingRegisterDoesNotTriggedrCallback() throws Exception { crtc.write(0, 1); verify(changeListener, never()).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldChangeHorizontalDisplayed,"public void shouldChangeHorizontalDisplayed() throws Exception { crtc.write(0, 1); crtc.write(1, 80); assertEquals(80, crtc.getHorizontalDisplayed()); crtc.write(1, 40); assertEquals(40, crtc.getHorizontalDisplayed()); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,changeHorizontalDisplayedShouldTriggerCallback,"public void changeHorizontalDisplayedShouldTriggerCallback() throws Exception { crtc.write(0, 1); crtc.write(1, 80); verify(changeListener, times(1)).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldChangeVerticalDisplayed,"public void shouldChangeVerticalDisplayed() throws Exception { crtc.write(0, 6); crtc.write(1, 23); assertEquals(23, crtc.getVerticalDisplayed()); crtc.write(1, 26); assertEquals(26, crtc.getVerticalDisplayed()); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,changeVerticalDisplayedShouldTriggerCallback,"public void changeVerticalDisplayedShouldTriggerCallback() throws Exception { crtc.write(0, 6); crtc.write(1, 23); verify(changeListener, times(1)).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldChangeScanLinesPerRow,"public void shouldChangeScanLinesPerRow() throws Exception { crtc.write(0, 9); crtc.write(1, 3); assertEquals(3, crtc.getScanLinesPerRow()); crtc.write(1, 5); assertEquals(5, crtc.getScanLinesPerRow()); crtc.write(1, 9); assertEquals(9, crtc.getScanLinesPerRow()); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,changeScanLinesPerRowShouldTriggerCallback,"public void changeScanLinesPerRowShouldTriggerCallback() throws Exception { crtc.write(0, 9); crtc.write(1, 3); verify(changeListener, times(1)).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldChangeCursorStartLine,"public void shouldChangeCursorStartLine() throws Exception { crtc.write(0, 10); crtc.write(1, 0); assertEquals(0, crtc.getCursorStartLine()); crtc.write(1, 1); assertEquals(1, crtc.getCursorStartLine()); crtc.write(1, 4); assertEquals(4, crtc.getCursorStartLine()); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,changeCursorStartLineShouldTriggerCallback,"public void changeCursorStartLineShouldTriggerCallback() throws Exception { crtc.write(0, 10); crtc.write(1, 5); verify(changeListener, times(1)).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,cursorStartLineRegisterChangesCursorVisibility,"public void cursorStartLineRegisterChangesCursorVisibility() throws Exception { crtc.write(0, 10); crtc.write(1, 0x00); assertEquals(0, crtc.getCursorStartLine()); assertEquals(0, crtc.getCursorBlinkRate()); assertTrue(crtc.isCursorEnabled()); crtc.write(1, 0x23); assertEquals(3, crtc.getCursorStartLine()); assertEquals(0, crtc.getCursorBlinkRate()); assertFalse(crtc.isCursorEnabled()); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,cursorStartLineRegisterChangesCursorBlinkRate,"public void cursorStartLineRegisterChangesCursorBlinkRate() throws Exception { crtc.write(0, 10); crtc.write(1, 0x40); assertEquals(0, crtc.getCursorStartLine()); assertEquals(500, crtc.getCursorBlinkRate()); assertTrue(crtc.isCursorEnabled()); crtc.write(1, 0x62); assertEquals(2, crtc.getCursorStartLine()); assertEquals(1000, crtc.getCursorBlinkRate()); assertTrue(crtc.isCursorEnabled()); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldChangeCursorStopLine,"public void shouldChangeCursorStopLine() throws Exception { crtc.write(0, 11); crtc.write(1, 0); assertEquals(0, crtc.getCursorStopLine()); crtc.write(1, 3); assertEquals(3, crtc.getCursorStopLine()); crtc.write(1, 6); assertEquals(6, crtc.getCursorStopLine()); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,changeCursorStopLineShouldTriggerCallback,"public void changeCursorStopLineShouldTriggerCallback() throws Exception { crtc.write(0, 11); crtc.write(1, 7); verify(changeListener, times(1)).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldChangeScreenStartAddressHighByte,"public void shouldChangeScreenStartAddressHighByte() throws Exception { crtc.write(0, 12); crtc.write(1, 0x00); assertEquals(0x00, crtc.getStartAddress() >> 8); crtc.write(1, 0x30); assertEquals(0x30, crtc.getStartAddress() >> 8); crtc.write(1, 0x6f); assertEquals(0x6f, crtc.getStartAddress() >> 8); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,changeScreenStartAddressHighByteShouldTriggerCallback,"public void changeScreenStartAddressHighByteShouldTriggerCallback() throws Exception { crtc.write(0, 12); crtc.write(1, 0x30); verify(changeListener, times(1)).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldChangeScreenStartAddressLowByte,"public void shouldChangeScreenStartAddressLowByte() throws Exception { crtc.write(0, 13); crtc.write(1, 0x00); assertEquals(0x00, crtc.getStartAddress() & 0xff); crtc.write(1, 0x11); assertEquals(0x11, crtc.getStartAddress() & 0xff); crtc.write(1, 0xff); assertEquals(0xff, crtc.getStartAddress() & 0xff); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,changeScreenStartAddressLowByteShouldTriggerCallback,"public void changeScreenStartAddressLowByteShouldTriggerCallback() throws Exception { crtc.write(0, 13); crtc.write(1, 0xff); verify(changeListener, times(1)).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldThrowMemoryAccessExceptionIfPageOutOfRange,"public void shouldThrowMemoryAccessExceptionIfPageOutOfRange() throws Exception { crtc.write(0, 12); crtc.write(1, 0x7f); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,readingStartAddressShouldDoNothing,"public void readingStartAddressShouldDoNothing() throws Exception { crtc.write(0, 12); crtc.write(1, 0x03); assertEquals(0, crtc.read(1)); crtc.write(1, 0x70); assertEquals(0, crtc.read(1)); crtc.write(0, 13); crtc.write(1, 0xff); assertEquals(0, crtc.read(1)); crtc.write(1, 0x0e); assertEquals(0, crtc.read(1)); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldChangeCursorPositionHighByte,"public void shouldChangeCursorPositionHighByte() throws Exception { crtc.write(0, 14); crtc.write(1, 0x73); assertEquals(0x73, crtc.getCursorPosition() >> 8); crtc.write(1, 0x3f); assertEquals(0x3f, crtc.getCursorPosition() >> 8); crtc.write(1, 0x7f); assertEquals(0x7f, crtc.getCursorPosition() >> 8); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldBeAbleToReadCursorPositionHighByte,"public void shouldBeAbleToReadCursorPositionHighByte() throws Exception { crtc.write(0, 14); crtc.write(1, 0x3f); assertEquals(0x3f, crtc.read(1)); crtc.write(1, 0x70); assertEquals(0x70, crtc.read(1)); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,changeCursorPositionHighByteShouldTriggerCallback,"public void changeCursorPositionHighByteShouldTriggerCallback() throws Exception { crtc.write(0, 14); crtc.write(1, 0x73); verify(changeListener, times(1)).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldChangeCursorPositionLowByte,"public void shouldChangeCursorPositionLowByte() throws Exception { crtc.write(0, 15); crtc.write(1, 0x00); assertEquals(0x00, crtc.getCursorPosition() & 0xff); crtc.write(1, 0x1f); assertEquals(0x1f, crtc.getCursorPosition() & 0xff); crtc.write(1, 0xff); assertEquals(0xff, crtc.getCursorPosition() & 0xff); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldBeAbleToReadCursorPositionLowByte,"public void shouldBeAbleToReadCursorPositionLowByte() throws Exception { crtc.write(0, 15); crtc.write(1, 0x00); assertEquals(0x00, crtc.read(1)); crtc.write(1, 0x1f); assertEquals(0x1f, crtc.read(1)); crtc.write(1, 0xff); assertEquals(0xff, crtc.read(1)); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,changeCursorPositionLowByteShouldTriggerCallback,"public void changeCursorPositionLowByteShouldTriggerCallback() throws Exception { crtc.write(0, 15); crtc.write(1, 0x01); verify(changeListener, times(1)).deviceStateChanged(); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
4a510b635e2b1db13ac4b83af1d1eb0c89a52f43,CrtcTest.java,shouldThrowMemoryAccessExceptionIfCursorGoesOutOfRange,"public void shouldThrowMemoryAccessExceptionIfCursorGoesOutOfRange() throws Exception { crtc.write(0, 14); crtc.write(1, 0x80); }",https://www.github.com/sethm/symon/commit/4a510b635e2b1db13ac4b83af1d1eb0c89a52f43
0c5035fc56812a5d52ddd602847224ee5d8b9ea4,Bus.java,assertInterrupt,public void assertInterrupt() { if (cpu != null) { cpu.assertInterrupt(); } },https://www.github.com/sethm/symon/commit/0c5035fc56812a5d52ddd602847224ee5d8b9ea4
0c5035fc56812a5d52ddd602847224ee5d8b9ea4,Bus.java,clearInterrupt,public void clearInterrupt() { if (cpu != null) { cpu.clearInterrupt(); } },https://www.github.com/sethm/symon/commit/0c5035fc56812a5d52ddd602847224ee5d8b9ea4
0c5035fc56812a5d52ddd602847224ee5d8b9ea4,Cpu.java,reset,"public void reset() throws MemoryAccessException { state.sp = 0xff; state.pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); state.ir = 0; state.carryFlag = false; state.zeroFlag = false; state.irqDisableFlag = false; state.decimalModeFlag = false; state.breakFlag = false; state.overflowFlag = false; state.negativeFlag = false; state.interruptAsserted = false; state.opTrap = false; state.stepCounter = 0L; state.a = 0; state.x = 0; state.y = 0; }",https://www.github.com/sethm/symon/commit/0c5035fc56812a5d52ddd602847224ee5d8b9ea4
0c5035fc56812a5d52ddd602847224ee5d8b9ea4,Cpu.java,assertInterrupt,public void assertInterrupt() { state.interruptAsserted = true; },https://www.github.com/sethm/symon/commit/0c5035fc56812a5d52ddd602847224ee5d8b9ea4
0c5035fc56812a5d52ddd602847224ee5d8b9ea4,Cpu.java,clearInterrupt,public void clearInterrupt() { state.interruptAsserted = false; },https://www.github.com/sethm/symon/commit/0c5035fc56812a5d52ddd602847224ee5d8b9ea4
0c5035fc56812a5d52ddd602847224ee5d8b9ea4,BusTest.java,testSetAndClearInterrupt,"public void testSetAndClearInterrupt() throws Exception { Bus b = new Bus(0x0000, 0xffff); Cpu c = new Cpu(); b.addCpu(c); assertFalse(c.getCpuState().interruptAsserted); b.assertInterrupt(); assertTrue(c.getCpuState().interruptAsserted); b.clearInterrupt(); assertFalse(c.getCpuState().interruptAsserted); }",https://www.github.com/sethm/symon/commit/0c5035fc56812a5d52ddd602847224ee5d8b9ea4
b6cc4809192d2eed4d4162e51f845d19ef9d2445,Bus.java,assertIrq,public void assertIrq() { if (cpu != null) { cpu.assertIrq(); } },https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,Bus.java,clearIrq,public void clearIrq() { if (cpu != null) { cpu.clearIrq(); } },https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,Bus.java,assertNmi,public void assertNmi() { if (cpu != null) { cpu.assertNmi(); } },https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,Bus.java,clearNmi,public void clearNmi() { if (cpu != null) { cpu.clearNmi(); } },https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,Cpu.java,reset,"public void reset() throws MemoryAccessException { state.sp = 0xff; state.pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); state.ir = 0; state.carryFlag = false; state.zeroFlag = false; state.irqDisableFlag = false; state.decimalModeFlag = false; state.breakFlag = false; state.overflowFlag = false; state.negativeFlag = false; state.irqAsserted = false; state.opTrap = false; state.stepCounter = 0L; state.a = 0; state.x = 0; state.y = 0; }",https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,Cpu.java,assertIrq,public void assertIrq() { state.irqAsserted = true; },https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,Cpu.java,clearIrq,public void clearIrq() { state.irqAsserted = false; },https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,Cpu.java,assertNmi,public void assertNmi() { state.nmiAsserted = true; },https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,Cpu.java,clearNmi,public void clearNmi() { state.nmiAsserted = false; },https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,BusTest.java,testSetAndClearIrq,"public void testSetAndClearIrq() throws Exception { Bus b = new Bus(0x0000, 0xffff); Cpu c = new Cpu(); b.addCpu(c); assertFalse(c.getCpuState().irqAsserted); b.assertIrq(); assertTrue(c.getCpuState().irqAsserted); b.clearIrq(); assertFalse(c.getCpuState().irqAsserted); }",https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
b6cc4809192d2eed4d4162e51f845d19ef9d2445,BusTest.java,testSetAndClearNmi,"public void testSetAndClearNmi() throws Exception { Bus b = new Bus(0x0000, 0xffff); Cpu c = new Cpu(); b.addCpu(c); assertFalse(c.getCpuState().nmiAsserted); b.assertNmi(); assertTrue(c.getCpuState().nmiAsserted); b.clearNmi(); assertFalse(c.getCpuState().nmiAsserted); }",https://www.github.com/sethm/symon/commit/b6cc4809192d2eed4d4162e51f845d19ef9d2445
76dcbd712a7669e97cd7f66f5a1e685c1942465d,Cpu.java,step,"public void step() throws MemoryAccessException { state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(); } state.ir = bus.read(state.pc); irAddressMode = (state.ir >> 2) & 0x07; irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc); incrementPC(); } state.stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 4: tmp = address(bus.read(state.args[0]), bus.read((state.args[0] + 1) & 0xff)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: if (!getIrqDisableFlag()) { handleIrq(); } break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = address(state.args[0], state.args[1]); break; case 0x6c: lo = address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = adc(state.a, bus.read(effectiveAddress)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = sbc(state.a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); }",https://www.github.com/sethm/symon/commit/76dcbd712a7669e97cd7f66f5a1e685c1942465d
76dcbd712a7669e97cd7f66f5a1e685c1942465d,Cpu.java,handleIrq,"private void handleIrq() throws MemoryAccessException { handleInterrupt(IRQ_VECTOR_L, IRQ_VECTOR_H); clearIrq(); }",https://www.github.com/sethm/symon/commit/76dcbd712a7669e97cd7f66f5a1e685c1942465d
76dcbd712a7669e97cd7f66f5a1e685c1942465d,Cpu.java,handleNmi,"private void handleNmi() throws MemoryAccessException { handleInterrupt(NMI_VECTOR_L, NMI_VECTOR_H); clearNmi(); }",https://www.github.com/sethm/symon/commit/76dcbd712a7669e97cd7f66f5a1e685c1942465d
76dcbd712a7669e97cd7f66f5a1e685c1942465d,Cpu.java,handleInterrupt,"private void handleInterrupt(int vectorLow, int vectorHigh) throws MemoryAccessException { setBreakFlag(); stackPush((state.pc + 1 >> 8) & 0xff); stackPush(state.pc + 1 & 0xff); stackPush(state.getStatusFlag()); setIrqDisableFlag(); state.pc = address(bus.read(vectorLow), bus.read(vectorHigh)); }",https://www.github.com/sethm/symon/commit/76dcbd712a7669e97cd7f66f5a1e685c1942465d
76dcbd712a7669e97cd7f66f5a1e685c1942465d,CpuTest.java,testIrq,"public void testIrq() throws Exception { cpu.clearIrqDisableFlag(); bus.write(0xffff, 0x12); bus.write(0xfffe, 0x34); cpu.setProgramCounter(0x1234); bus.loadProgram(0xa9, 0x33, 0x69, 0x01); cpu.setProgramCounter(0x0200); bus.loadProgram(0x18, 0xa9, 0x01, 0x69, 0x01); cpu.step(); assertEquals(0x0201, cpu.getProgramCounter()); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x0203, cpu.getProgramCounter()); assertEquals(0x01, cpu.getAccumulator()); cpu.assertIrq(); cpu.step(); assertTrue(cpu.getIrqDisableFlag()); assertEquals(0x1236, cpu.getProgramCounter()); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getCpuState().irqAsserted); }",https://www.github.com/sethm/symon/commit/76dcbd712a7669e97cd7f66f5a1e685c1942465d
76dcbd712a7669e97cd7f66f5a1e685c1942465d,CpuTest.java,testIrqHonorsIrqDisabledFlag,"public void testIrqHonorsIrqDisabledFlag() throws Exception { cpu.setIrqDisableFlag(); bus.write(0xffff, 0x12); bus.write(0xfffe, 0x34); cpu.setProgramCounter(0x1234); bus.loadProgram(0xa9, 0x33, 0x69, 0x01); cpu.setProgramCounter(0x0200); bus.loadProgram(0x18, 0xa9, 0x01, 0x69, 0x01); cpu.step(); assertEquals(0x0201, cpu.getProgramCounter()); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x0203, cpu.getProgramCounter()); assertEquals(0x01, cpu.getAccumulator()); cpu.assertIrq(); cpu.step(); assertTrue(cpu.getIrqDisableFlag()); assertEquals(0x0205, cpu.getProgramCounter()); assertEquals(0x02, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/76dcbd712a7669e97cd7f66f5a1e685c1942465d
76dcbd712a7669e97cd7f66f5a1e685c1942465d,CpuTest.java,testNmi,"public void testNmi() throws Exception { bus.write(0xfffb, 0x10); bus.write(0xfffa, 0x00); cpu.setProgramCounter(0x1000); bus.loadProgram(0xa9, 0x33, 0x69, 0x01); cpu.setProgramCounter(0x0200); bus.loadProgram(0x18, 0xa9, 0x01, 0x69, 0x01); cpu.step(); assertEquals(0x0201, cpu.getProgramCounter()); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x0203, cpu.getProgramCounter()); assertEquals(0x01, cpu.getAccumulator()); cpu.assertNmi(); cpu.step(); assertTrue(cpu.getIrqDisableFlag()); assertEquals(0x1002, cpu.getProgramCounter()); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getCpuState().nmiAsserted); }",https://www.github.com/sethm/symon/commit/76dcbd712a7669e97cd7f66f5a1e685c1942465d
76dcbd712a7669e97cd7f66f5a1e685c1942465d,CpuTest.java,testNmiIgnoresIrqDisableFlag,"public void testNmiIgnoresIrqDisableFlag() throws Exception { cpu.setIrqDisableFlag(); bus.write(0xfffb, 0x10); bus.write(0xfffa, 0x00); cpu.setProgramCounter(0x1000); bus.loadProgram(0xa9, 0x33, 0x69, 0x01); cpu.setProgramCounter(0x0200); bus.loadProgram(0x18, 0xa9, 0x01, 0x69, 0x01); cpu.step(); assertEquals(0x0201, cpu.getProgramCounter()); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x0203, cpu.getProgramCounter()); assertEquals(0x01, cpu.getAccumulator()); cpu.assertNmi(); cpu.step(); assertTrue(cpu.getIrqDisableFlag()); assertEquals(0x1002, cpu.getProgramCounter()); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getCpuState().nmiAsserted); }",https://www.github.com/sethm/symon/commit/76dcbd712a7669e97cd7f66f5a1e685c1942465d
1bc8eda38dc6188b80422e5b2c061859d1360855,Cpu.java,step,"public void step() throws MemoryAccessException { state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(state.pc); } state.ir = bus.read(state.pc); irAddressMode = (state.ir >> 2) & 0x07; irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc); incrementPC(); } state.stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 4: tmp = address(bus.read(state.args[0]), bus.read((state.args[0] + 1) & 0xff)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: if (!getIrqDisableFlag()) { handleIrq(state.pc + 1); } break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = address(state.args[0], state.args[1]); break; case 0x6c: lo = address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = adc(state.a, bus.read(effectiveAddress)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = sbc(state.a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Cpu.java,handleIrq,"private void handleIrq(int returnPc) throws MemoryAccessException { handleInterrupt(returnPc, IRQ_VECTOR_L, IRQ_VECTOR_H); clearIrq(); }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Cpu.java,handleNmi,"private void handleNmi() throws MemoryAccessException { handleInterrupt(state.pc, NMI_VECTOR_L, NMI_VECTOR_H); clearNmi(); }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Cpu.java,handleInterrupt,"private void handleInterrupt(int returnPc, int vectorLow, int vectorHigh) throws MemoryAccessException { setBreakFlag(); stackPush((returnPc >> 8) & 0xff); stackPush(returnPc & 0xff); stackPush(state.getStatusFlag()); setIrqDisableFlag(); state.pc = address(bus.read(vectorLow), bus.read(vectorHigh)); }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Acia.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case 0: txWrite(data); break; case 1: reset(); break; case 2: setCommandRegister(data); break; case 3: setControlRegister(data); break; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Acia.java,setCommandRegister,private void setCommandRegister(int data) { commandRegister = data; receiveIrqEnabled = (commandRegister & 0x02) == 0; transmitIrqEnabled = (commandRegister & 0x08) == 0 && (commandRegister & 0x04) != 0; },https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Acia.java,setControlRegister,private void setControlRegister(int data) { controlRegister = data; if (data == 0) { reset(); } else { int baudSelector = data & 0x0f; switch (baudSelector) { case 0: baudRate = 0; break; case 1: baudRate = 50; break; case 2: baudRate = 75; break; case 3: baudRate = 110; break; case 4: baudRate = 135; break; case 5: baudRate = 150; break; case 6: baudRate = 300; break; case 7: baudRate = 600; break; case 8: baudRate = 1200; break; case 9: baudRate = 1800; break; case 10: baudRate = 2400; break; case 11: baudRate = 3600; break; case 12: baudRate = 4800; break; case 13: baudRate = 7200; break; case 14: baudRate = 9600; break; case 15: baudRate = 19200; break; } baudRateDelay = calculateBaudRateDelay(); } },https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Acia.java,rxWrite,public synchronized void rxWrite(int data) { rxFull = true; if (receiveIrqEnabled) { getBus().assertIrq(); } rxChar = data; },https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Acia.java,txRead,public synchronized int txRead() { txEmpty = true; if (transmitIrqEnabled) { getBus().assertIrq(); } return txChar; },https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Acia.java,txWrite,public synchronized void txWrite(int data) { lastTxWrite = System.nanoTime(); txChar = data; txEmpty = false; },https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,Acia.java,reset,private synchronized void reset() { txChar = 0; txEmpty = true; rxChar = 0; rxFull = false; receiveIrqEnabled = false; transmitIrqEnabled = false; },https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,AciaTest.java,shouldTriggerInterruptOnRxFullIfRxIrqEnabled,"public void shouldTriggerInterruptOnRxFullIfRxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia(0x000); acia.setBus(mockBus); acia.write(2, 0x00); acia.rxWrite('a'); verify(mockBus, atLeastOnce()).assertIrq(); }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,AciaTest.java,shouldNotTriggerInterruptOnRxFullIfRxIrqNotEnabled,"public void shouldNotTriggerInterruptOnRxFullIfRxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia(0x000); acia.setBus(mockBus); acia.write(2, 0x02); acia.rxWrite('a'); verify(mockBus, never()).assertIrq(); }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,AciaTest.java,shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled,"public void shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia(0x000); acia.setBus(mockBus); acia.write(2, 0x06); acia.write(0, 'a'); verify(mockBus, never()).assertIrq(); acia.txRead(); verify(mockBus, atLeastOnce()).assertIrq(); }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,AciaTest.java,shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled,"public void shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia(0x000); acia.setBus(mockBus); acia.write(2, 0x02); acia.write(0, 'a'); acia.txRead(); verify(mockBus, never()).assertIrq(); }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
1bc8eda38dc6188b80422e5b2c061859d1360855,CpuTest.java,testIrqPushesCorrectReturnAddressOntoStack,"public void testIrqPushesCorrectReturnAddressOntoStack() throws Exception { cpu.clearIrqDisableFlag(); bus.write(0xffff, 0x10); bus.write(0xfffe, 0x00); cpu.setProgramCounter(0x1000); bus.loadProgram(0xea, 0xea, 0x40); cpu.setProgramCounter(0x0200); bus.loadProgram(0x18, 0xa9, 0x01, 0x6d, 0x06, 0x02, 0x00, 0x03); cpu.step(); assertEquals(0x0201, cpu.getProgramCounter()); assertEquals(0x00, cpu.getAccumulator()); cpu.assertIrq(); cpu.step(); assertEquals(0x1001, cpu.getProgramCounter()); cpu.step(); assertEquals(0x1002, cpu.getProgramCounter()); cpu.step(); assertEquals(0x0201, cpu.getProgramCounter()); cpu.step(); assertEquals(0x0203, cpu.getProgramCounter()); cpu.assertIrq(); cpu.step(); assertEquals(0x1001, cpu.getProgramCounter()); cpu.step(); assertEquals(0x1002, cpu.getProgramCounter()); cpu.step(); assertEquals(0x0203, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/1bc8eda38dc6188b80422e5b2c061859d1360855
40c5397ed8f369d505ec95444b22ace869ceed33,Simulator.java,handleReset,"private void handleReset() { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Reset requested. Resetting CPU.""); cpu.reset(); console.reset(); traceLog.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); memoryWindow.updateState(); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
40c5397ed8f369d505ec95444b22ace869ceed33,Simulator.java,run,public void run() { statusPane.updateState(cpu); memoryWindow.updateState(); },https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
40c5397ed8f369d505ec95444b22ace869ceed33,Simulator.java,handleStep,"private void handleStep(int numSteps) { try { for (int i = 0; i < numSteps; i++) { step(); } SwingUtilities.invokeLater(new Runnable() { public void run() { if (traceLog.isVisible()) { traceLog.refresh(); } statusPane.updateState(cpu); memoryWindow.updateState(); } }); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
40c5397ed8f369d505ec95444b22ace869ceed33,Simulator.java,run,public void run() { if (traceLog.isVisible()) { traceLog.refresh(); } statusPane.updateState(cpu); memoryWindow.updateState(); },https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
40c5397ed8f369d505ec95444b22ace869ceed33,Simulator.java,step,"private void step() throws MemoryAccessException { cpu.step(); traceLog.append(cpu.getCpuState()); if (acia.hasTxChar()) { console.print(Character.toString((char) acia.txRead())); console.repaint(); } try { if (console.hasInput()) { acia.rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (stepsSinceLastCrtcRefresh++ > stepsBetweenCrtcRefreshes) { videoWindow.refreshDisplay(); stepsSinceLastCrtcRefresh = 0; } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); memoryWindow.updateState(); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
40c5397ed8f369d505ec95444b22ace869ceed33,Simulator.java,loadProgram,"private void loadProgram(byte[] program, int startAddress) throws MemoryAccessException { int addr = startAddress, i; for (i = 0; i < program.length; i++) { bus.write(addr++, program[i] & 0xff); } logger.log(Level.INFO, ""Loaded "" + i + "" bytes at address 0x"" + Integer.toString(startAddress, 16)); cpu.reset(); cpu.setProgramCounter(preferences.getProgramStartAddress()); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); memoryWindow.updateState(); } }); }",https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
40c5397ed8f369d505ec95444b22ace869ceed33,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(false); stepCountBox.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(cpu); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
40c5397ed8f369d505ec95444b22ace869ceed33,Simulator.java,run,"public void run() { statusPane.updateState(cpu); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); }",https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
40c5397ed8f369d505ec95444b22ace869ceed33,MemoryWindow.java,actionPerformed,"public void actionPerformed(ActionEvent e) { if (e.getSource() == previousPageButton) { int currentPage = getPageNumber(); if (currentPage > 0x00) { setPageNumber(currentPage - 1); updateControls(); updateState(); } } else if (e.getSource() == nextPageButton) { int currentPage = getPageNumber(); if (currentPage < 0xff) { setPageNumber(currentPage + 1); updateControls(); updateState(); } } else if (e.getSource() == pageNumberTextField) { String pageNumberInput = pageNumberTextField.getText(); try { int newPageNumber = Integer.parseInt(pageNumberInput, 16); setPageNumber(newPageNumber & 0xff); updateState(); } catch (NumberFormatException ex) { Logger.getLogger(this.getClass().getName()).log(Level.WARNING, ""Can't parse page number "" + pageNumberInput); } updateControls(); } }",https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
40c5397ed8f369d505ec95444b22ace869ceed33,MemoryWindow.java,updateState,public void updateState() { memoryTable.updateUI(); },https://www.github.com/sethm/symon/commit/40c5397ed8f369d505ec95444b22ace869ceed33
97269073172c8db9cc099012ae580bc20be2e2f5,Acia6850.java,read,"public int read(int address) throws MemoryAccessException { switch (address) { case RX_REG: return rxRead(); case STAT_REG: return statusReg(); default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/97269073172c8db9cc099012ae580bc20be2e2f5
97269073172c8db9cc099012ae580bc20be2e2f5,Acia6850.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case TX_REG: txWrite(data); break; case CTRL_REG: setCommandRegister(data); break; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/97269073172c8db9cc099012ae580bc20be2e2f5
97269073172c8db9cc099012ae580bc20be2e2f5,Acia6850.java,setCommandRegister,private void setCommandRegister(int data) { commandRegister = data; if((commandRegister & 0x01) != 0 && (commandRegister & 0x02) != 0) { reset(); } receiveIrqEnabled = (commandRegister & 0x80) == 0; transmitIrqEnabled = (commandRegister & 0x20) == 0 && (commandRegister & 0x40) != 0; },https://www.github.com/sethm/symon/commit/97269073172c8db9cc099012ae580bc20be2e2f5
97269073172c8db9cc099012ae580bc20be2e2f5,Acia6850.java,setBaudRate,public void setBaudRate(int rate) { this.baudRate = rate; this.baudRateDelay = calculateBaudRateDelay(); },https://www.github.com/sethm/symon/commit/97269073172c8db9cc099012ae580bc20be2e2f5
97269073172c8db9cc099012ae580bc20be2e2f5,Acia6850.java,statusReg,public int statusReg() { int stat = 0; if (rxFull && System.nanoTime() >= (lastRxRead + baudRateDelay)) { stat |= 0x01; } if (txEmpty && System.nanoTime() >= (lastTxWrite + baudRateDelay)) { stat |= 0x02; } if (overrun) { stat |= 0x20; } return stat; },https://www.github.com/sethm/symon/commit/97269073172c8db9cc099012ae580bc20be2e2f5
97269073172c8db9cc099012ae580bc20be2e2f5,Acia6850.java,toString,"public String toString() { return ""ACIA6850@"" + String.format(""%04X"", baseAddress); }",https://www.github.com/sethm/symon/commit/97269073172c8db9cc099012ae580bc20be2e2f5
97269073172c8db9cc099012ae580bc20be2e2f5,Acia6850.java,rxRead,public synchronized int rxRead() { lastRxRead = System.nanoTime(); rxFull = false; overrun = false; return rxChar; },https://www.github.com/sethm/symon/commit/97269073172c8db9cc099012ae580bc20be2e2f5
97269073172c8db9cc099012ae580bc20be2e2f5,Acia6850.java,rxWrite,public synchronized void rxWrite(int data) { if(rxFull) { overrun = true; } rxFull = true; if (receiveIrqEnabled) { getBus().assertIrq(); } rxChar = data; },https://www.github.com/sethm/symon/commit/97269073172c8db9cc099012ae580bc20be2e2f5
97269073172c8db9cc099012ae580bc20be2e2f5,Acia6850.java,reset,private synchronized void reset() { overrun = false; },https://www.github.com/sethm/symon/commit/97269073172c8db9cc099012ae580bc20be2e2f5
31fdd87b413aad917476914c3c6865e18080acc0,Acia.java,statusReg,public abstract int statusReg();,https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
31fdd87b413aad917476914c3c6865e18080acc0,Acia.java,toString,"public String toString() { return name + ""@"" + String.format(""%04X"", baseAddress); }",https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
31fdd87b413aad917476914c3c6865e18080acc0,Acia6551.java,setControlRegister,private void setControlRegister(int data) { controlRegister = data; int rate = 0; if (data == 0) { reset(); } else { int baudSelector = data & 0x0f; switch (baudSelector) { case 0: rate = 0; break; case 1: rate = 50; break; case 2: rate = 75; break; case 3: rate = 110; break; case 4: rate = 135; break; case 5: rate = 150; break; case 6: rate = 300; break; case 7: rate = 600; break; case 8: rate = 1200; break; case 9: rate = 1800; break; case 10: rate = 2400; break; case 11: rate = 3600; break; case 12: rate = 4800; break; case 13: rate = 7200; break; case 14: rate = 9600; break; case 15: rate = 19200; break; } setBaudRate(rate); } },https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
31fdd87b413aad917476914c3c6865e18080acc0,AciaTest.java,shouldTriggerInterruptOnRxFullIfRxIrqEnabled,"public void shouldTriggerInterruptOnRxFullIfRxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x00); acia.rxWrite('a'); verify(mockBus, atLeastOnce()).assertIrq(); }",https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
31fdd87b413aad917476914c3c6865e18080acc0,AciaTest.java,shouldNotTriggerInterruptOnRxFullIfRxIrqNotEnabled,"public void shouldNotTriggerInterruptOnRxFullIfRxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x02); acia.rxWrite('a'); verify(mockBus, never()).assertIrq(); }",https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
31fdd87b413aad917476914c3c6865e18080acc0,AciaTest.java,shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled,"public void shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x06); acia.write(0, 'a'); verify(mockBus, never()).assertIrq(); acia.txRead(); verify(mockBus, atLeastOnce()).assertIrq(); }",https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
31fdd87b413aad917476914c3c6865e18080acc0,AciaTest.java,shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled,"public void shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x02); acia.write(0, 'a'); acia.txRead(); verify(mockBus, never()).assertIrq(); }",https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
31fdd87b413aad917476914c3c6865e18080acc0,AciaTest.java,newAciaShouldHaveTxEmptyStatus,"public void newAciaShouldHaveTxEmptyStatus() throws Exception { Acia acia = new Acia6551(0x000); assertEquals(0x10, acia.read(0x0001)); }",https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
31fdd87b413aad917476914c3c6865e18080acc0,AciaTest.java,aciaShouldHaveTxEmptyStatusOffIfTxHasData,"public void aciaShouldHaveTxEmptyStatusOffIfTxHasData() throws Exception { Acia acia = new Acia6551(0x000); acia.txWrite('a'); assertEquals(0x00, acia.read(0x0001)); }",https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
31fdd87b413aad917476914c3c6865e18080acc0,AciaTest.java,aciaShouldHaveRxFullStatusOffIfRxHasData,"public void aciaShouldHaveRxFullStatusOffIfRxHasData() throws Exception { Acia acia = new Acia6551(0x000); acia.rxWrite('a'); assertEquals(0x18, acia.read(0x0001)); }",https://www.github.com/sethm/symon/commit/31fdd87b413aad917476914c3c6865e18080acc0
0d0fddc3652a32bab5e33f385328634a48103d5d,Acia6850.java,setCommandRegister,private void setCommandRegister(int data) { commandRegister = data; if((commandRegister & 0x01) != 0 && (commandRegister & 0x02) != 0) { reset(); } receiveIrqEnabled = (commandRegister & 0x80) != 0; transmitIrqEnabled = (commandRegister & 0x20) != 0 && (commandRegister & 0x40) == 0; },https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
0d0fddc3652a32bab5e33f385328634a48103d5d,Acia6850.java,reset,private synchronized void reset() { overrun = false; rxFull = false; txEmpty = true; },https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
0d0fddc3652a32bab5e33f385328634a48103d5d,AciaTest6850.java,newAcia,private Acia newAcia() throws Exception { Acia acia = new Acia6850(0x0000); acia.setBaudRate(0); return acia; },https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
0d0fddc3652a32bab5e33f385328634a48103d5d,AciaTest6850.java,shouldTriggerInterruptOnRxFullIfRxIrqEnabled,"public void shouldTriggerInterruptOnRxFullIfRxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x80); acia.rxWrite('a'); verify(mockBus, atLeastOnce()).assertIrq(); }",https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
0d0fddc3652a32bab5e33f385328634a48103d5d,AciaTest6850.java,shouldNotTriggerInterruptOnRxFullIfRxIrqNotEnabled,"public void shouldNotTriggerInterruptOnRxFullIfRxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x00); acia.rxWrite('a'); verify(mockBus, never()).assertIrq(); }",https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
0d0fddc3652a32bab5e33f385328634a48103d5d,AciaTest6850.java,shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled,"public void shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x20); acia.write(1, 'a'); verify(mockBus, never()).assertIrq(); acia.txRead(); verify(mockBus, atLeastOnce()).assertIrq(); }",https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
0d0fddc3652a32bab5e33f385328634a48103d5d,AciaTest6850.java,shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled,"public void shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x02); acia.write(DATA_REG, 'a'); acia.txRead(); verify(mockBus, never()).assertIrq(); }",https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
0d0fddc3652a32bab5e33f385328634a48103d5d,AciaTest6850.java,newAciaShouldHaveTxEmptyStatus,"public void newAciaShouldHaveTxEmptyStatus() throws Exception { Acia acia = newAcia(); assertEquals(0x02, acia.read(CMD_STAT_REG) & 0x02); }",https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
0d0fddc3652a32bab5e33f385328634a48103d5d,AciaTest6850.java,aciaShouldHaveTxEmptyStatusOffIfTxHasData,"public void aciaShouldHaveTxEmptyStatusOffIfTxHasData() throws Exception { Acia acia = newAcia(); acia.txWrite('a'); assertEquals(0x00, acia.read(CMD_STAT_REG) & 0x02); }",https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
0d0fddc3652a32bab5e33f385328634a48103d5d,AciaTest6850.java,aciaShouldHaveRxFullStatusOnIfRxHasData,"public void aciaShouldHaveRxFullStatusOnIfRxHasData() throws Exception { Acia acia = newAcia(); acia.rxWrite('a'); assertEquals(0x01, acia.read(CMD_STAT_REG) & 0x01); }",https://www.github.com/sethm/symon/commit/0d0fddc3652a32bab5e33f385328634a48103d5d
8f52e1da1e22c3eb5edf5f8ae69a185e1c362106,Acia6850.java,rxRead,public synchronized int rxRead() { overrun = false; return super.rxRead(); },https://www.github.com/sethm/symon/commit/8f52e1da1e22c3eb5edf5f8ae69a185e1c362106
8f52e1da1e22c3eb5edf5f8ae69a185e1c362106,Acia6850.java,rxWrite,public synchronized void rxWrite(int data) { if(rxFull) { overrun = true; } super.rxWrite(data); },https://www.github.com/sethm/symon/commit/8f52e1da1e22c3eb5edf5f8ae69a185e1c362106
8f52e1da1e22c3eb5edf5f8ae69a185e1c362106,AciaTest6850.java,aciaShouldOverrunAndReadShouldReset,public void aciaShouldOverrunAndReadShouldReset(),https://www.github.com/sethm/symon/commit/8f52e1da1e22c3eb5edf5f8ae69a185e1c362106
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(machine.getBus()); videoWindow = new VideoWindow(machine.getCrtc(), 2, 2); mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); }",https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,handleReset,"private void handleReset() { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Reset requested. Resetting CPU.""); machine.getCpu().reset(); console.reset(); traceLog.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,run,public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,handleStep,"private void handleStep(int numSteps) { try { for (int i = 0; i < numSteps; i++) { step(); } SwingUtilities.invokeLater(new Runnable() { public void run() { if (traceLog.isVisible()) { traceLog.refresh(); } statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); } }); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,run,public void run() { if (traceLog.isVisible()) { traceLog.refresh(); } statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,step,"private void step() throws MemoryAccessException { machine.getCpu().step(); traceLog.append(machine.getCpu().getCpuState()); if (machine.getAcia().hasTxChar()) { console.print(Character.toString((char) machine.getAcia().txRead())); console.repaint(); } try { if (console.hasInput()) { machine.getAcia().rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (stepsSinceLastCrtcRefresh++ > stepsBetweenCrtcRefreshes) { videoWindow.refreshDisplay(); stepsSinceLastCrtcRefresh = 0; } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,loadProgram,"private void loadProgram(byte[] program, int startAddress) throws MemoryAccessException { int addr = startAddress, i; for (i = 0; i < program.length; i++) { machine.getBus().write(addr++, program[i] & 0xff); } logger.log(Level.INFO, ""Loaded "" + i + "" bytes at address 0x"" + Integer.toString(startAddress, 16)); machine.getCpu().reset(); machine.getCpu().setProgramCounter(preferences.getProgramStartAddress()); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); } }); }",https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(false); stepCountBox.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,run,"public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); }",https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,shouldContinue,private boolean shouldContinue() { return isRunning && !(preferences.getHaltOnBreak() && machine.getCpu().getInstruction() == 0x00); },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > machine.getMemorySize()) { throw new IOException(""Program will not fit in available memory.""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } SwingUtilities.invokeLater(new Runnable() { public void run() { console.reset(); } }); loadProgram(program, preferences.getProgramStartAddress()); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read program file: "" + ex.getMessage()); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error loading program: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File romFile = fileChooser.getSelectedFile(); if (romFile.canRead()) { long fileSize = romFile.length(); if (fileSize != machine.getRomSize()) { throw new IOException(""ROM file must be exactly "" + String.valueOf(machine.getRomSize()) + "" bytes.""); } else { Memory rom = Memory.makeROM(machine.getRomBase(), machine.getRomBase() + machine.getRomSize() - 1, romFile); machine.setRom(rom); machine.getCpu().reset(); logger.log(Level.INFO, ""ROM File `"" + romFile.getName() + ""' loaded at "" + String.format(""0x%04X"", machine.getRomBase())); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read ROM file: "" + ex.getMessage()); } catch (MemoryRangeException ex) { logger.log(Level.SEVERE, ""Memory range error while loading ROM file: "" + ex.getMessage()); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error while loading ROM file: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getBus,public Bus getBus();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getCpu,public Cpu getCpu();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getRam,public Memory getRam();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getAcia,public Acia getAcia();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getVia,public Via getVia();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getCrtc,public Crtc getCrtc();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getRom,public Memory getRom();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,setRom,public void setRom(Memory rom) throws MemoryRangeException;,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getRomBase,public int getRomBase();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getRomSize,public int getRomSize();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,Machine.java,getMemorySize,public int getMemorySize();,https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,SymonMachine.java,getRam,public Memory getRam() { return ram; },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,SymonMachine.java,getAcia,public Acia getAcia() { return acia; },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,SymonMachine.java,getVia,public Via getVia() { return via; },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,SymonMachine.java,getCrtc,public Crtc getCrtc() { return crtc; },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,SymonMachine.java,getRom,public Memory getRom() { return rom; },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,SymonMachine.java,setRom,public void setRom(Memory rom) throws MemoryRangeException { if(this.rom != null) { bus.removeDevice(this.rom); } this.rom = rom; bus.addDevice(this.rom); },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,SymonMachine.java,getRomBase,public int getRomBase() { return ROM_BASE; },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,SymonMachine.java,getRomSize,public int getRomSize() { return ROM_SIZE; },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
14e8ea596c068fccce558ab7f647f8bb059d2783,SymonMachine.java,getMemorySize,public int getMemorySize() { return MEMORY_SIZE; },https://www.github.com/sethm/symon/commit/14e8ea596c068fccce558ab7f647f8bb059d2783
f5a25b7303f6adc8d9d6c2b0d92312dbfdbc1c85,MulticompMachine.java,getVia,public Via getVia() { return null; },https://www.github.com/sethm/symon/commit/f5a25b7303f6adc8d9d6c2b0d92312dbfdbc1c85
f5a25b7303f6adc8d9d6c2b0d92312dbfdbc1c85,MulticompMachine.java,getCrtc,public Crtc getCrtc() { return null; },https://www.github.com/sethm/symon/commit/f5a25b7303f6adc8d9d6c2b0d92312dbfdbc1c85
44151f3a9cc2dde439894250e2a95fb8fd47ee8e,Bus.java,buildDeviceAddressArray,private void buildDeviceAddressArray() { int size = (this.endAddress - this.startAddress) + 2; deviceAddressArray = new Device[size]; for(Device device : devices) { MemoryRange range = device.getMemoryRange(); for(int address = range.startAddress; address <= range.endAddress; ++address) { deviceAddressArray[address] = device; } } for(Device device : overlapDevices) { MemoryRange range = device.getMemoryRange(); for(int address = range.startAddress; address <= range.endAddress; ++address) { deviceAddressArray[address] = device; } } },https://www.github.com/sethm/symon/commit/44151f3a9cc2dde439894250e2a95fb8fd47ee8e
44151f3a9cc2dde439894250e2a95fb8fd47ee8e,Bus.java,addDevice,"public void addDevice(Device device, boolean overlap) throws MemoryRangeException { MemoryRange memRange = device.getMemoryRange(); if(!overlap) { for (Device d : devices) { if (d.getMemoryRange().overlaps(memRange)) { throw new MemoryRangeException(""The device being added at "" + String.format(""$%04X"", memRange.startAddress()) + "" overlaps with an existing "" + ""device, '"" + d + ""'""); } } } device.setBus(this); if(overlap) { overlapDevices.add(device); } else { devices.add(device); } buildDeviceAddressArray(); }",https://www.github.com/sethm/symon/commit/44151f3a9cc2dde439894250e2a95fb8fd47ee8e
44151f3a9cc2dde439894250e2a95fb8fd47ee8e,Bus.java,addDevice,"public void addDevice(Device device) throws MemoryRangeException { addDevice(device, false); }",https://www.github.com/sethm/symon/commit/44151f3a9cc2dde439894250e2a95fb8fd47ee8e
44151f3a9cc2dde439894250e2a95fb8fd47ee8e,Bus.java,removeDevice,public void removeDevice(Device device) { if (devices.contains(device)) { devices.remove(device); buildDeviceAddressArray(); } if (overlapDevices.contains(device)) { overlapDevices.remove(device); buildDeviceAddressArray(); } },https://www.github.com/sethm/symon/commit/44151f3a9cc2dde439894250e2a95fb8fd47ee8e
44151f3a9cc2dde439894250e2a95fb8fd47ee8e,Bus.java,read,"public int read(int address) throws MemoryAccessException { Device d = deviceAddressArray[address]; if(d != null) { MemoryRange range = d.getMemoryRange(); int devAddr = address - range.startAddress(); return d.read(devAddr); } throw new MemoryAccessException(""Bus read failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/44151f3a9cc2dde439894250e2a95fb8fd47ee8e
44151f3a9cc2dde439894250e2a95fb8fd47ee8e,Bus.java,write,"public void write(int address, int value) throws MemoryAccessException { Device d = deviceAddressArray[address]; if(d != null) { MemoryRange range = d.getMemoryRange(); int devAddr = address - range.startAddress(); d.write(devAddr, value); return; } throw new MemoryAccessException(""Bus write failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/44151f3a9cc2dde439894250e2a95fb8fd47ee8e
cf36f731da25356632b63a51a544c140da3d95b0,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(machine.getBus()); if(machine.getCrtc() != null) { videoWindow = new VideoWindow(machine.getCrtc(), 2, 2); } mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); }",https://www.github.com/sethm/symon/commit/cf36f731da25356632b63a51a544c140da3d95b0
cf36f731da25356632b63a51a544c140da3d95b0,Simulator.java,step,"private void step() throws MemoryAccessException { machine.getCpu().step(); traceLog.append(machine.getCpu().getCpuState()); if (machine.getAcia().hasTxChar()) { console.print(Character.toString((char) machine.getAcia().txRead())); console.repaint(); } try { if (console.hasInput()) { machine.getAcia().rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (videoWindow != null && stepsSinceLastCrtcRefresh++ > stepsBetweenCrtcRefreshes) { stepsSinceLastCrtcRefresh = 0; } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/cf36f731da25356632b63a51a544c140da3d95b0
cf36f731da25356632b63a51a544c140da3d95b0,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); loadRomItem = new JMenuItem(new LoadRomAction()); JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(loadProgramItem); fileMenu.add(loadRomItem); fileMenu.add(prefsItem); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); final JCheckBoxMenuItem showTraceLog = new JCheckBoxMenuItem(new ToggleTraceWindowAction()); traceLog.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); } }); viewMenu.add(showTraceLog); final JCheckBoxMenuItem showMemoryTable = new JCheckBoxMenuItem(new ToggleMemoryWindowAction()); memoryWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); } }); viewMenu.add(showMemoryTable); if(videoWindow != null) { final JCheckBoxMenuItem showVideoWindow = new JCheckBoxMenuItem(new ToggleVideoWindowAction()); videoWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showVideoWindow.setSelected(false); } }); viewMenu.add(showVideoWindow); } add(viewMenu); }",https://www.github.com/sethm/symon/commit/cf36f731da25356632b63a51a544c140da3d95b0
4a37dd74636d51a0276613b349faf281ade6a4b0,Acia.java,rxRead,public synchronized int rxRead() { lastRxRead = System.nanoTime(); overrun = false; rxFull = false; return rxChar; },https://www.github.com/sethm/symon/commit/4a37dd74636d51a0276613b349faf281ade6a4b0
252ebe05691344939881493b97544040084dbdb4,Acia6551.java,statusReg,public int statusReg() { int stat = 0; if (rxFull && System.nanoTime() >= (lastRxRead + baudRateDelay)) { stat |= 0x08; } if (txEmpty && System.nanoTime() >= (lastTxWrite + baudRateDelay)) { stat |= 0x10; } if (overrun) { stat |= 0x04; } return stat; },https://www.github.com/sethm/symon/commit/252ebe05691344939881493b97544040084dbdb4
72074b97150c6f6485a999c333c6a0b9f530acc1,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox<String>(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(machine.getBus()); if(machine.getCrtc() != null) { videoWindow = new VideoWindow(machine.getCrtc(), 2, 2); } mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); }",https://www.github.com/sethm/symon/commit/72074b97150c6f6485a999c333c6a0b9f530acc1
44bfbc17abd98f328746f9f803b1ed73c78b6161,Cpu.java,step,"public void step() throws MemoryAccessException { opBeginTime = System.nanoTime(); state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(state.pc); } state.ir = bus.read(state.pc); irAddressMode = (state.ir >> 2) & 0x07; irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc); incrementPC(); } state.stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 4: tmp = address(bus.read(state.args[0]), bus.read((state.args[0] + 1) & 0xff)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: if (!getIrqDisableFlag()) { handleIrq(state.pc + 1); } break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = address(state.args[0], state.args[1]); break; case 0x6c: lo = address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = adc(state.a, bus.read(effectiveAddress)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = sbc(state.a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); }",https://www.github.com/sethm/symon/commit/44bfbc17abd98f328746f9f803b1ed73c78b6161
44bfbc17abd98f328746f9f803b1ed73c78b6161,Cpu.java,delayLoop,"private void delayLoop(int opcode) { int clockSteps = Cpu.instructionClocks[0xff & opcode]; if (clockSteps == 0) { clockSteps = 1; } long opFinishTime = System.nanoTime(); long timeSpent = opFinishTime - opBeginTime; if(timeSpent < clockSteps) { surplusTime += clockSteps - timeSpent; if(surplusTime > 1000 * 1000 * 10) { try { Thread.sleep(surplusTime / (1000 * 1000)); } catch (InterruptedException ex) { Logger.getLogger(Cpu.class.getName()).log(Level.SEVERE, ""Trouble putting the CPU to sleep"", ex); } surplusTime = 0; } } }",https://www.github.com/sethm/symon/commit/44bfbc17abd98f328746f9f803b1ed73c78b6161
a49c0d40d87401cd06ccdf375424bfe94e3b74d7,Cpu.java,delayLoop,private void delayLoop(int opcode) { int clockSteps = Cpu.instructionClocks[0xff & opcode]; if (clockSteps == 0) { clockSteps = 1; } long opScheduledEnd = opBeginTime + clockSteps; long now = System.nanoTime(); while(now < opScheduledEnd) { now = System.nanoTime(); } },https://www.github.com/sethm/symon/commit/a49c0d40d87401cd06ccdf375424bfe94e3b74d7
bd2337ae656aefebb34438c180e23ebc9d5a66f5,Simulator.java,main,"public static void main(String args[]) { Class machineClass = SymonMachine.class; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); if(machine.equals(""multicomp"")) { machineClass = MulticompMachine.class; } } } final Class mClass = machineClass; SwingUtilities.invokeLater(new Runnable() { public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); Simulator simulator = new Simulator(mClass); simulator.createAndShowUi(); simulator.handleReset(); } catch (Exception e) { e.printStackTrace(); } } }); }",https://www.github.com/sethm/symon/commit/bd2337ae656aefebb34438c180e23ebc9d5a66f5
bd2337ae656aefebb34438c180e23ebc9d5a66f5,Simulator.java,run,public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); Simulator simulator = new Simulator(mClass); simulator.createAndShowUi(); simulator.handleReset(); } catch (Exception e) { e.printStackTrace(); } },https://www.github.com/sethm/symon/commit/bd2337ae656aefebb34438c180e23ebc9d5a66f5
222772648d93da4391b6422da002f921956b345d,Simulator.java,main,"public static void main(String args[]) { Class machineClass = null; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); if(machine.equals(""symon"")) { machineClass = SymonMachine.class; } else if(machine.equals(""multicomp"")) { machineClass = MulticompMachine.class; } } } if(machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if(s.equals(""Symon"")) { machineClass = SymonMachine.class; } else { machineClass = MulticompMachine.class; } } final Class mClass = machineClass; SwingUtilities.invokeLater(new Runnable() { public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); Simulator simulator = new Simulator(mClass); simulator.createAndShowUi(); simulator.handleReset(); } catch (Exception e) { e.printStackTrace(); } } }); }",https://www.github.com/sethm/symon/commit/222772648d93da4391b6422da002f921956b345d
d7f8045b61ed288bbcfd2e338ad005cab8047c86,Bus.java,buildDeviceAddressArray,private void buildDeviceAddressArray() { int size = (this.endAddress - this.startAddress) + 2; deviceAddressArray = new Device[size]; List<Integer> priorities = new ArrayList<Integer>(deviceMap.keySet()); Collections.sort(priorities); for(int priority : priorities) { SortedSet<Device> deviceSet = deviceMap.get(priority); for(Device device : deviceSet) { MemoryRange range = device.getMemoryRange(); for(int address = range.startAddress; address <= range.endAddress; ++address) { deviceAddressArray[address] = device; } } } },https://www.github.com/sethm/symon/commit/d7f8045b61ed288bbcfd2e338ad005cab8047c86
d7f8045b61ed288bbcfd2e338ad005cab8047c86,Bus.java,addDevice,"public void addDevice(Device device, int priority) { SortedSet<Device> deviceSet = deviceMap.get(priority); if(deviceSet == null) { deviceSet = new TreeSet<Device>(); deviceMap.put(priority, deviceSet); } deviceSet.add(device); buildDeviceAddressArray(); }",https://www.github.com/sethm/symon/commit/d7f8045b61ed288bbcfd2e338ad005cab8047c86
d7f8045b61ed288bbcfd2e338ad005cab8047c86,Bus.java,addDevice,"public void addDevice(Device device) throws MemoryRangeException { addDevice(device, 0); }",https://www.github.com/sethm/symon/commit/d7f8045b61ed288bbcfd2e338ad005cab8047c86
d7f8045b61ed288bbcfd2e338ad005cab8047c86,Bus.java,removeDevice,public void removeDevice(Device device) { for(SortedSet<Device> deviceSet : deviceMap.values()) { deviceSet.remove(device); } buildDeviceAddressArray(); },https://www.github.com/sethm/symon/commit/d7f8045b61ed288bbcfd2e338ad005cab8047c86
d7f8045b61ed288bbcfd2e338ad005cab8047c86,Bus.java,isComplete,public boolean isComplete() { if(deviceAddressArray == null) { buildDeviceAddressArray(); } for(int address = startAddress; address <= endAddress; ++address) { if(deviceAddressArray[address] == null) { return false; } } return true; },https://www.github.com/sethm/symon/commit/d7f8045b61ed288bbcfd2e338ad005cab8047c86
d7f8045b61ed288bbcfd2e338ad005cab8047c86,Bus.java,getDevices,public SortedSet<Device> getDevices() { SortedSet<Device> devices = new TreeSet<Device>(); List<Integer> priorities = new ArrayList<Integer>(deviceMap.keySet()); Collections.sort(priorities); for(int priority : priorities) { SortedSet<Device> deviceSet = deviceMap.get(priority); for(Device device : deviceSet) { devices.add(device); } } return devices; },https://www.github.com/sethm/symon/commit/d7f8045b61ed288bbcfd2e338ad005cab8047c86
52f4e9a00f352d7a6865d8be803ba87242307ba4,Bus.java,buildDeviceAddressArray,private void buildDeviceAddressArray() { int size = (this.endAddress - this.startAddress) + 1; deviceAddressArray = new Device[size]; List<Integer> priorities = new ArrayList<Integer>(deviceMap.keySet()); Collections.sort(priorities); for(int priority : priorities) { SortedSet<Device> deviceSet = deviceMap.get(priority); for(Device device : deviceSet) { MemoryRange range = device.getMemoryRange(); for(int address = range.startAddress; address <= range.endAddress; ++address) { deviceAddressArray[address - this.startAddress] = device; } } } },https://www.github.com/sethm/symon/commit/52f4e9a00f352d7a6865d8be803ba87242307ba4
52f4e9a00f352d7a6865d8be803ba87242307ba4,Bus.java,addDevice,"public void addDevice(Device device, int priority) throws MemoryRangeException { MemoryRange range = device.getMemoryRange(); if(range.startAddress() < this.startAddress || range.startAddress() > this.endAddress) { throw new MemoryRangeException(""start address of device "" + device.getName() + "" does not fall within the address range of the bus""); } if(range.endAddress() < this.startAddress || range.endAddress() > this.endAddress) { throw new MemoryRangeException(""end address of device "" + device.getName() + "" does not fall within the address range of the bus""); } SortedSet<Device> deviceSet = deviceMap.get(priority); if(deviceSet == null) { deviceSet = new TreeSet<Device>(); deviceMap.put(priority, deviceSet); } deviceSet.add(device); buildDeviceAddressArray(); }",https://www.github.com/sethm/symon/commit/52f4e9a00f352d7a6865d8be803ba87242307ba4
52f4e9a00f352d7a6865d8be803ba87242307ba4,Bus.java,isComplete,public boolean isComplete() { if(deviceAddressArray == null) { buildDeviceAddressArray(); } for(int address = startAddress; address <= endAddress; ++address) { if(deviceAddressArray[address - startAddress] == null) { return false; } } return true; },https://www.github.com/sethm/symon/commit/52f4e9a00f352d7a6865d8be803ba87242307ba4
52f4e9a00f352d7a6865d8be803ba87242307ba4,Bus.java,read,"public int read(int address) throws MemoryAccessException { Device d = deviceAddressArray[address - this.startAddress]; if(d != null) { MemoryRange range = d.getMemoryRange(); int devAddr = address - range.startAddress(); return d.read(devAddr); } throw new MemoryAccessException(""Bus read failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/52f4e9a00f352d7a6865d8be803ba87242307ba4
52f4e9a00f352d7a6865d8be803ba87242307ba4,Bus.java,write,"public void write(int address, int value) throws MemoryAccessException { Device d = deviceAddressArray[address - this.startAddress]; if(d != null) { MemoryRange range = d.getMemoryRange(); int devAddr = address - range.startAddress(); d.write(devAddr, value); return; } throw new MemoryAccessException(""Bus write failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/52f4e9a00f352d7a6865d8be803ba87242307ba4
52f4e9a00f352d7a6865d8be803ba87242307ba4,CpuAbsoluteModeTest.java,setUp,"protected void setUp() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0xffff); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/52f4e9a00f352d7a6865d8be803ba87242307ba4
52f4e9a00f352d7a6865d8be803ba87242307ba4,CpuAccumulatorModeTest.java,setUp,"public void setUp() throws MemoryRangeException, MemoryAccessException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0xffff); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/52f4e9a00f352d7a6865d8be803ba87242307ba4
52f4e9a00f352d7a6865d8be803ba87242307ba4,CpuIndexedIndirectModeTest.java,runBeforeEveryTest,"public void runBeforeEveryTest() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0xffff); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/52f4e9a00f352d7a6865d8be803ba87242307ba4
52f4e9a00f352d7a6865d8be803ba87242307ba4,CpuTest.java,setUp,"public void setUp() throws MemoryRangeException, MemoryAccessException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0xffff); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, 0x00); bus.write(0xfffd, 0x02); cpu.reset(); }",https://www.github.com/sethm/symon/commit/52f4e9a00f352d7a6865d8be803ba87242307ba4
dc7dfc4b4dfeca3cbd2b904b294de0a13f25db69,Bus.java,buildDeviceAddressArray,private void buildDeviceAddressArray() { int size = (this.endAddress - this.startAddress) + 1; deviceAddressArray = new Device[size]; for(Device device : getDevices()) { MemoryRange range = device.getMemoryRange(); for(int address = range.startAddress; address <= range.endAddress; ++address) { deviceAddressArray[address - this.startAddress] = device; } } },https://www.github.com/sethm/symon/commit/dc7dfc4b4dfeca3cbd2b904b294de0a13f25db69
827e9991d50e5b347429a23fc10373fd8d38bdc9,Main.java,main,"public static void main(String args[]) { Class machineClass = null; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); if(machine.equals(""symon"")) { machineClass = SymonMachine.class; } else if(machine.equals(""multicomp"")) { machineClass = MulticompMachine.class; } } } if(machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if(s.equals(""Symon"")) { machineClass = SymonMachine.class; } else { machineClass = MulticompMachine.class; } } final Class mClass = machineClass; SwingUtilities.invokeLater(new Runnable() { public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); Simulator simulator = new Simulator(mClass); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } } }); }",https://www.github.com/sethm/symon/commit/827e9991d50e5b347429a23fc10373fd8d38bdc9
827e9991d50e5b347429a23fc10373fd8d38bdc9,Main.java,run,public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); Simulator simulator = new Simulator(mClass); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } },https://www.github.com/sethm/symon/commit/827e9991d50e5b347429a23fc10373fd8d38bdc9
827e9991d50e5b347429a23fc10373fd8d38bdc9,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox<String>(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(machine.getBus()); if(machine.getCrtc() != null) { videoWindow = new VideoWindow(machine.getCrtc(), 2, 2); } mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); handleReset(); }",https://www.github.com/sethm/symon/commit/827e9991d50e5b347429a23fc10373fd8d38bdc9
fdaeb661d39621d9f02b012deaa9f530628eb509,Main.java,main,"public static void main(String args[]) throws Exception { Class machineClass = SymonMachine.class; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); if(machine.equals(""symon"")) { machineClass = SymonMachine.class; } else if(machine.equals(""multicomp"")) { machineClass = MulticompMachine.class; } } } while(true) { if(machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if(s.equals(""Symon"")) { machineClass = SymonMachine.class; } else { machineClass = MulticompMachine.class; } } final Simulator simulator = new Simulator(machineClass); SwingUtilities.invokeLater(new Runnable() { public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } } }); Simulator.MAIN_CMD cmd = simulator.waitForCommand(); if(cmd.equals(Simulator.MAIN_CMD.SELECTMACHINE)) { machineClass = null; } else { break; } } }",https://www.github.com/sethm/symon/commit/fdaeb661d39621d9f02b012deaa9f530628eb509
fdaeb661d39621d9f02b012deaa9f530628eb509,Main.java,run,public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } },https://www.github.com/sethm/symon/commit/fdaeb661d39621d9f02b012deaa9f530628eb509
fdaeb661d39621d9f02b012deaa9f530628eb509,Simulator.java,waitForCommand,public MAIN_CMD waitForCommand() { synchronized(commandMonitorObject) { try { commandMonitorObject.wait(); } catch (InterruptedException ex) { ex.printStackTrace(); } } return command; },https://www.github.com/sethm/symon/commit/fdaeb661d39621d9f02b012deaa9f530628eb509
fdaeb661d39621d9f02b012deaa9f530628eb509,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if(runLoop != null) { runLoop.requestStop(); } memoryWindow.dispose(); traceLog.dispose(); if(videoWindow != null) { videoWindow.dispose(); } mainWindow.dispose(); command = MAIN_CMD.SELECTMACHINE; synchronized(commandMonitorObject) { commandMonitorObject.notifyAll(); } },https://www.github.com/sethm/symon/commit/fdaeb661d39621d9f02b012deaa9f530628eb509
fdaeb661d39621d9f02b012deaa9f530628eb509,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); loadRomItem = new JMenuItem(new LoadRomAction()); JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); JMenuItem selectMachineItem = new JMenuItem(new SelectMachineAction()); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(loadProgramItem); fileMenu.add(loadRomItem); fileMenu.add(prefsItem); fileMenu.add(selectMachineItem); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); final JCheckBoxMenuItem showTraceLog = new JCheckBoxMenuItem(new ToggleTraceWindowAction()); traceLog.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); } }); viewMenu.add(showTraceLog); final JCheckBoxMenuItem showMemoryTable = new JCheckBoxMenuItem(new ToggleMemoryWindowAction()); memoryWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); } }); viewMenu.add(showMemoryTable); if(videoWindow != null) { final JCheckBoxMenuItem showVideoWindow = new JCheckBoxMenuItem(new ToggleVideoWindowAction()); videoWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showVideoWindow.setSelected(false); } }); viewMenu.add(showVideoWindow); } add(viewMenu); }",https://www.github.com/sethm/symon/commit/fdaeb661d39621d9f02b012deaa9f530628eb509
f90516e53ca57c043e43fd86bc8ccc458f58f68e,Main.java,main,"public static void main(String args[]) throws Exception { Class machineClass = SymonMachine.class; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); if(machine.equals(""symon"")) { machineClass = SymonMachine.class; } else if(machine.equals(""multicomp"")) { machineClass = MulticompMachine.class; } } } while(true) { if(machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if(s != null && s.equals(""Multicomp"")) { machineClass = MulticompMachine.class; } else { machineClass = SymonMachine.class; } } final Simulator simulator = new Simulator(machineClass); SwingUtilities.invokeLater(new Runnable() { public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } } }); Simulator.MAIN_CMD cmd = simulator.waitForCommand(); if(cmd.equals(Simulator.MAIN_CMD.SELECTMACHINE)) { machineClass = null; } else { break; } } }",https://www.github.com/sethm/symon/commit/f90516e53ca57c043e43fd86bc8ccc458f58f68e
b1e1e75555b9769cc51490d303b35e296ca0a372,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox<String>(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(false); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(machine.getBus()); if(machine.getCrtc() != null) { videoWindow = new VideoWindow(machine.getCrtc(), 2, 2); } mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); handleReset(false); }",https://www.github.com/sethm/symon/commit/b1e1e75555b9769cc51490d303b35e296ca0a372
b1e1e75555b9769cc51490d303b35e296ca0a372,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { handleReset(false); },https://www.github.com/sethm/symon/commit/b1e1e75555b9769cc51490d303b35e296ca0a372
b1e1e75555b9769cc51490d303b35e296ca0a372,Simulator.java,handleReset,"private void handleReset(boolean isColdReset) { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Reset requested. Resetting CPU.""); machine.getCpu().reset(); console.reset(); traceLog.reset(); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/b1e1e75555b9769cc51490d303b35e296ca0a372
4bfc196b49e4caf21c2902370389ee5a70a7f0ea,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""Symon 6502 Simulator""); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox<String>(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset((actionEvent.getModifiers() & ActionEvent.CTRL_MASK) != 0); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(machine.getBus()); if(machine.getCrtc() != null) { videoWindow = new VideoWindow(machine.getCrtc(), 2, 2); } mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); handleReset(false); }",https://www.github.com/sethm/symon/commit/4bfc196b49e4caf21c2902370389ee5a70a7f0ea
4bfc196b49e4caf21c2902370389ee5a70a7f0ea,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { handleReset((actionEvent.getModifiers() & ActionEvent.CTRL_MASK) != 0); },https://www.github.com/sethm/symon/commit/4bfc196b49e4caf21c2902370389ee5a70a7f0ea
4bfc196b49e4caf21c2902370389ee5a70a7f0ea,Simulator.java,handleReset,"private void handleReset(boolean isColdReset) { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Reset requested. Resetting CPU.""); machine.getCpu().reset(); console.reset(); traceLog.reset(); if (isColdReset) { Memory mem = machine.getRam(); if (mem != null) { mem.fill(0); } } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/4bfc196b49e4caf21c2902370389ee5a70a7f0ea
004087a7423a2a537069e32a4fbf76f0fd31cd42,Bus.java,addDevice,"public void addDevice(Device device, int priority) throws MemoryRangeException { MemoryRange range = device.getMemoryRange(); if(range.startAddress() < this.startAddress || range.startAddress() > this.endAddress) { throw new MemoryRangeException(""start address of device "" + device.getName() + "" does not fall within the address range of the bus""); } if(range.endAddress() < this.startAddress || range.endAddress() > this.endAddress) { throw new MemoryRangeException(""end address of device "" + device.getName() + "" does not fall within the address range of the bus""); } SortedSet<Device> deviceSet = deviceMap.get(priority); if(deviceSet == null) { deviceSet = new TreeSet<Device>(); deviceMap.put(priority, deviceSet); } device.setBus(this); deviceSet.add(device); buildDeviceAddressArray(); }",https://www.github.com/sethm/symon/commit/004087a7423a2a537069e32a4fbf76f0fd31cd42
d658cd0ae5f7de9f716b8571a3011ff1369244f7,SdController.java,write,"public void write(int address, int data) throws MemoryAccessException { switch(address) { case 0 : writeData(data); break; case 1 : writeCommand(data); break; case 2 : this.lba0 = data; computePosition(); break; case 3 : this.lba1 = data; computePosition(); break; case 4 : this.lba2 = data; computePosition(); break; } }",https://www.github.com/sethm/symon/commit/d658cd0ae5f7de9f716b8571a3011ff1369244f7
d658cd0ae5f7de9f716b8571a3011ff1369244f7,SdController.java,read,public int read(int address) throws MemoryAccessException { switch(address) { case 0: return readData(); case 1: return readStatus(); case 2: return lba0; case 3: return lba1; case 4: return lba2; default: return 0; } },https://www.github.com/sethm/symon/commit/d658cd0ae5f7de9f716b8571a3011ff1369244f7
d658cd0ae5f7de9f716b8571a3011ff1369244f7,SdController.java,computePosition,private void computePosition() { this.position = lba0 + (lba1 << 8) + (lba2 << 16); this.position <<= 9; },https://www.github.com/sethm/symon/commit/d658cd0ae5f7de9f716b8571a3011ff1369244f7
d658cd0ae5f7de9f716b8571a3011ff1369244f7,SdController.java,readData,private int readData() { this.position %= this.sdcontent.length; return this.sdcontent[this.position++]; },https://www.github.com/sethm/symon/commit/d658cd0ae5f7de9f716b8571a3011ff1369244f7
d658cd0ae5f7de9f716b8571a3011ff1369244f7,SdController.java,writeData,private void writeData(int data) { this.position %= this.sdcontent.length; this.sdcontent[this.position++] = (byte) data; },https://www.github.com/sethm/symon/commit/d658cd0ae5f7de9f716b8571a3011ff1369244f7
d658cd0ae5f7de9f716b8571a3011ff1369244f7,SdController.java,readStatus,private int readStatus() { switch(this.status) { case IDLE: return 128; case READ: return 224; default: return 0; } },https://www.github.com/sethm/symon/commit/d658cd0ae5f7de9f716b8571a3011ff1369244f7
d658cd0ae5f7de9f716b8571a3011ff1369244f7,SdController.java,writeCommand,private void writeCommand(int data) { this.command = data; switch(this.command) { case 0 : this.status = Status.READ; break; case 1 : this.status = Status.WRITE; break; default: this.status = Status.IDLE; } },https://www.github.com/sethm/symon/commit/d658cd0ae5f7de9f716b8571a3011ff1369244f7
d658cd0ae5f7de9f716b8571a3011ff1369244f7,SdController.java,toString,"public String toString() { return getName() + ""@"" + String.format(""%04X"", this.getMemoryRange().startAddress); }",https://www.github.com/sethm/symon/commit/d658cd0ae5f7de9f716b8571a3011ff1369244f7
7cb4e1c945f711ea9353eb120b7f72181d220c99,SdController.java,writeCommand,private void writeCommand(int data) { this.command = data; switch(this.command) { case 0 : this.status = Status.READ; break; case 1 : this.status = Status.WRITE; break; default: this.status = Status.IDLE; } computePosition(); },https://www.github.com/sethm/symon/commit/7cb4e1c945f711ea9353eb120b7f72181d220c99
c61a63d5bb4e0b52a1fde39ac58f8eaee07ac3ac,SdController.java,read,public int read(int address) throws MemoryAccessException { switch(address) { case 0: return readData(); case 1: return readStatus(); default: return 0; } },https://www.github.com/sethm/symon/commit/c61a63d5bb4e0b52a1fde39ac58f8eaee07ac3ac
c61a63d5bb4e0b52a1fde39ac58f8eaee07ac3ac,SdController.java,readData,private int readData() { if(status != Status.READ) { return 0; } this.position %= this.sdcontent.length; int data = this.sdcontent[this.position++]; if(this.position % 512 == 0) { this.status = Status.IDLE; } return data; },https://www.github.com/sethm/symon/commit/c61a63d5bb4e0b52a1fde39ac58f8eaee07ac3ac
7a215736fef0c79aafabbaa651cce82362c62a5f,SdController.java,prepareRead,"private void prepareRead() { this.status = Status.READ; this.readPosition = 0; computePosition(); if(sdImageFile != null) { try { FileInputStream fis = new FileInputStream(sdImageFile); fis.skip(this.position); int read = fis.read(readBuffer); if(read < SECTOR_SIZE) { logger.log(Level.WARNING, ""not enough data to fill read buffer from SD image file""); } fis.close(); } catch (IOException ex) { logger.log(Level.WARNING, ""could not fill read buffer from SD image file"", ex); } } }",https://www.github.com/sethm/symon/commit/7a215736fef0c79aafabbaa651cce82362c62a5f
7a215736fef0c79aafabbaa651cce82362c62a5f,SdController.java,prepareWrite,private void prepareWrite() { this.status = Status.WRITE; this.writePosition = 0; computePosition(); },https://www.github.com/sethm/symon/commit/7a215736fef0c79aafabbaa651cce82362c62a5f
7a215736fef0c79aafabbaa651cce82362c62a5f,SdController.java,readData,private int readData() { if(status != Status.READ) { return 0; } int data = readBuffer[readPosition++]; if(readPosition >= SECTOR_SIZE) { this.status = Status.IDLE; } return data; },https://www.github.com/sethm/symon/commit/7a215736fef0c79aafabbaa651cce82362c62a5f
7a215736fef0c79aafabbaa651cce82362c62a5f,SdController.java,writeData,"private void writeData(int data) { if(status != Status.WRITE) { return; } writeBuffer[writePosition++] = (byte) data; if(writePosition >= SECTOR_SIZE) { if(sdImageFile != null) { try { FileOutputStream fos = new FileOutputStream(sdImageFile); fos.write(writeBuffer, this.position, writeBuffer.length); fos.close(); } catch (IOException ex) { logger.log(Level.WARNING, ""could not write data back to SD image file!"", ex); } } this.status = Status.IDLE; } }",https://www.github.com/sethm/symon/commit/7a215736fef0c79aafabbaa651cce82362c62a5f
7a215736fef0c79aafabbaa651cce82362c62a5f,SdController.java,writeCommand,private void writeCommand(int data) { this.command = data; switch(this.command) { case 0 : prepareRead(); break; case 1 : prepareWrite(); break; default: this.status = Status.IDLE; } },https://www.github.com/sethm/symon/commit/7a215736fef0c79aafabbaa651cce82362c62a5f
ccae8905b3663869eb2020c190ec5bd0c76e87ba,Main.java,main,"public static void main(String args[]) throws Exception { Class machineClass = SymonMachine.class; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); if(machine.equals(""symon"")) { machineClass = SymonMachine.class; } else if(machine.equals(""multicomp"")) { machineClass = MulticompMachine.class; } else if (machine.equals(""simple"")) { machineClass = SimpleMachine.class; } } } while(true) { if(machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp"", ""Simple""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if (s != null) { if (s.equals(""Multicomp"")) { machineClass = MulticompMachine.class; } else if (s.equals(""Simple"")) { machineClass = SimpleMachine.class; } else { machineClass = SymonMachine.class; } } } final Simulator simulator = new Simulator(machineClass); SwingUtilities.invokeLater(new Runnable() { public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } } }); Simulator.MAIN_CMD cmd = simulator.waitForCommand(); if(cmd.equals(Simulator.MAIN_CMD.SELECTMACHINE)) { machineClass = null; } else { break; } } }",https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""6502 Simulator - "" + machine.getName()); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox<String>(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset((actionEvent.getModifiers() & ActionEvent.CTRL_MASK) != 0); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(machine.getBus()); if(machine.getCrtc() != null) { videoWindow = new VideoWindow(machine.getCrtc(), 2, 2); } mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); handleReset(false); }",https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,Simulator.java,step,"private void step() throws MemoryAccessException { machine.getCpu().step(); traceLog.append(machine.getCpu().getCpuState()); if (machine.getAcia() != null && machine.getAcia().hasTxChar()) { console.print(Character.toString((char) machine.getAcia().txRead())); console.repaint(); } try { if (machine.getAcia() != null && console.hasInput()) { machine.getAcia().rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (videoWindow != null && stepsSinceLastCrtcRefresh++ > stepsBetweenCrtcRefreshes) { stepsSinceLastCrtcRefresh = 0; } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(machine.getCpu()); memoryWindow.updateState(); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,Simulator.java,simulatorDidStart,public void simulatorDidStart() { loadProgramItem.setEnabled(false); if (loadRomItem != null) { loadRomItem.setEnabled(false); } },https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,Simulator.java,simulatorDidStop,public void simulatorDidStop() { loadProgramItem.setEnabled(true); if (loadRomItem != null) { loadRomItem.setEnabled(true); } },https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); fileMenu.add(loadProgramItem); if (machine.getRom() != null) { loadRomItem = new JMenuItem(new LoadRomAction()); fileMenu.add(loadRomItem); } JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); fileMenu.add(prefsItem); JMenuItem selectMachineItem = new JMenuItem(new SelectMachineAction()); fileMenu.add(selectMachineItem); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); final JCheckBoxMenuItem showTraceLog = new JCheckBoxMenuItem(new ToggleTraceWindowAction()); traceLog.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); } }); viewMenu.add(showTraceLog); final JCheckBoxMenuItem showMemoryTable = new JCheckBoxMenuItem(new ToggleMemoryWindowAction()); memoryWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); } }); viewMenu.add(showMemoryTable); if(videoWindow != null) { final JCheckBoxMenuItem showVideoWindow = new JCheckBoxMenuItem(new ToggleVideoWindowAction()); videoWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showVideoWindow.setSelected(false); } }); viewMenu.add(showVideoWindow); } add(viewMenu); }",https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,Machine.java,getName,String getName();,https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,MulticompMachine.java,getName,"public String getName() { return ""Multicomp""; }",https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,SimpleMachine.java,getAcia,public Acia getAcia() { return null; },https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,SimpleMachine.java,getRom,public Memory getRom() { return null; },https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,SimpleMachine.java,setRom,public void setRom(Memory rom) throws MemoryRangeException { },https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,SimpleMachine.java,getRomBase,public int getRomBase() { return 0; },https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,SimpleMachine.java,getRomSize,public int getRomSize() { return 0; },https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,SimpleMachine.java,getMemorySize,public int getMemorySize() { return BUS_TOP + 1; },https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,SimpleMachine.java,getName,"public String getName() { return ""Simple""; }",https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
ccae8905b3663869eb2020c190ec5bd0c76e87ba,SymonMachine.java,getName,"public String getName() { return ""Symon""; }",https://www.github.com/sethm/symon/commit/ccae8905b3663869eb2020c190ec5bd0c76e87ba
eac387e4724ee26c5b12f6612654d1db7744341c,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""6502 Simulator - "" + machine.getName()); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(machine); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); resetButton = new JButton(""Reset""); stepCountBox = new JComboBox<String>(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(resetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); resetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset((actionEvent.getModifiers() & ActionEvent.CTRL_MASK) != 0); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(machine.getBus()); if(machine.getCrtc() != null) { videoWindow = new VideoWindow(machine.getCrtc(), 2, 2); } mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); handleReset(false); }",https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
eac387e4724ee26c5b12f6612654d1db7744341c,Simulator.java,handleReset,"private void handleReset(boolean isColdReset) { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.log(Level.INFO, ""Reset requested. Resetting CPU.""); machine.getCpu().reset(); console.reset(); traceLog.reset(); if (isColdReset) { Memory mem = machine.getRam(); if (mem != null) { mem.fill(0); } } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(); memoryWindow.updateState(); } }); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Exception during simulator reset: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
eac387e4724ee26c5b12f6612654d1db7744341c,Simulator.java,run,public void run() { statusPane.updateState(); memoryWindow.updateState(); },https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
eac387e4724ee26c5b12f6612654d1db7744341c,Simulator.java,handleStep,"private void handleStep(int numSteps) { try { for (int i = 0; i < numSteps; i++) { step(); } SwingUtilities.invokeLater(new Runnable() { public void run() { if (traceLog.isVisible()) { traceLog.refresh(); } statusPane.updateState(); memoryWindow.updateState(); } }); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception during simulator step: "" + ex.getMessage()); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
eac387e4724ee26c5b12f6612654d1db7744341c,Simulator.java,run,public void run() { if (traceLog.isVisible()) { traceLog.refresh(); } statusPane.updateState(); memoryWindow.updateState(); },https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
eac387e4724ee26c5b12f6612654d1db7744341c,Simulator.java,step,"private void step() throws MemoryAccessException { machine.getCpu().step(); traceLog.append(machine.getCpu().getCpuState()); if (machine.getAcia() != null && machine.getAcia().hasTxChar()) { console.print(Character.toString((char) machine.getAcia().txRead())); console.repaint(); } try { if (machine.getAcia() != null && console.hasInput()) { machine.getAcia().rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (videoWindow != null && stepsSinceLastCrtcRefresh++ > stepsBetweenCrtcRefreshes) { stepsSinceLastCrtcRefresh = 0; } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(); memoryWindow.updateState(); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
eac387e4724ee26c5b12f6612654d1db7744341c,Simulator.java,loadProgram,"private void loadProgram(byte[] program, int startAddress) throws MemoryAccessException { int addr = startAddress, i; for (i = 0; i < program.length; i++) { machine.getBus().write(addr++, program[i] & 0xff); } logger.log(Level.INFO, ""Loaded "" + i + "" bytes at address 0x"" + Integer.toString(startAddress, 16)); machine.getCpu().reset(); machine.getCpu().setProgramCounter(preferences.getProgramStartAddress()); SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(); memoryWindow.updateState(); } }); }",https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
eac387e4724ee26c5b12f6612654d1db7744341c,Simulator.java,run,"public void run() { logger.log(Level.INFO, ""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(false); stepCountBox.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.log(Level.SEVERE, ""Exception in main simulator run thread. Exiting run.""); ex.printStackTrace(); } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
eac387e4724ee26c5b12f6612654d1db7744341c,Simulator.java,run,"public void run() { statusPane.updateState(); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); }",https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
eac387e4724ee26c5b12f6612654d1db7744341c,StatusPanel.java,updateState,"public void updateState() { Cpu cpu = machine.getCpu(); Cpu.CpuState cpuState = cpu.getCpuState(); int status = cpuState.getStatusFlag(); carryFlagLabel.setIcon(iconForFlag(status, 0)); zeroFlagLabel.setIcon(iconForFlag(status, 1)); irqDisableFlagLabel.setIcon(iconForFlag(status, 2)); decimalModeFlagLabel.setIcon(iconForFlag(status, 3)); breakFlagLabel.setIcon(iconForFlag(status, 4)); overflowFlagLabel.setIcon(iconForFlag(status, 6)); negativeFlagLabel.setIcon(iconForFlag(status, 7)); opcodeField.setText(cpu.getCpuState().disassembleOp()); pcField.setText(cpu.getProgramCounterStatus()); spField.setText(cpu.getStackPointerStatus()); aField.setText(cpu.getAccumulatorStatus()); xField.setText(cpu.getXRegisterStatus()); yField.setText(cpu.getYRegisterStatus()); repaint(); }",https://www.github.com/sethm/symon/commit/eac387e4724ee26c5b12f6612654d1db7744341c
1a1d503abee8119fb84fec038cab21f47e3c7dee,StatusPanel.java,createUi,"private void createUi() { Border emptyBorder = BorderFactory.createEmptyBorder(EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER); Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED); setBorder(BorderFactory.createCompoundBorder(emptyBorder, etchedBorder)); GridBagLayout layout = new GridBagLayout(); GridBagConstraints constraints = new GridBagConstraints(); setLayout(layout); JPanel statusFlagsPanel = new JPanel(); statusFlagsPanel.setAlignmentX(LEFT_ALIGNMENT); carryOn = new ImageIcon(this.getClass().getResource(""images/C_on.png"")); carryOff = new ImageIcon(this.getClass().getResource(""images/C_off.png"")); zeroOn = new ImageIcon(this.getClass().getResource(""images/Z_on.png"")); zeroOff = new ImageIcon(this.getClass().getResource(""images/Z_off.png"")); irqOn = new ImageIcon(this.getClass().getResource(""images/I_on.png"")); irqOff = new ImageIcon(this.getClass().getResource(""images/I_off.png"")); decimalOn = new ImageIcon(this.getClass().getResource(""images/D_on.png"")); decimalOff = new ImageIcon(this.getClass().getResource(""images/D_off.png"")); breakOn = new ImageIcon(this.getClass().getResource(""images/B_on.png"")); breakOff = new ImageIcon(this.getClass().getResource(""images/B_off.png"")); overflowOn = new ImageIcon(this.getClass().getResource(""images/O_on.png"")); overflowOff = new ImageIcon(this.getClass().getResource(""images/O_off.png"")); negativeOn = new ImageIcon(this.getClass().getResource(""images/N_on.png"")); negativeOff = new ImageIcon(this.getClass().getResource(""images/N_off.png"")); carryFlagLabel = new JLabel(carryOff, JLabel.CENTER); zeroFlagLabel = new JLabel(zeroOff, JLabel.CENTER); irqDisableFlagLabel = new JLabel(irqOff, JLabel.CENTER); decimalModeFlagLabel = new JLabel(decimalOff, JLabel.CENTER); breakFlagLabel = new JLabel(breakOff, JLabel.CENTER); overflowFlagLabel = new JLabel(overflowOff, JLabel.CENTER); negativeFlagLabel = new JLabel(negativeOff, JLabel.CENTER); carryFlagLabel.setToolTipText(""Carry: The last operation caused an overflow "" + ""from bit 7 of the result or an underflow from bit 0""); zeroFlagLabel.setToolTipText(""Zero: The result of the last operation was 0""); irqDisableFlagLabel.setToolTipText(""Interrupt Disable: Processor will not respond to IRQ""); decimalModeFlagLabel.setToolTipText(""Decimal Mode""); breakFlagLabel.setToolTipText(""Break: BRK instruction occurred""); overflowFlagLabel.setToolTipText(""Overflow: The result of the last operation was "" + ""an invalid 2's complement result""); negativeFlagLabel.setToolTipText(""Negative: The result of the last operation set bit 7""); statusFlagsPanel.add(negativeFlagLabel); statusFlagsPanel.add(overflowFlagLabel); statusFlagsPanel.add(breakFlagLabel); statusFlagsPanel.add(decimalModeFlagLabel); statusFlagsPanel.add(irqDisableFlagLabel); statusFlagsPanel.add(zeroFlagLabel); statusFlagsPanel.add(carryFlagLabel); statusFlagsLabel = makeLabel(""Flags""); opcodeLabel = makeLabel(""IR""); pcLabel = makeLabel(""PC""); spLabel = makeLabel(""SP""); aLabel = makeLabel(""A""); xLabel = makeLabel(""X""); yLabel = makeLabel(""Y""); statusFlagsLabel.setToolTipText(""6502 Processor Status Flags""); opcodeLabel.setToolTipText(""Instruction Register""); pcLabel.setToolTipText(""Program Counter""); spLabel.setToolTipText(""Stack Pointer""); opcodeField = makeTextField(LARGE_TEXT_FIELD_SIZE); pcField = makeTextField(LARGE_TEXT_FIELD_SIZE, true); spField = makeTextField(SMALL_TEXT_FIELD_SIZE); aField = makeTextField(SMALL_TEXT_FIELD_SIZE); xField = makeTextField(SMALL_TEXT_FIELD_SIZE); yField = makeTextField(SMALL_TEXT_FIELD_SIZE); pcField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { if (e.getSource() == pcField) { try { String newPcString = pcField.getText().replaceAll(""[^0-9a-fA-F]"", """"); int newPc = Integer.parseInt(newPcString, 16); machine.getCpu().setProgramCounter(newPc); } catch (Exception ex) { } updateState(); } } }); constraints.anchor = GridBagConstraints.LINE_START; constraints.gridwidth = 2; constraints.gridx = 0; constraints.gridy = 0; add(statusFlagsLabel, constraints); constraints.gridy = 1; add(statusFlagsPanel, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 2; add(opcodeLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 3; add(opcodeField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 4; add(pcLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 5; add(pcField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridwidth = 1; constraints.gridy = 6; add(spLabel, constraints); constraints.gridx = 1; add(aLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 7; add(spField, constraints); constraints.gridx = 1; add(aField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridx = 0; constraints.gridy = 8; add(xLabel, constraints); constraints.gridx = 1; add(yLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 9; add(xField, constraints); constraints.gridx = 1; add(yField, constraints); }",https://www.github.com/sethm/symon/commit/1a1d503abee8119fb84fec038cab21f47e3c7dee
1a1d503abee8119fb84fec038cab21f47e3c7dee,StatusPanel.java,actionPerformed,"public void actionPerformed(ActionEvent e) { if (e.getSource() == pcField) { try { String newPcString = pcField.getText().replaceAll(""[^0-9a-fA-F]"", """"); int newPc = Integer.parseInt(newPcString, 16); machine.getCpu().setProgramCounter(newPc); } catch (Exception ex) { } updateState(); } }",https://www.github.com/sethm/symon/commit/1a1d503abee8119fb84fec038cab21f47e3c7dee
1a1d503abee8119fb84fec038cab21f47e3c7dee,StatusPanel.java,makeTextField,"private JTextField makeTextField(Dimension size) { return makeTextField(size, false); }",https://www.github.com/sethm/symon/commit/1a1d503abee8119fb84fec038cab21f47e3c7dee
1a1d503abee8119fb84fec038cab21f47e3c7dee,StatusPanel.java,makeTextField,"private JTextField makeTextField(Dimension size, boolean editable) { JTextField textField = new JTextField(""""); textField.setAlignmentX(LEFT_ALIGNMENT); textField.setEditable(editable); textField.setMinimumSize(size); textField.setMaximumSize(size); textField.setPreferredSize(size); textField.setBackground(Color.WHITE); return textField; }",https://www.github.com/sethm/symon/commit/1a1d503abee8119fb84fec038cab21f47e3c7dee
36615fc70b97b24b103c40db72898dc5209a03df,StatusPanel.java,createUi,"private void createUi() { Border emptyBorder = BorderFactory.createEmptyBorder(EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER); Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED); setBorder(BorderFactory.createCompoundBorder(emptyBorder, etchedBorder)); GridBagLayout layout = new GridBagLayout(); GridBagConstraints constraints = new GridBagConstraints(); setLayout(layout); JPanel statusFlagsPanel = new JPanel(); statusFlagsPanel.setAlignmentX(LEFT_ALIGNMENT); carryOn = new ImageIcon(this.getClass().getResource(""/C_on.png"")); carryOff = new ImageIcon(this.getClass().getResource(""/C_off.png"")); zeroOn = new ImageIcon(this.getClass().getResource(""/Z_on.png"")); zeroOff = new ImageIcon(this.getClass().getResource(""/Z_off.png"")); irqOn = new ImageIcon(this.getClass().getResource(""/I_on.png"")); irqOff = new ImageIcon(this.getClass().getResource(""/I_off.png"")); decimalOn = new ImageIcon(this.getClass().getResource(""/D_on.png"")); decimalOff = new ImageIcon(this.getClass().getResource(""/D_off.png"")); breakOn = new ImageIcon(this.getClass().getResource(""/B_on.png"")); breakOff = new ImageIcon(this.getClass().getResource(""/B_off.png"")); overflowOn = new ImageIcon(this.getClass().getResource(""/O_on.png"")); overflowOff = new ImageIcon(this.getClass().getResource(""/O_off.png"")); negativeOn = new ImageIcon(this.getClass().getResource(""/N_on.png"")); negativeOff = new ImageIcon(this.getClass().getResource(""/N_off.png"")); carryFlagLabel = new JLabel(carryOff, JLabel.CENTER); zeroFlagLabel = new JLabel(zeroOff, JLabel.CENTER); irqDisableFlagLabel = new JLabel(irqOff, JLabel.CENTER); decimalModeFlagLabel = new JLabel(decimalOff, JLabel.CENTER); breakFlagLabel = new JLabel(breakOff, JLabel.CENTER); overflowFlagLabel = new JLabel(overflowOff, JLabel.CENTER); negativeFlagLabel = new JLabel(negativeOff, JLabel.CENTER); carryFlagLabel.setToolTipText(""Carry: The last operation caused an overflow "" + ""from bit 7 of the result or an underflow from bit 0""); zeroFlagLabel.setToolTipText(""Zero: The result of the last operation was 0""); irqDisableFlagLabel.setToolTipText(""Interrupt Disable: Processor will not respond to IRQ""); decimalModeFlagLabel.setToolTipText(""Decimal Mode""); breakFlagLabel.setToolTipText(""Break: BRK instruction occurred""); overflowFlagLabel.setToolTipText(""Overflow: The result of the last operation was "" + ""an invalid 2's complement result""); negativeFlagLabel.setToolTipText(""Negative: The result of the last operation set bit 7""); statusFlagsPanel.add(negativeFlagLabel); statusFlagsPanel.add(overflowFlagLabel); statusFlagsPanel.add(breakFlagLabel); statusFlagsPanel.add(decimalModeFlagLabel); statusFlagsPanel.add(irqDisableFlagLabel); statusFlagsPanel.add(zeroFlagLabel); statusFlagsPanel.add(carryFlagLabel); statusFlagsLabel = makeLabel(""Flags""); opcodeLabel = makeLabel(""IR""); pcLabel = makeLabel(""PC""); spLabel = makeLabel(""SP""); aLabel = makeLabel(""A""); xLabel = makeLabel(""X""); yLabel = makeLabel(""Y""); statusFlagsLabel.setToolTipText(""6502 Processor Status Flags""); opcodeLabel.setToolTipText(""Instruction Register""); pcLabel.setToolTipText(""Program Counter""); spLabel.setToolTipText(""Stack Pointer""); opcodeField = makeTextField(LARGE_TEXT_FIELD_SIZE); pcField = makeTextField(LARGE_TEXT_FIELD_SIZE, true); spField = makeTextField(SMALL_TEXT_FIELD_SIZE); aField = makeTextField(SMALL_TEXT_FIELD_SIZE); xField = makeTextField(SMALL_TEXT_FIELD_SIZE); yField = makeTextField(SMALL_TEXT_FIELD_SIZE); pcField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { if (e.getSource() == pcField) { try { String newPcString = pcField.getText().replaceAll(""[^0-9a-fA-F]"", """"); int newPc = Integer.parseInt(newPcString, 16); machine.getCpu().setProgramCounter(newPc); } catch (Exception ex) { } updateState(); } } }); constraints.anchor = GridBagConstraints.LINE_START; constraints.gridwidth = 2; constraints.gridx = 0; constraints.gridy = 0; add(statusFlagsLabel, constraints); constraints.gridy = 1; add(statusFlagsPanel, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 2; add(opcodeLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 3; add(opcodeField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 4; add(pcLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 5; add(pcField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridwidth = 1; constraints.gridy = 6; add(spLabel, constraints); constraints.gridx = 1; add(aLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 7; add(spField, constraints); constraints.gridx = 1; add(aField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridx = 0; constraints.gridy = 8; add(xLabel, constraints); constraints.gridx = 1; add(yLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 9; add(xField, constraints); constraints.gridx = 1; add(yField, constraints); }",https://www.github.com/sethm/symon/commit/36615fc70b97b24b103c40db72898dc5209a03df
59c6d8e23b1515e52ff5a72cf19c4900ee6e93bc,Main.java,main,"public static void main(String args[]) throws Exception { Class machineClass = SymonMachine.class; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); if(machine.equals(""symon"")) { machineClass = SymonMachine.class; } else if(machine.equals(""multicomp"")) { machineClass = MulticompMachine.class; } else if (machine.equals(""simple"")) { machineClass = SimpleMachine.class; } } } while (true) { if (machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp"", ""Simple""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if (s != null && s.equals(""Multicomp"")) { machineClass = MulticompMachine.class; } else if (s != null && s.equals(""Simple"")) { machineClass = SimpleMachine.class; } else { machineClass = SymonMachine.class; } } final Simulator simulator = new Simulator(machineClass); SwingUtilities.invokeLater(new Runnable() { public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } } }); Simulator.MAIN_CMD cmd = simulator.waitForCommand(); if (cmd.equals(Simulator.MAIN_CMD.SELECTMACHINE)) { machineClass = null; } else { break; } } }",https://www.github.com/sethm/symon/commit/59c6d8e23b1515e52ff5a72cf19c4900ee6e93bc
59c6d8e23b1515e52ff5a72cf19c4900ee6e93bc,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > machine.getMemorySize()) { throw new IOException(""Program of size $"" + Integer.toString((int)fileSize, 16) + "" will not fit in available memory of size $"" + Integer.toString(machine.getMemorySize(), 16) + "".""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } SwingUtilities.invokeLater(new Runnable() { public void run() { console.reset(); } }); loadProgram(program, preferences.getProgramStartAddress()); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read program file: "" + ex.getMessage()); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error loading program: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/59c6d8e23b1515e52ff5a72cf19c4900ee6e93bc
194a13d1aca1ffaec11fca5566dfe5df0ba93d35,StatusPanel.java,createUi,"private void createUi() { Border emptyBorder = BorderFactory.createEmptyBorder(EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER); Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED); setBorder(BorderFactory.createCompoundBorder(emptyBorder, etchedBorder)); GridBagLayout layout = new GridBagLayout(); GridBagConstraints constraints = new GridBagConstraints(); setLayout(layout); JPanel statusFlagsPanel = new JPanel(); statusFlagsPanel.setAlignmentX(LEFT_ALIGNMENT); carryOn = new ImageIcon(this.getClass().getResource(""/C_on.png"")); carryOff = new ImageIcon(this.getClass().getResource(""/C_off.png"")); zeroOn = new ImageIcon(this.getClass().getResource(""/Z_on.png"")); zeroOff = new ImageIcon(this.getClass().getResource(""/Z_off.png"")); irqOn = new ImageIcon(this.getClass().getResource(""/I_on.png"")); irqOff = new ImageIcon(this.getClass().getResource(""/I_off.png"")); decimalOn = new ImageIcon(this.getClass().getResource(""/D_on.png"")); decimalOff = new ImageIcon(this.getClass().getResource(""/D_off.png"")); breakOn = new ImageIcon(this.getClass().getResource(""/B_on.png"")); breakOff = new ImageIcon(this.getClass().getResource(""/B_off.png"")); overflowOn = new ImageIcon(this.getClass().getResource(""/O_on.png"")); overflowOff = new ImageIcon(this.getClass().getResource(""/O_off.png"")); negativeOn = new ImageIcon(this.getClass().getResource(""/N_on.png"")); negativeOff = new ImageIcon(this.getClass().getResource(""/N_off.png"")); carryFlagLabel = new JLabel(carryOff, JLabel.CENTER); zeroFlagLabel = new JLabel(zeroOff, JLabel.CENTER); irqDisableFlagLabel = new JLabel(irqOff, JLabel.CENTER); decimalModeFlagLabel = new JLabel(decimalOff, JLabel.CENTER); breakFlagLabel = new JLabel(breakOff, JLabel.CENTER); overflowFlagLabel = new JLabel(overflowOff, JLabel.CENTER); negativeFlagLabel = new JLabel(negativeOff, JLabel.CENTER); carryFlagLabel.setToolTipText(""Carry: The last operation caused an overflow "" + ""from bit 7 of the result or an underflow from bit 0""); zeroFlagLabel.setToolTipText(""Zero: The result of the last operation was 0""); irqDisableFlagLabel.setToolTipText(""Interrupt Disable: Processor will not respond to IRQ""); decimalModeFlagLabel.setToolTipText(""Decimal Mode""); breakFlagLabel.setToolTipText(""Break: BRK instruction occurred""); overflowFlagLabel.setToolTipText(""Overflow: The result of the last operation was "" + ""an invalid 2's complement result""); negativeFlagLabel.setToolTipText(""Negative: The result of the last operation set bit 7""); statusFlagsPanel.add(negativeFlagLabel); statusFlagsPanel.add(overflowFlagLabel); statusFlagsPanel.add(breakFlagLabel); statusFlagsPanel.add(decimalModeFlagLabel); statusFlagsPanel.add(irqDisableFlagLabel); statusFlagsPanel.add(zeroFlagLabel); statusFlagsPanel.add(carryFlagLabel); statusFlagsLabel = makeLabel(""Flags""); opcodeLabel = makeLabel(""IR""); pcLabel = makeLabel(""PC""); spLabel = makeLabel(""SP""); aLabel = makeLabel(""A""); xLabel = makeLabel(""X""); yLabel = makeLabel(""Y""); statusFlagsLabel.setToolTipText(""6502 Processor Status Flags""); opcodeLabel.setToolTipText(""Instruction Register""); pcLabel.setToolTipText(""Program Counter""); spLabel.setToolTipText(""Stack Pointer""); opcodeField = makeTextField(LARGE_TEXT_FIELD_SIZE, false); pcField = makeTextField(LARGE_TEXT_FIELD_SIZE, true); spField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); aField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); xField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); yField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); pcField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(pcField) & 0xffff; machine.getCpu().setProgramCounter(newVal); } catch (Exception ex) { } updateState(); } }); spField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(spField) & 0xff; machine.getCpu().setStackPointer(newVal); } catch (Exception ex) { } updateState(); } }); aField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(aField) & 0xff; machine.getCpu().setAccumulator(newVal); } catch (Exception ex) { } updateState(); } }); xField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(xField) & 0xff; machine.getCpu().setXRegister(newVal); } catch (Exception ex) { } updateState(); } }); yField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(yField) & 0xff; machine.getCpu().setYRegister(newVal); } catch (Exception ex) { } updateState(); } }); constraints.anchor = GridBagConstraints.LINE_START; constraints.gridwidth = 2; constraints.gridx = 0; constraints.gridy = 0; add(statusFlagsLabel, constraints); constraints.gridy = 1; add(statusFlagsPanel, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 2; add(opcodeLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 3; add(opcodeField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 4; add(pcLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 5; add(pcField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridwidth = 1; constraints.gridy = 6; add(spLabel, constraints); constraints.gridx = 1; add(aLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 7; add(spField, constraints); constraints.gridx = 1; add(aField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridx = 0; constraints.gridy = 8; add(xLabel, constraints); constraints.gridx = 1; add(yLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 9; add(xField, constraints); constraints.gridx = 1; add(yField, constraints); }",https://www.github.com/sethm/symon/commit/194a13d1aca1ffaec11fca5566dfe5df0ba93d35
194a13d1aca1ffaec11fca5566dfe5df0ba93d35,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(pcField) & 0xffff; machine.getCpu().setProgramCounter(newVal); } catch (Exception ex) { } updateState(); },https://www.github.com/sethm/symon/commit/194a13d1aca1ffaec11fca5566dfe5df0ba93d35
194a13d1aca1ffaec11fca5566dfe5df0ba93d35,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(spField) & 0xff; machine.getCpu().setStackPointer(newVal); } catch (Exception ex) { } updateState(); },https://www.github.com/sethm/symon/commit/194a13d1aca1ffaec11fca5566dfe5df0ba93d35
194a13d1aca1ffaec11fca5566dfe5df0ba93d35,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(aField) & 0xff; machine.getCpu().setAccumulator(newVal); } catch (Exception ex) { } updateState(); },https://www.github.com/sethm/symon/commit/194a13d1aca1ffaec11fca5566dfe5df0ba93d35
194a13d1aca1ffaec11fca5566dfe5df0ba93d35,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(xField) & 0xff; machine.getCpu().setXRegister(newVal); } catch (Exception ex) { } updateState(); },https://www.github.com/sethm/symon/commit/194a13d1aca1ffaec11fca5566dfe5df0ba93d35
194a13d1aca1ffaec11fca5566dfe5df0ba93d35,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(yField) & 0xff; machine.getCpu().setYRegister(newVal); } catch (Exception ex) { } updateState(); },https://www.github.com/sethm/symon/commit/194a13d1aca1ffaec11fca5566dfe5df0ba93d35
194a13d1aca1ffaec11fca5566dfe5df0ba93d35,StatusPanel.java,getHexVal,"private int getHexVal(JTextField source) throws NumberFormatException { String val = source.getText().replaceAll(""[^0-9a-fA-F]"", """"); return Integer.parseInt(val, 16); }",https://www.github.com/sethm/symon/commit/194a13d1aca1ffaec11fca5566dfe5df0ba93d35
7c2a00792883d0d1119c189e38ccf7b1b6917ba2,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""6502 Simulator - "" + machine.getName()); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT); this.statusPane = new StatusPanel(machine); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); softResetButton = new JButton(""Soft Reset""); hardResetButton = new JButton(""Hard Reset""); stepCountBox = new JComboBox<String>(STEPS); stepCountBox.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(softResetButton); buttonContainer.add(hardResetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } } }); stepButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleStep(stepsPerClick); } }); softResetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(false); } }); hardResetButton.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent actionEvent) { handleReset(true); } }); traceLog = new TraceLog(); memoryWindow = new MemoryWindow(machine.getBus()); if(machine.getCrtc() != null) { videoWindow = new VideoWindow(machine.getCrtc(), 2, 2); } mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); handleReset(false); }",https://www.github.com/sethm/symon/commit/7c2a00792883d0d1119c189e38ccf7b1b6917ba2
7c2a00792883d0d1119c189e38ccf7b1b6917ba2,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { handleReset(true); },https://www.github.com/sethm/symon/commit/7c2a00792883d0d1119c189e38ccf7b1b6917ba2
22a9207dcad17366accdfc6889fed165e568c9c9,Cpu.java,lsr,private int lsr(int m) { setCarryFlag((m & 0x01) != 0); return (m & 0xff) >>> 1; },https://www.github.com/sethm/symon/commit/22a9207dcad17366accdfc6889fed165e568c9c9
22a9207dcad17366accdfc6889fed165e568c9c9,CpuTest.java,testRightShiftMasksBitsCorrectly,"public void testRightShiftMasksBitsCorrectly() throws Exception { cpu.setAccumulator(0xff8); assertEquals(0xff8, cpu.getAccumulator()); bus.loadProgram(0x4a, 0x4a); cpu.step(); assertEquals(0x7C, cpu.getAccumulator()); cpu.step(); assertEquals(0x3E, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/22a9207dcad17366accdfc6889fed165e568c9c9
0c40cd325cb2a092e30509f05e823016526589ff,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > machine.getMemorySize()) { throw new IOException(""File will not fit in "" + ""available memory ($"" + Integer.toString(machine.getMemorySize(), 16) + "" bytes)""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } SwingUtilities.invokeLater(new Runnable() { public void run() { console.reset(); } }); loadProgram(program, preferences.getProgramStartAddress()); JOptionPane.showMessageDialog(mainWindow, ""Loaded Successfully At "" + String.format(""$%04X"", preferences.getProgramStartAddress()), ""OK"", JOptionPane.PLAIN_MESSAGE); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read program file: "" + ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error loading program: "" + ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } }",https://www.github.com/sethm/symon/commit/0c40cd325cb2a092e30509f05e823016526589ff
0c40cd325cb2a092e30509f05e823016526589ff,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File romFile = fileChooser.getSelectedFile(); if (romFile.canRead()) { long fileSize = romFile.length(); if (fileSize != machine.getRomSize()) { throw new IOException(""ROM file must be exactly "" + String.valueOf(machine.getRomSize()) + "" bytes.""); } else { Memory rom = Memory.makeROM(machine.getRomBase(), machine.getRomBase() + machine.getRomSize() - 1, romFile); machine.setRom(rom); machine.getCpu().reset(); logger.log(Level.INFO, ""ROM File `"" + romFile.getName() + ""' loaded at "" + String.format(""0x%04X"", machine.getRomBase())); JOptionPane.showMessageDialog(mainWindow, ""Loaded Successfully At "" + String.format(""$%04X"", machine.getRomBase()), ""OK"", JOptionPane.PLAIN_MESSAGE); } } } } catch (IOException ex) { logger.log(Level.SEVERE, ""Unable to read ROM file: "" + ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryRangeException ex) { logger.log(Level.SEVERE, ""Memory range error while loading ROM file: "" + ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory access error while loading ROM file: "" + ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } }",https://www.github.com/sethm/symon/commit/0c40cd325cb2a092e30509f05e823016526589ff
e2a1144c7cb8143a16ca8bb1251a557400ae000b,Device.java,getSize,public int getSize() { return size; },https://www.github.com/sethm/symon/commit/e2a1144c7cb8143a16ca8bb1251a557400ae000b
792366fddbcad0709dd8e7764a5823d3500a7989,SdController.java,write,"public void write(int address, int data) throws MemoryAccessException { switch(address) { case 0 : writeData(data); return; case 1 : writeCommand(data); return; case 2 : this.lba0 = data; return; case 3 : this.lba1 = data; return; case 4 : this.lba2 = data; } }",https://www.github.com/sethm/symon/commit/792366fddbcad0709dd8e7764a5823d3500a7989
792366fddbcad0709dd8e7764a5823d3500a7989,SdController.java,writeData,"private void writeData(int data) { if(status != Status.WRITE) { return; } writeBuffer[writePosition++] = (byte) data; if(writePosition >= SECTOR_SIZE) { if(sdImageFile != null) { try { FileOutputStream fos = new FileOutputStream(sdImageFile); fos.getChannel().position(this.position); fos.write(writeBuffer, 0, writeBuffer.length); fos.close(); } catch (IOException ex) { logger.log(Level.WARNING, ""could not write data back to SD image file!"", ex); } } this.status = Status.IDLE; } }",https://www.github.com/sethm/symon/commit/792366fddbcad0709dd8e7764a5823d3500a7989
792366fddbcad0709dd8e7764a5823d3500a7989,SdController.java,writeCommand,private void writeCommand(int data) { this.command = data; switch(this.command) { case 0 : prepareRead(); return; case 1 : prepareWrite(); return; default: this.status = Status.IDLE; } },https://www.github.com/sethm/symon/commit/792366fddbcad0709dd8e7764a5823d3500a7989
693d1959ac5908d98db2a5287108547575fb5c19,TraceLog.java,refresh,public void refresh() { StringBuilder logString = new StringBuilder(); synchronized(traceLog) { for (Cpu.CpuState state : traceLog) { logString.append(state.toTraceEvent()); } } synchronized(traceLogTextArea) { traceLogTextArea.setText(logString.toString()); } },https://www.github.com/sethm/symon/commit/693d1959ac5908d98db2a5287108547575fb5c19
693d1959ac5908d98db2a5287108547575fb5c19,TraceLog.java,reset,"public void reset() { synchronized(traceLog) { traceLog.reset(); } synchronized(traceLogTextArea) { traceLogTextArea.setText(""""); traceLogTextArea.setEnabled(true); } }",https://www.github.com/sethm/symon/commit/693d1959ac5908d98db2a5287108547575fb5c19
693d1959ac5908d98db2a5287108547575fb5c19,TraceLog.java,append,public void append(Cpu.CpuState state) { synchronized(traceLog) { traceLog.push(new Cpu.CpuState(state)); } },https://www.github.com/sethm/symon/commit/693d1959ac5908d98db2a5287108547575fb5c19
45f596e0d4509bdeca888c2b4005541f7027811a,Pia.java,write,"public void write(int address, int data) throws MemoryAccessException { ; }",https://www.github.com/sethm/symon/commit/45f596e0d4509bdeca888c2b4005541f7027811a
45f596e0d4509bdeca888c2b4005541f7027811a,Machine.java,getPia,public Pia getPia();,https://www.github.com/sethm/symon/commit/45f596e0d4509bdeca888c2b4005541f7027811a
45f596e0d4509bdeca888c2b4005541f7027811a,MulticompMachine.java,getPia,public Pia getPia() { return null; },https://www.github.com/sethm/symon/commit/45f596e0d4509bdeca888c2b4005541f7027811a
45f596e0d4509bdeca888c2b4005541f7027811a,SymonMachine.java,getPia,public Pia getPia() { return pia; },https://www.github.com/sethm/symon/commit/45f596e0d4509bdeca888c2b4005541f7027811a
742e3a1027814d7c975e701a71649dc5eb4f5805,Pia.java,toString,public String toString() { return name; },https://www.github.com/sethm/symon/commit/742e3a1027814d7c975e701a71649dc5eb4f5805
742e3a1027814d7c975e701a71649dc5eb4f5805,Via6522.java,write,"public void write(int address, int data) throws MemoryAccessException { Register[] registers = Register.values(); if (address >= registers.length) { throw new MemoryAccessException(""Unknown register: "" + address); } Register r = registers[address]; switch (r) { case ORA: case ORB: case DDRA: case DDRB: case T1C_L: case T1C_H: case T1L_L: case T1L_H: case T2C_L: case T2C_H: case SR: case ACR: case PCR: case IFR: case IER: case ORA_H: default: } }",https://www.github.com/sethm/symon/commit/742e3a1027814d7c975e701a71649dc5eb4f5805
742e3a1027814d7c975e701a71649dc5eb4f5805,Via6522.java,read,"public int read(int address) throws MemoryAccessException { Register[] registers = Register.values(); if (address >= registers.length) { throw new MemoryAccessException(""Unknown register: "" + address); } Register r = registers[address]; switch (r) { case ORA: case ORB: case DDRA: case DDRB: case T1C_L: case T1C_H: case T1L_L: case T1L_H: case T2C_L: case T2C_H: case SR: case ACR: case PCR: case IFR: case IER: case ORA_H: default: } return 0; }",https://www.github.com/sethm/symon/commit/742e3a1027814d7c975e701a71649dc5eb4f5805
a9a1c1aa528e5c618682b9de265a45aaa141c5d2,SdController.java,writeData,"private void writeData(int data) { if(status != Status.WRITE) { return; } writeBuffer[writePosition++] = (byte) data; if(writePosition >= SECTOR_SIZE) { if(sdImageFile != null) { try { RandomAccessFile raf = new RandomAccessFile(sdImageFile, ""rw""); raf.skipBytes(this.position); raf.write(writeBuffer, 0, writeBuffer.length); raf.close(); } catch (IOException ex) { logger.log(Level.WARNING, ""could not write data back to SD image file!"", ex); } } this.status = Status.IDLE; } }",https://www.github.com/sethm/symon/commit/a9a1c1aa528e5c618682b9de265a45aaa141c5d2
a9a1c1aa528e5c618682b9de265a45aaa141c5d2,SdController.java,readStatus,private int readStatus() { switch(this.status) { case IDLE: return 128; case READ: case WRITE: return 224; default: return 0; } },https://www.github.com/sethm/symon/commit/a9a1c1aa528e5c618682b9de265a45aaa141c5d2
cc12e8f70a7a260719ebc300990d90089f47b486,SdController.java,readStatus,private int readStatus() { switch(this.status) { case IDLE: return 128; case READ: return 224; case WRITE: return 160; default: return 0; } },https://www.github.com/sethm/symon/commit/cc12e8f70a7a260719ebc300990d90089f47b486
e157217f50d63f66da2ef7e7e399ef0af28c0996,Simulator.java,step,"private void step() throws MemoryAccessException { machine.getCpu().step(); traceLog.append(machine.getCpu().getCpuState()); if (machine.getAcia() != null && machine.getAcia().hasTxChar()) { console.print(Character.toString((char) machine.getAcia().txRead())); console.repaint(); } try { if (machine.getAcia() != null && console.hasInput()) { machine.getAcia().rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.severe(""Console type-ahead buffer underrun!""); } if (videoWindow != null && stepsSinceLastCrtcRefresh++ > stepsBetweenCrtcRefreshes) { stepsSinceLastCrtcRefresh = 0; if (videoWindow.isVisible()) { videoWindow.repaint(); } } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(); memoryWindow.updateState(); } }); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/e157217f50d63f66da2ef7e7e399ef0af28c0996
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,Crtc.java,getCharAtAddress,public int getCharAtAddress(int address) throws MemoryAccessException { return memory.read(address); },https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,Crtc.java,getRowColumnAddressing,public boolean getRowColumnAddressing() { return rowColumnAddressing; },https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,Crtc.java,getDisplayEnableSkew,public boolean getDisplayEnableSkew() { return displayEnableSkew; },https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,Crtc.java,getCursorSkew,public boolean getCursorSkew() { return cursorSkew; },https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,Crtc.java,writeRegisterValue,"private void writeRegisterValue(int data) throws MemoryAccessException { int oldStartAddress = startAddress; int oldCursorPosition = cursorPosition; switch (currentRegister) { case HORIZONTAL_DISPLAYED: horizontalDisplayed = data; pageSize = horizontalDisplayed * verticalDisplayed; break; case VERTICAL_DISPLAYED: verticalDisplayed = data; pageSize = horizontalDisplayed * verticalDisplayed; break; case MODE_CONTROL: rowColumnAddressing = (data & 0x04) != 0; displayEnableSkew = (data & 0x10) != 0; cursorSkew = (data & 0x20) != 0; break; case SCAN_LINE: scanLinesPerRow = data; break; case CURSOR_START: cursorStartLine = data & 0x1f; int cursorMode = (data & 0x60) >> 5; switch (cursorMode) { case 0: cursorEnabled = true; cursorBlinkRate = 0; break; case 1: cursorEnabled = false; cursorBlinkRate = 0; break; case 2: cursorEnabled = true; cursorBlinkRate = 500; break; case 3: cursorEnabled = true; cursorBlinkRate = 1000; break; } break; case CURSOR_END: cursorStopLine = data & 0x1f; break; case DISPLAY_START_HIGH: startAddress = ((data & 0xff) << 8) | (startAddress & 0x00ff); break; case DISPLAY_START_LOW: startAddress = ((data & 0xff) | (startAddress & 0xff00)); break; case CURSOR_POSITION_HIGH: cursorPosition = ((data & 0xff) << 8) | (cursorPosition & 0x00ff); break; case CURSOR_POSITION_LOW: cursorPosition = (data & 0xff) | (cursorPosition & 0xff00); break; default: break; } if (startAddress + pageSize > memory.endAddress()) { startAddress = oldStartAddress; throw new MemoryAccessException(""Cannot draw screen starting at selected address.""); } if (cursorPosition > memory.endAddress()) { cursorPosition = oldCursorPosition; throw new MemoryAccessException(""Cannot position cursor past end of memory.""); } notifyListeners(); }",https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,VideoWindow.java,paintComponent,"public void paintComponent(Graphics g) { try { for (int i = 0; i < crtc.getPageSize(); i++) { int address = crtc.getStartAddress() + i; int originX = (i % horizontalDisplayed) * CHAR_WIDTH; int originY = (i / horizontalDisplayed) * scanLinesPerRow; image.getRaster().setPixels(originX, originY, CHAR_WIDTH, scanLinesPerRow, getGlyph(address)); } Graphics2D g2d = (Graphics2D) g; if (shouldScale) { g2d.scale(scaleX, scaleY); } g2d.drawImage(image, 0, 0, null); } catch (MemoryAccessException ex) { logger.log(Level.SEVERE, ""Memory Access Exception, can't paint video window! "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,VideoWindow.java,getGlyph,"private int[] getGlyph(int address) throws MemoryAccessException { int chr = crtc.getCharAtAddress(address); int romOffset = (chr & 0xff) * (CHAR_HEIGHT * CHAR_WIDTH); int[] glyph = new int[CHAR_WIDTH * scanLinesPerRow]; arraycopy(charRom, romOffset, glyph, 0, CHAR_WIDTH * Math.min(CHAR_HEIGHT, scanLinesPerRow)); if (!hideCursor && crtc.isCursorEnabled() && crtc.getCursorPosition() == address) { int cursorStart = Math.min(glyph.length, crtc.getCursorStartLine() * CHAR_WIDTH); int cursorStop = Math.min(glyph.length, (crtc.getCursorStopLine() + 1) * CHAR_WIDTH); for (int i = cursorStart; i < cursorStop; i++) { glyph[i] ^= 0xff; } } return glyph; }",https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,CrtcTest.java,createDevices,"public void createDevices() throws Exception { memory = new Memory(0, 0x7fff); crtc = new Crtc(0x9000, memory); crtc.registerListener(changeListener); }",https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,CrtcTest.java,shouldSetRowColumnAddressing,"public void shouldSetRowColumnAddressing() throws Exception { assertEquals(false, crtc.getRowColumnAddressing()); crtc.write(0, 8); crtc.write(1, 0x04); assertEquals(true, crtc.getRowColumnAddressing()); }",https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,CrtcTest.java,shouldSetDisplayEnableSkew,"public void shouldSetDisplayEnableSkew() throws Exception { assertEquals(false, crtc.getDisplayEnableSkew()); crtc.write(0, 8); crtc.write(1, 0x10); assertEquals(true, crtc.getDisplayEnableSkew()); }",https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,CrtcTest.java,shouldSetCursorSkew,"public void shouldSetCursorSkew() throws Exception { assertEquals(false, crtc.getCursorSkew()); crtc.write(0, 8); crtc.write(1, 0x20); assertEquals(true, crtc.getCursorSkew()); }",https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
eeb246ebc2bc86fcd6e031c1a6718f2b0094f107,CrtcTest.java,shouldDoStraightBinaryAddressing,"public void shouldDoStraightBinaryAddressing() throws Exception { crtc.write(0, 8); crtc.write(1, 0); int videoMemoryBase = 0x7000; int j = 0; for (int i = 0; i < 2048; i++) { memory.write(videoMemoryBase + i, j); if (j == 255) { j = 0; } else { j++; } } j = 0; for (int i = 0; i < 2048; i++) { assertEquals(j, crtc.getCharAtAddress(videoMemoryBase + i)); if (j == 255) { j = 0; } else { j++; } } }",https://www.github.com/sethm/symon/commit/eeb246ebc2bc86fcd6e031c1a6718f2b0094f107
72ba068beb92ebc723e3fdccb9f2304c535ad340,Bus.java,read,"public int read(int address) throws MemoryAccessException { Device d = deviceAddressArray[address - this.startAddress]; if(d != null) { MemoryRange range = d.getMemoryRange(); int devAddr = address - range.startAddress(); return d.read(devAddr) & 0xff; } throw new MemoryAccessException(""Bus read failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/72ba068beb92ebc723e3fdccb9f2304c535ad340
8335cf5421f7171682342e065cf5229403a6967b,Cpu.java,step,"public void step() throws MemoryAccessException { opBeginTime = System.nanoTime(); state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(state.pc); } state.ir = bus.read(state.pc); irAddressMode = (state.ir >> 2) & 0x07; irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc); incrementPC(); } state.stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 4: tmp = address(bus.read(state.args[0]), bus.read((state.args[0] + 1) & 0xff)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: handleBrk(state.pc + 1); break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = address(state.args[0], state.args[1]); break; case 0x6c: lo = address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = adc(state.a, bus.read(effectiveAddress)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = sbc(state.a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); }",https://www.github.com/sethm/symon/commit/8335cf5421f7171682342e065cf5229403a6967b
8335cf5421f7171682342e065cf5229403a6967b,Cpu.java,handleBrk,"private void handleBrk(int returnPc) throws MemoryAccessException { handleInterrupt(returnPc, IRQ_VECTOR_L, IRQ_VECTOR_H, true); clearIrq(); }",https://www.github.com/sethm/symon/commit/8335cf5421f7171682342e065cf5229403a6967b
8335cf5421f7171682342e065cf5229403a6967b,Cpu.java,handleIrq,"private void handleIrq(int returnPc) throws MemoryAccessException { handleInterrupt(returnPc, IRQ_VECTOR_L, IRQ_VECTOR_H, false); clearIrq(); }",https://www.github.com/sethm/symon/commit/8335cf5421f7171682342e065cf5229403a6967b
8335cf5421f7171682342e065cf5229403a6967b,Cpu.java,handleNmi,"private void handleNmi() throws MemoryAccessException { handleInterrupt(state.pc, NMI_VECTOR_L, NMI_VECTOR_H, false); clearNmi(); }",https://www.github.com/sethm/symon/commit/8335cf5421f7171682342e065cf5229403a6967b
8335cf5421f7171682342e065cf5229403a6967b,Cpu.java,handleInterrupt,"private void handleInterrupt(int returnPc, int vectorLow, int vectorHigh, boolean isBreak) throws MemoryAccessException { if (isBreak) { setBreakFlag(); } else { clearBreakFlag(); } stackPush((returnPc >> 8) & 0xff); stackPush(returnPc & 0xff); stackPush(state.getStatusFlag()); setIrqDisableFlag(); state.pc = address(bus.read(vectorLow), bus.read(vectorHigh)); }",https://www.github.com/sethm/symon/commit/8335cf5421f7171682342e065cf5229403a6967b
8335cf5421f7171682342e065cf5229403a6967b,CpuImpliedModeTest.java,test_BRK_IgnoresIrqDisableFlag,"public void test_BRK_IgnoresIrqDisableFlag() throws MemoryAccessException { cpu.setIrqDisableFlag(); cpu.setCarryFlag(); cpu.setOverflowFlag(); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); assertEquals(0x00, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(0xffff, 0x12); bus.write(0xfffe, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff)); assertEquals(0x05, bus.read(0x1fe)); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_IRQ_DISABLE, bus.read(0x1fd)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/8335cf5421f7171682342e065cf5229403a6967b
8335cf5421f7171682342e065cf5229403a6967b,CpuTest.java,testIrqDoesNotSetBRK,"public void testIrqDoesNotSetBRK() throws Exception { cpu.clearIrqDisableFlag(); bus.write(0xffff, 0x12); bus.write(0xfffe, 0x34); cpu.setProgramCounter(0x1234); bus.loadProgram(0xa9, 0x33, 0x69, 0x01); cpu.setProgramCounter(0x0200); bus.loadProgram(0x18, 0xa9, 0x01, 0x69, 0x01); cpu.step(); assertEquals(0x0201, cpu.getProgramCounter()); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x0203, cpu.getProgramCounter()); assertEquals(0x01, cpu.getAccumulator()); cpu.assertIrq(); cpu.step(); assertTrue(cpu.getIrqDisableFlag()); assertFalse(cpu.getBreakFlag()); }",https://www.github.com/sethm/symon/commit/8335cf5421f7171682342e065cf5229403a6967b
8335cf5421f7171682342e065cf5229403a6967b,CpuTest.java,testNmiDoesNotSetBRK,"public void testNmiDoesNotSetBRK() throws Exception { bus.write(0xfffb, 0x10); bus.write(0xfffa, 0x00); cpu.setProgramCounter(0x1000); bus.loadProgram(0xa9, 0x33, 0x69, 0x01); cpu.setProgramCounter(0x0200); bus.loadProgram(0x18, 0xa9, 0x01, 0x69, 0x01); cpu.step(); assertEquals(0x0201, cpu.getProgramCounter()); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x0203, cpu.getProgramCounter()); assertEquals(0x01, cpu.getAccumulator()); cpu.assertNmi(); cpu.step(); assertFalse(cpu.getBreakFlag()); }",https://www.github.com/sethm/symon/commit/8335cf5421f7171682342e065cf5229403a6967b
a4a110dcef8d74797f0ea4818256640e6d998e98,Cpu.java,reset,"public void reset() throws MemoryAccessException { state.sp = 0xff; state.pc = address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); state.ir = 0; state.carryFlag = false; state.zeroFlag = false; state.irqDisableFlag = false; state.decimalModeFlag = false; state.breakFlag = false; state.overflowFlag = false; state.negativeFlag = false; state.irqAsserted = false; state.opTrap = false; state.stepCounter = 0L; state.a = 0; state.x = 0; state.y = 0; peekAhead(); }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Cpu.java,step,"public void step() throws MemoryAccessException { opBeginTime = System.nanoTime(); state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(state.pc); } state.ir = bus.read(state.pc); irAddressMode = (state.ir >> 2) & 0x07; irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc); incrementPC(); } state.stepCounter++; effectiveAddress = 0; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 4: tmp = address(bus.read(state.args[0]), bus.read((state.args[0] + 1) & 0xff)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: if (!getIrqDisableFlag()) { handleIrq(state.pc + 1); } break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); lo = stackPop(); hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = address(state.args[0], state.args[1]); break; case 0x6c: lo = address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = adc(state.a, bus.read(effectiveAddress)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = sbc(state.a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); peekAhead(); }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Cpu.java,peekAhead,private void peekAhead() throws MemoryAccessException { state.nextIr = bus.read(state.pc); int nextInstSize = Cpu.instructionSizes[state.nextIr]; for (int i = 1; i < nextInstSize; i++) { int nextRead = (state.pc + i) % bus.endAddress(); state.nextArgs[i-1] = bus.read(nextRead); } },https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Cpu.java,setProgramCounter,"public void setProgramCounter(int addr) { state.pc = addr; try { peekAhead(); } catch (MemoryAccessException ex) { logger.error(""Could not peek ahead at next instruction state.""); } }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Cpu.java,toTraceEvent,"public String toTraceEvent() { String opcode = disassembleLastOp(); StringBuilder sb = new StringBuilder(getInstructionByteStatus()); sb.append("" ""); sb.append(String.format(""%-14s"", opcode)); sb.append(""A:"" + HexUtil.byteToHex(a) + "" ""); sb.append(""X:"" + HexUtil.byteToHex(x) + "" ""); sb.append(""Y:"" + HexUtil.byteToHex(y) + "" ""); sb.append(""F:"" + HexUtil.byteToHex(getStatusFlag()) + "" ""); sb.append(""S:1"" + HexUtil.byteToHex(sp) + "" ""); sb.append(getProcessorStatusString() + ""\n""); return sb.toString(); }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Cpu.java,disassembleOp,"private String disassembleOp(int ir, int[] args) { String mnemonic = opcodeNames[ir]; if (mnemonic == null) { return ""???""; } StringBuilder sb = new StringBuilder(mnemonic); switch (instructionModes[ir]) { case ABS: sb.append("" $"" + HexUtil.wordToHex(address(args[0], args[1]))); break; case ABX: sb.append("" $"" + HexUtil.wordToHex(address(args[0], args[1])) + "",X""); break; case ABY: sb.append("" $"" + HexUtil.wordToHex(address(args[0], args[1])) + "",Y""); break; case IMM: sb.append("" #$"" + HexUtil.byteToHex(args[0])); break; case IND: sb.append("" ($"" + HexUtil.wordToHex(address(args[0], args[1])) + "")""); break; case XIN: sb.append("" ($"" + HexUtil.byteToHex(args[0]) + "",X)""); break; case INY: sb.append("" ($"" + HexUtil.byteToHex(args[0]) + ""),Y""); break; case REL: case ZPG: sb.append("" $"" + HexUtil.byteToHex(args[0])); break; case ZPX: sb.append("" $"" + HexUtil.byteToHex(args[0]) + "",X""); break; case ZPY: sb.append("" $"" + HexUtil.byteToHex(args[0]) + "",Y""); break; } return sb.toString(); }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Cpu.java,disassembleLastOp,"public String disassembleLastOp() { return disassembleOp(ir, args); }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Cpu.java,disassembleNextOp,"public String disassembleNextOp() { return disassembleOp(nextIr, nextArgs); }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Simulator.java,handleReset,"private void handleReset(boolean isColdReset) { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.info(""Reset requested. Resetting CPU.""); machine.getCpu().reset(); console.reset(); traceLog.reset(); if (isColdReset) { Memory mem = machine.getRam(); if (mem != null) { mem.fill(0); } } updateVisibleState(); } catch (MemoryAccessException ex) { logger.error(""Exception during simulator reset"", ex); } }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Simulator.java,handleStep,"private void handleStep(int numSteps) { try { for (int i = 0; i < numSteps; i++) { step(); } updateVisibleState(); } catch (SymonException ex) { logger.error(""Exception during simulator step"", ex); ex.printStackTrace(); } }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Simulator.java,step,"private void step() throws MemoryAccessException { machine.getCpu().step(); traceLog.append(machine.getCpu().getCpuState()); if (machine.getAcia() != null && machine.getAcia().hasTxChar()) { console.print(Character.toString((char) machine.getAcia().txRead())); console.repaint(); } try { if (machine.getAcia() != null && console.hasInput()) { machine.getAcia().rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.error(""Console type-ahead buffer underrun!""); } if (videoWindow != null && stepsSinceLastCrtcRefresh++ > stepsBetweenCrtcRefreshes) { stepsSinceLastCrtcRefresh = 0; if (videoWindow.isVisible()) { videoWindow.repaint(); } } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { updateVisibleState(); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Simulator.java,loadProgram,"private void loadProgram(byte[] program, int startAddress) throws MemoryAccessException { int addr = startAddress, i; for (i = 0; i < program.length; i++) { machine.getBus().write(addr++, program[i] & 0xff); } logger.info(""Loaded {} bytes at address 0x{}"", i, Integer.toString(startAddress, 16)); machine.getCpu().reset(); machine.getCpu().setProgramCounter(preferences.getProgramStartAddress()); updateVisibleState(); }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Simulator.java,run,"public void run() { logger.info(""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { public void run() { stepButton.setEnabled(false); stepCountBox.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.error(""Exception in main simulator run thread. Exiting run."", ex); } SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > machine.getMemorySize()) { throw new IOException(""File will not fit in "" + ""available memory ($"" + Integer.toString(machine.getMemorySize(), 16) + "" bytes)""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } SwingUtilities.invokeLater(new Runnable() { public void run() { console.reset(); } }); loadProgram(program, preferences.getProgramStartAddress()); JOptionPane.showMessageDialog(mainWindow, ""Loaded Successfully At "" + String.format(""$%04X"", preferences.getProgramStartAddress()), ""OK"", JOptionPane.PLAIN_MESSAGE); } } } } catch (IOException ex) { logger.error(""Unable to read program file."", ex); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryAccessException ex) { logger.error(""Memory access error loading program"", ex); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File romFile = fileChooser.getSelectedFile(); if (romFile.canRead()) { long fileSize = romFile.length(); if (fileSize != machine.getRomSize()) { throw new IOException(""ROM file must be exactly "" + String.valueOf(machine.getRomSize()) + "" bytes.""); } Memory rom = Memory.makeROM(machine.getRomBase(), machine.getRomBase() + machine.getRomSize() - 1, romFile); machine.setRom(rom); machine.getCpu().reset(); updateVisibleState(); logger.info(""ROM File `{}' loaded at {}"", romFile.getName(), String.format(""0x%04X"", machine.getRomBase())); JOptionPane.showMessageDialog(mainWindow, ""Loaded Successfully At "" + String.format(""$%04X"", machine.getRomBase()), ""OK"", JOptionPane.PLAIN_MESSAGE); } } } catch (IOException ex) { logger.error(""Unable to read ROM file: {}"", ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryRangeException ex) { logger.error(""Memory range error while loading ROM file: {}"", ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryAccessException ex) { logger.error(""Memory access error while loading ROM file: {}"", ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Simulator.java,updateVisibleState,private void updateVisibleState() { SwingUtilities.invokeLater(new Runnable() { public void run() { statusPane.updateState(); memoryWindow.updateState(); if (traceLog.shouldUpdate()) { traceLog.refresh(); } } }); },https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,Simulator.java,run,public void run() { statusPane.updateState(); memoryWindow.updateState(); if (traceLog.shouldUpdate()) { traceLog.refresh(); } },https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,StatusPanel.java,createUi,"private void createUi() { Border emptyBorder = BorderFactory.createEmptyBorder(EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER); Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED); setBorder(BorderFactory.createCompoundBorder(emptyBorder, etchedBorder)); GridBagLayout layout = new GridBagLayout(); GridBagConstraints constraints = new GridBagConstraints(); setLayout(layout); JPanel statusFlagsPanel = new JPanel(); statusFlagsPanel.setAlignmentX(LEFT_ALIGNMENT); carryOn = new ImageIcon(this.getClass().getResource(""/C_on.png"")); carryOff = new ImageIcon(this.getClass().getResource(""/C_off.png"")); zeroOn = new ImageIcon(this.getClass().getResource(""/Z_on.png"")); zeroOff = new ImageIcon(this.getClass().getResource(""/Z_off.png"")); irqOn = new ImageIcon(this.getClass().getResource(""/I_on.png"")); irqOff = new ImageIcon(this.getClass().getResource(""/I_off.png"")); decimalOn = new ImageIcon(this.getClass().getResource(""/D_on.png"")); decimalOff = new ImageIcon(this.getClass().getResource(""/D_off.png"")); breakOn = new ImageIcon(this.getClass().getResource(""/B_on.png"")); breakOff = new ImageIcon(this.getClass().getResource(""/B_off.png"")); overflowOn = new ImageIcon(this.getClass().getResource(""/O_on.png"")); overflowOff = new ImageIcon(this.getClass().getResource(""/O_off.png"")); negativeOn = new ImageIcon(this.getClass().getResource(""/N_on.png"")); negativeOff = new ImageIcon(this.getClass().getResource(""/N_off.png"")); carryFlagLabel = new JLabel(carryOff, JLabel.CENTER); zeroFlagLabel = new JLabel(zeroOff, JLabel.CENTER); irqDisableFlagLabel = new JLabel(irqOff, JLabel.CENTER); decimalModeFlagLabel = new JLabel(decimalOff, JLabel.CENTER); breakFlagLabel = new JLabel(breakOff, JLabel.CENTER); overflowFlagLabel = new JLabel(overflowOff, JLabel.CENTER); negativeFlagLabel = new JLabel(negativeOff, JLabel.CENTER); carryFlagLabel.setToolTipText(""Carry: The last operation caused an overflow "" + ""from bit 7 of the result or an underflow from bit 0""); zeroFlagLabel.setToolTipText(""Zero: The result of the last operation was 0""); irqDisableFlagLabel.setToolTipText(""Interrupt Disable: Processor will not respond to IRQ""); decimalModeFlagLabel.setToolTipText(""Decimal Mode""); breakFlagLabel.setToolTipText(""Break: BRK instruction occurred""); overflowFlagLabel.setToolTipText(""Overflow: The result of the last operation was "" + ""an invalid 2's complement result""); negativeFlagLabel.setToolTipText(""Negative: The result of the last operation set bit 7""); statusFlagsPanel.add(negativeFlagLabel); statusFlagsPanel.add(overflowFlagLabel); statusFlagsPanel.add(breakFlagLabel); statusFlagsPanel.add(decimalModeFlagLabel); statusFlagsPanel.add(irqDisableFlagLabel); statusFlagsPanel.add(zeroFlagLabel); statusFlagsPanel.add(carryFlagLabel); statusFlagsLabel = makeLabel(""Flags""); opcodeLabel = makeLabel(""Next IR""); pcLabel = makeLabel(""PC""); spLabel = makeLabel(""SP""); aLabel = makeLabel(""A""); xLabel = makeLabel(""X""); yLabel = makeLabel(""Y""); statusFlagsLabel.setToolTipText(""6502 Processor Status Flags""); opcodeLabel.setToolTipText(""Instruction Register""); pcLabel.setToolTipText(""Program Counter""); spLabel.setToolTipText(""Stack Pointer""); opcodeField = makeTextField(LARGE_TEXT_FIELD_SIZE, false); pcField = makeTextField(LARGE_TEXT_FIELD_SIZE, true); spField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); aField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); xField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); yField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); pcField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(pcField) & 0xffff; machine.getCpu().setProgramCounter(newVal); } catch (Exception ex) { } updateState(); } }); spField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(spField) & 0xff; machine.getCpu().setStackPointer(newVal); } catch (Exception ex) { } updateState(); } }); aField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(aField) & 0xff; machine.getCpu().setAccumulator(newVal); } catch (Exception ex) { } updateState(); } }); xField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(xField) & 0xff; machine.getCpu().setXRegister(newVal); } catch (Exception ex) { } updateState(); } }); yField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = getHexVal(yField) & 0xff; machine.getCpu().setYRegister(newVal); } catch (Exception ex) { } updateState(); } }); constraints.anchor = GridBagConstraints.LINE_START; constraints.gridwidth = 2; constraints.gridx = 0; constraints.gridy = 0; add(statusFlagsLabel, constraints); constraints.gridy = 1; add(statusFlagsPanel, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 2; add(opcodeLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 3; add(opcodeField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 4; add(pcLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 5; add(pcField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridwidth = 1; constraints.gridy = 6; add(spLabel, constraints); constraints.gridx = 1; add(aLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 7; add(spField, constraints); constraints.gridx = 1; add(aField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridx = 0; constraints.gridy = 8; add(xLabel, constraints); constraints.gridx = 1; add(yLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 9; add(xField, constraints); constraints.gridx = 1; add(yField, constraints); }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,StatusPanel.java,updateState,"public void updateState() { Cpu cpu = machine.getCpu(); Cpu.CpuState cpuState = cpu.getCpuState(); int status = cpuState.getStatusFlag(); carryFlagLabel.setIcon(iconForFlag(status, 0)); zeroFlagLabel.setIcon(iconForFlag(status, 1)); irqDisableFlagLabel.setIcon(iconForFlag(status, 2)); decimalModeFlagLabel.setIcon(iconForFlag(status, 3)); breakFlagLabel.setIcon(iconForFlag(status, 4)); overflowFlagLabel.setIcon(iconForFlag(status, 6)); negativeFlagLabel.setIcon(iconForFlag(status, 7)); opcodeField.setText(cpu.getCpuState().disassembleNextOp()); pcField.setText(cpu.getProgramCounterStatus()); spField.setText(cpu.getStackPointerStatus()); aField.setText(cpu.getAccumulatorStatus()); xField.setText(cpu.getXRegisterStatus()); yField.setText(cpu.getYRegisterStatus()); repaint(); }",https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
a4a110dcef8d74797f0ea4818256640e6d998e98,TraceLog.java,shouldUpdate,public boolean shouldUpdate() { return isVisible() && traceLogTextArea.isEnabled(); },https://www.github.com/sethm/symon/commit/a4a110dcef8d74797f0ea4818256640e6d998e98
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Bus.java,addDevice,"public void addDevice(Device device, int priority) throws MemoryRangeException { MemoryRange range = device.getMemoryRange(); if (range.startAddress() < this.startAddress || range.startAddress() > this.endAddress) { throw new MemoryRangeException(""start address of device "" + device.getName() + "" does not fall within the address range of the bus""); } if (range.endAddress() < this.startAddress || range.endAddress() > this.endAddress) { throw new MemoryRangeException(""end address of device "" + device.getName() + "" does not fall within the address range of the bus""); } SortedSet<Device> deviceSet = deviceMap.get(priority); if (deviceSet == null) { deviceSet = new TreeSet<>(); deviceMap.put(priority, deviceSet); } device.setBus(this); deviceSet.add(device); buildDeviceAddressArray(); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Bus.java,getDevices,public SortedSet<Device> getDevices() { SortedSet<Device> devices = new TreeSet<>(); List<Integer> priorities = new ArrayList<>(deviceMap.keySet()); Collections.sort(priorities); for(int priority : priorities) { SortedSet<Device> deviceSet = deviceMap.get(priority); devices.addAll(deviceSet.stream().collect(Collectors.toList())); } return devices; },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Cpu.java,step,"public void step() throws MemoryAccessException { opBeginTime = System.nanoTime(); state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(state.pc); } state.ir = bus.read(state.pc); int irAddressMode = (state.ir >> 2) & 0x07; int irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc); incrementPC(); } state.stepCounter++; int effectiveAddress = 0; int tmp; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = address(state.args[0], state.args[1]); break; case 4: tmp = address(bus.read(state.args[0]), bus.read((state.args[0] + 1) & 0xff)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: if (!getIrqDisableFlag()) { handleIrq(state.pc + 1); } break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); int lo = stackPop(); int hi = stackPop(); setProgramCounter(address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = address(state.args[0], state.args[1]); break; case 0x6c: lo = address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = address(bus.read(lo), bus.read(hi)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = adc(state.a, bus.read(effectiveAddress)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = sbc(state.a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); peekAhead(); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Cpu.java,toTraceEvent,"public String toTraceEvent() { String opcode = disassembleLastOp(); return getInstructionByteStatus() + "" "" + String.format(""%-14s"", opcode) + ""A:"" + HexUtil.byteToHex(a) + "" "" + ""X:"" + HexUtil.byteToHex(x) + "" "" + ""Y:"" + HexUtil.byteToHex(y) + "" "" + ""F:"" + HexUtil.byteToHex(getStatusFlag()) + "" "" + ""S:1"" + HexUtil.byteToHex(sp) + "" "" + getProcessorStatusString() + ""\n""; }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Cpu.java,disassembleOp,"private String disassembleOp(int ir, int[] args) { String mnemonic = opcodeNames[ir]; if (mnemonic == null) { return ""???""; } StringBuilder sb = new StringBuilder(mnemonic); switch (instructionModes[ir]) { case ABS: sb.append("" $"").append(HexUtil.wordToHex(address(args[0], args[1]))); break; case ABX: sb.append("" $"").append(HexUtil.wordToHex(address(args[0], args[1]))).append("",X""); break; case ABY: sb.append("" $"").append(HexUtil.wordToHex(address(args[0], args[1]))).append("",Y""); break; case IMM: sb.append("" #$"").append(HexUtil.byteToHex(args[0])); break; case IND: sb.append("" ($"").append(HexUtil.wordToHex(address(args[0], args[1]))).append("")""); break; case XIN: sb.append("" ($"").append(HexUtil.byteToHex(args[0])).append("",X)""); break; case INY: sb.append("" ($"").append(HexUtil.byteToHex(args[0])).append(""),Y""); break; case REL: case ZPG: sb.append("" $"").append(HexUtil.byteToHex(args[0])); break; case ZPX: sb.append("" $"").append(HexUtil.byteToHex(args[0])).append("",X""); break; case ZPY: sb.append("" $"").append(HexUtil.byteToHex(args[0])).append("",Y""); break; } return sb.toString(); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Cpu.java,getProcessorStatusString,"public String getProcessorStatusString() { return ""["" + (negativeFlag ? 'N' : '.') + (overflowFlag ? 'V' : '.') + ""-"" + (breakFlag ? 'B' : '.') + (decimalModeFlag ? 'D' : '.') + (irqDisableFlag ? 'I' : '.') + (zeroFlag ? 'Z' : '.') + (carryFlag ? 'C' : '.') + ""]""; }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Main.java,main,"public static void main(String args[]) throws Exception { Class machineClass = SymonMachine.class; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); switch (machine) { case ""symon"": machineClass = SymonMachine.class; break; case ""multicomp"": machineClass = MulticompMachine.class; break; case ""simple"": machineClass = SimpleMachine.class; break; } } } while (true) { if (machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp"", ""Simple""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if (s != null && s.equals(""Multicomp"")) { machineClass = MulticompMachine.class; } else if (s != null && s.equals(""Simple"")) { machineClass = SimpleMachine.class; } else { machineClass = SymonMachine.class; } } final Simulator simulator = new Simulator(machineClass); SwingUtilities.invokeLater(() -> { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } }); Simulator.MAIN_CMD cmd = simulator.waitForCommand(); if (cmd.equals(Simulator.MAIN_CMD.SELECTMACHINE)) { machineClass = null; } else { break; } } }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,MemoryRange.java,compareTo,"public int compareTo(MemoryRange other) { if (other == null) { throw new NullPointerException(""Cannot compare to null.""); } if (this == other) { return 0; } Integer thisStartAddr = this.startAddress(); Integer thatStartAddr = other.startAddress(); return thisStartAddr.compareTo(thatStartAddr); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,MemoryRange.java,toString,"public String toString() { return ""@"" + String.format(""0x%04x"", startAddress) + ""-"" + String.format(""0x%04x"", endAddress); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Preferences.java,getDialog,JDialog getDialog();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Preferences.java,getProgramStartAddress,int getProgramStartAddress();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Preferences.java,getHaltOnBreak,boolean getHaltOnBreak();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Preferences.java,updateUi,void updateUi();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""6502 Simulator - "" + machine.getName()); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT, false); this.statusPane = new StatusPanel(machine); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); JButton softResetButton = new JButton(""Soft Reset""); JButton hardResetButton = new JButton(""Hard Reset""); stepCountBox = new JComboBox<>(STEPS); stepCountBox.addActionListener(actionEvent -> { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(softResetButton); buttonContainer.add(hardResetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(actionEvent -> { if (runLoop != null && runLoop.isRunning()) { handleStop(); } else { handleStart(); } }); stepButton.addActionListener(actionEvent -> handleStep(stepsPerClick)); softResetButton.addActionListener(actionEvent -> { handleReset(false); }); hardResetButton.addActionListener(actionEvent -> { handleReset(true); }); mainWindow.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); handleReset(false); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Simulator.java,step,"private void step() throws MemoryAccessException { machine.getCpu().step(); traceLog.append(machine.getCpu().getCpuState()); if (machine.getAcia() != null && machine.getAcia().hasTxChar()) { console.print(Character.toString((char) machine.getAcia().txRead())); console.repaint(); } try { if (machine.getAcia() != null && console.hasInput()) { machine.getAcia().rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.error(""Console type-ahead buffer underrun!""); } if (videoWindow != null && stepsSinceLastCrtcRefresh++ > STEPS_BETWEEN_CRTC_REFRESHES) { stepsSinceLastCrtcRefresh = 0; if (videoWindow.isVisible()) { videoWindow.repaint(); } } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { updateVisibleState(); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Simulator.java,run,"public void run() { logger.info(""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(() -> { stepButton.setEnabled(false); stepCountBox.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.error(""Exception in main simulator run thread. Exiting run."", ex); } SwingUtilities.invokeLater(() -> { statusPane.updateState(); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); }); isRunning = false; }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > machine.getMemorySize()) { throw new IOException(""File will not fit in "" + ""available memory ($"" + Integer.toString(machine.getMemorySize(), 16) + "" bytes)""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } SwingUtilities.invokeLater(() -> console.reset()); loadProgram(program, preferences.getProgramStartAddress()); JOptionPane.showMessageDialog(mainWindow, ""Loaded Successfully At "" + String.format(""$%04X"", preferences.getProgramStartAddress()), ""OK"", JOptionPane.PLAIN_MESSAGE); } } } } catch (IOException ex) { logger.error(""Unable to read program file."", ex); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryAccessException ex) { logger.error(""Memory access error loading program"", ex); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { SwingUtilities.invokeLater(() -> { console.setFont(new Font(""Monospaced"", Font.PLAIN, size)); mainWindow.pack(); }); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Simulator.java,updateVisibleState,private void updateVisibleState() { SwingUtilities.invokeLater(() -> { statusPane.updateState(); memoryWindow.updateState(); if (traceLog.shouldUpdate()) { traceLog.refresh(); } }); },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Acia6850.java,setCommandRegister,private void setCommandRegister(int data) { if((data & 0x01) != 0 && (data & 0x02) != 0) { reset(); } receiveIrqEnabled = (data & 0x80) != 0; transmitIrqEnabled = (data & 0x20) != 0 && (data & 0x40) == 0; },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Device.java,notifyListeners,public void notifyListeners() { deviceChangeListeners.forEach(DeviceChangeListener::deviceStateChanged); },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,DeviceChangeListener.java,deviceStateChanged,void deviceStateChanged();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Memory.java,makeRAM,"public static Memory makeRAM(int startAddress, int endAddress) throws MemoryRangeException { return new Memory(startAddress, endAddress, false); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,SdController.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case 0: writeData(data); return; case 1: writeCommand(data); return; case 2: this.lba0 = data; return; case 3: this.lba1 = data; return; case 4: this.lba2 = data; } }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,SdController.java,read,public int read(int address) throws MemoryAccessException { switch (address) { case 0: return readData(); case 1: return readStatus(); default: return 0; } },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,SdController.java,prepareRead,"private void prepareRead() { this.status = Status.READ; this.readPosition = 0; computePosition(); if (sdImageFile != null) { try { FileInputStream fis = new FileInputStream(sdImageFile); fis.skip(this.position); int read = fis.read(readBuffer); if (read < SECTOR_SIZE) { logger.log(Level.WARNING, ""not enough data to fill read buffer from SD image file""); } fis.close(); } catch (IOException ex) { logger.log(Level.WARNING, ""could not fill read buffer from SD image file"", ex); } } }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,SdController.java,readData,private int readData() { if (status != Status.READ) { return 0; } int data = readBuffer[readPosition++]; if (readPosition >= SECTOR_SIZE) { this.status = Status.IDLE; } return data; },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,SdController.java,writeData,"private void writeData(int data) { if (status != Status.WRITE) { return; } writeBuffer[writePosition++] = (byte) data; if (writePosition >= SECTOR_SIZE) { if (sdImageFile != null) { try { RandomAccessFile raf = new RandomAccessFile(sdImageFile, ""rw""); raf.skipBytes(this.position); raf.write(writeBuffer, 0, writeBuffer.length); raf.close(); } catch (IOException ex) { logger.log(Level.WARNING, ""could not write data back to SD image file!"", ex); } } this.status = Status.IDLE; } }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,SdController.java,readStatus,private int readStatus() { switch (this.status) { case IDLE: return 128; case READ: return 224; case WRITE: return 160; default: return 0; } },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,SdController.java,writeCommand,private void writeCommand(int data) { switch (data) { case 0: prepareRead(); return; case 1: prepareWrite(); return; default: this.status = Status.IDLE; } },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getBus,Bus getBus();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getCpu,Cpu getCpu();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getRam,Memory getRam();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getAcia,Acia getAcia();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getPia,Pia getPia();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getCrtc,Crtc getCrtc();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getRom,Memory getRom();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,setRom,void setRom(Memory rom) throws MemoryRangeException;,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getRomBase,int getRomBase();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getRomSize,int getRomSize();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Machine.java,getMemorySize,int getMemorySize();,https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,Console.java,keyTyped,public void keyTyped(KeyEvent keyEvent) { char keyTyped = keyEvent.getKeyChar(); if (SWAP_CR_AND_LF) { if (keyTyped == 0x0a) { keyTyped = 0x0d; } else if (keyTyped == 0x0d) { keyTyped = 0x0a; } } if (sendCrForLf && keyTyped == 0x0d) { typeAheadBuffer.push((char) 0x0d); typeAheadBuffer.push((char) 0x0a); } else { typeAheadBuffer.push(keyTyped); } keyEvent.consume(); },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,MemoryWindow.java,setValueAt,"public void setValueAt(Object o, int row, int column) { if (column > 0) { try { String hexValue = (String)o; int fullAddress = fullAddress(row, column); int newValue = Integer.parseInt(hexValue, 16) & 0xff; bus.write(fullAddress, newValue); } catch (MemoryAccessException | NumberFormatException | ClassCastException ex) { } fireTableCellUpdated(row, column); } }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,PreferencesDialog.java,createUi,"private void createUi() { dialog.setTitle(""Preferences""); Container contents = dialog.getContentPane(); JPanel settingsContainer = new JPanel(); JPanel buttonsContainer = new JPanel(); GridBagLayout layout = new GridBagLayout(); settingsContainer.setLayout(layout); final JLabel haltOnBreakLabel = new JLabel(""Halt on BRK""); final JLabel programLoadAddressLabel = new JLabel(""Program Load Address""); haltOnBreakCheckBox = new JCheckBox(); programLoadAddressField = new JTextField(8); programLoadAddressLabel.setLabelFor(programLoadAddressField); GridBagConstraints constraints = new GridBagConstraints(); constraints.insets = new Insets(5, 5, 5, 5); constraints.fill = GridBagConstraints.HORIZONTAL; constraints.gridx = 0; constraints.gridy = 0; settingsContainer.add(haltOnBreakLabel, constraints); constraints.gridx = 1; settingsContainer.add(haltOnBreakCheckBox, constraints); constraints.gridy = 1; constraints.gridx = 0; settingsContainer.add(programLoadAddressLabel, constraints); constraints.gridx = 1; settingsContainer.add(programLoadAddressField, constraints); JButton applyButton = new JButton(""Apply""); JButton cancelButton = new JButton(""Cancel""); cancelButton.addActionListener(actionEvent -> { updateUi(); dialog.setVisible(false); }); applyButton.addActionListener(actionEvent -> { haltOnBreak = haltOnBreakCheckBox.isSelected(); programLoadAddress = hexToInt(programLoadAddressField.getText()); updateUi(); setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); }); buttonsContainer.add(applyButton); buttonsContainer.add(cancelButton); contents.add(settingsContainer, BorderLayout.PAGE_START); contents.add(buttonsContainer, BorderLayout.PAGE_END); dialog.pack(); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,StatusPanel.java,createUi,"private void createUi() { Border emptyBorder = BorderFactory.createEmptyBorder(EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER); Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED); setBorder(BorderFactory.createCompoundBorder(emptyBorder, etchedBorder)); GridBagLayout layout = new GridBagLayout(); GridBagConstraints constraints = new GridBagConstraints(); setLayout(layout); JPanel statusFlagsPanel = new JPanel(); statusFlagsPanel.setAlignmentX(LEFT_ALIGNMENT); carryOn = new ImageIcon(this.getClass().getResource(""/C_on.png"")); carryOff = new ImageIcon(this.getClass().getResource(""/C_off.png"")); zeroOn = new ImageIcon(this.getClass().getResource(""/Z_on.png"")); zeroOff = new ImageIcon(this.getClass().getResource(""/Z_off.png"")); irqOn = new ImageIcon(this.getClass().getResource(""/I_on.png"")); irqOff = new ImageIcon(this.getClass().getResource(""/I_off.png"")); decimalOn = new ImageIcon(this.getClass().getResource(""/D_on.png"")); decimalOff = new ImageIcon(this.getClass().getResource(""/D_off.png"")); breakOn = new ImageIcon(this.getClass().getResource(""/B_on.png"")); breakOff = new ImageIcon(this.getClass().getResource(""/B_off.png"")); overflowOn = new ImageIcon(this.getClass().getResource(""/O_on.png"")); overflowOff = new ImageIcon(this.getClass().getResource(""/O_off.png"")); negativeOn = new ImageIcon(this.getClass().getResource(""/N_on.png"")); negativeOff = new ImageIcon(this.getClass().getResource(""/N_off.png"")); carryFlagLabel = new JLabel(carryOff, JLabel.CENTER); zeroFlagLabel = new JLabel(zeroOff, JLabel.CENTER); irqDisableFlagLabel = new JLabel(irqOff, JLabel.CENTER); decimalModeFlagLabel = new JLabel(decimalOff, JLabel.CENTER); breakFlagLabel = new JLabel(breakOff, JLabel.CENTER); overflowFlagLabel = new JLabel(overflowOff, JLabel.CENTER); negativeFlagLabel = new JLabel(negativeOff, JLabel.CENTER); carryFlagLabel.setToolTipText(""Carry: The last operation caused an overflow "" + ""from bit 7 of the result or an underflow from bit 0""); zeroFlagLabel.setToolTipText(""Zero: The result of the last operation was 0""); irqDisableFlagLabel.setToolTipText(""Interrupt Disable: Processor will not respond to IRQ""); decimalModeFlagLabel.setToolTipText(""Decimal Mode""); breakFlagLabel.setToolTipText(""Break: BRK instruction occurred""); overflowFlagLabel.setToolTipText(""Overflow: The result of the last operation was "" + ""an invalid 2's complement result""); negativeFlagLabel.setToolTipText(""Negative: The result of the last operation set bit 7""); statusFlagsPanel.add(negativeFlagLabel); statusFlagsPanel.add(overflowFlagLabel); statusFlagsPanel.add(breakFlagLabel); statusFlagsPanel.add(decimalModeFlagLabel); statusFlagsPanel.add(irqDisableFlagLabel); statusFlagsPanel.add(zeroFlagLabel); statusFlagsPanel.add(carryFlagLabel); JLabel statusFlagsLabel = makeLabel(""Flags""); JLabel opcodeLabel = makeLabel(""Next IR""); JLabel pcLabel = makeLabel(""PC""); JLabel spLabel = makeLabel(""SP""); JLabel aLabel = makeLabel(""A""); JLabel xLabel = makeLabel(""X""); JLabel yLabel = makeLabel(""Y""); statusFlagsLabel.setToolTipText(""6502 Processor Status Flags""); opcodeLabel.setToolTipText(""Instruction Register""); pcLabel.setToolTipText(""Program Counter""); spLabel.setToolTipText(""Stack Pointer""); opcodeField = makeTextField(LARGE_TEXT_FIELD_SIZE, false); pcField = makeTextField(LARGE_TEXT_FIELD_SIZE, true); spField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); aField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); xField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); yField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); pcField.addActionListener(e -> { try { int newVal = getHexVal(pcField) & 0xffff; machine.getCpu().setProgramCounter(newVal); } catch (Exception ex) { } updateState(); }); spField.addActionListener(e -> { try { int newVal = getHexVal(spField) & 0xff; machine.getCpu().setStackPointer(newVal); } catch (Exception ex) { } updateState(); }); aField.addActionListener(e -> { try { int newVal = getHexVal(aField) & 0xff; machine.getCpu().setAccumulator(newVal); } catch (Exception ex) { } updateState(); }); xField.addActionListener(e -> { try { int newVal = getHexVal(xField) & 0xff; machine.getCpu().setXRegister(newVal); } catch (Exception ex) { } updateState(); }); yField.addActionListener(e -> { try { int newVal = getHexVal(yField) & 0xff; machine.getCpu().setYRegister(newVal); } catch (Exception ex) { } updateState(); }); constraints.anchor = GridBagConstraints.LINE_START; constraints.gridwidth = 2; constraints.gridx = 0; constraints.gridy = 0; add(statusFlagsLabel, constraints); constraints.gridy = 1; add(statusFlagsPanel, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 2; add(opcodeLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 3; add(opcodeField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 4; add(pcLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 5; add(pcField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridwidth = 1; constraints.gridy = 6; add(spLabel, constraints); constraints.gridx = 1; add(aLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 7; add(spField, constraints); constraints.gridx = 1; add(aField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridx = 0; constraints.gridy = 8; add(xLabel, constraints); constraints.gridx = 1; add(yLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 9; add(xField, constraints); constraints.gridx = 1; add(yField, constraints); }",https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,VideoWindow.java,run,public void run() { SwingUtilities.invokeLater(() -> { if (cursorBlinkRate > 0) { hideCursor = !hideCursor; repaint(); } }); },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
6e8fd40014240d873f0f841eb2ec8cbe947a6426,HexUtil.java,wordToHex,public static String wordToHex(int val) { return HEX_CONSTANTS[(val >> 8) & 0xff] + HEX_CONSTANTS[val & 0xff]; },https://www.github.com/sethm/symon/commit/6e8fd40014240d873f0f841eb2ec8cbe947a6426
84e5c5ad5660831cf07dcf4c43825b87e2089ecc,Cpu.java,delayLoop,"private void delayLoop(int opcode) { int clockSteps = Cpu.instructionClocks[0xff & opcode]; if (clockSteps == 0) { logger.warn(""Opcode {} has clock step of 0!"", opcode); return; } long interval = clockSteps * CLOCK_IN_NS; long end; do { end = System.nanoTime(); } while (opBeginTime + interval >= end); }",https://www.github.com/sethm/symon/commit/84e5c5ad5660831cf07dcf4c43825b87e2089ecc
6267d1d77769ce499ef7faadda0ddfe0f69d3599,Cpu.java,setClockPeriodInNs,"public void setClockPeriodInNs(long clockPeriodInNs) { logger.debug(""Setting simulated clock period to {} ns."", clockPeriodInNs); this.clockPeriodInNs = clockPeriodInNs; }",https://www.github.com/sethm/symon/commit/6267d1d77769ce499ef7faadda0ddfe0f69d3599
6267d1d77769ce499ef7faadda0ddfe0f69d3599,Cpu.java,getClockPeriodInNs,public long getClockPeriodInNs() { return clockPeriodInNs; },https://www.github.com/sethm/symon/commit/6267d1d77769ce499ef7faadda0ddfe0f69d3599
6267d1d77769ce499ef7faadda0ddfe0f69d3599,Cpu.java,delayLoop,"private void delayLoop(int opcode) { int clockSteps = Cpu.instructionClocks[0xff & opcode]; if (clockSteps == 0) { logger.warn(""Opcode {} has clock step of 0!"", opcode); return; } long interval = clockSteps * clockPeriodInNs; long end; do { end = System.nanoTime(); } while (opBeginTime + interval >= end); }",https://www.github.com/sethm/symon/commit/6267d1d77769ce499ef7faadda0ddfe0f69d3599
6267d1d77769ce499ef7faadda0ddfe0f69d3599,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (speed < 1 || speed > CLOCK_PERIODS.length - 1) { return; } machine.getCpu().setClockPeriodInNs(CLOCK_PERIODS[speed]); },https://www.github.com/sethm/symon/commit/6267d1d77769ce499ef7faadda0ddfe0f69d3599
6267d1d77769ce499ef7faadda0ddfe0f69d3599,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); fileMenu.add(loadProgramItem); if (machine.getRom() != null) { loadRomItem = new JMenuItem(new LoadRomAction()); fileMenu.add(loadRomItem); } JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); fileMenu.add(prefsItem); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); final JCheckBoxMenuItem showTraceLog = new JCheckBoxMenuItem(new ToggleTraceWindowAction()); traceLog.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); } }); viewMenu.add(showTraceLog); final JCheckBoxMenuItem showMemoryTable = new JCheckBoxMenuItem(new ToggleMemoryWindowAction()); memoryWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); } }); viewMenu.add(showMemoryTable); if(videoWindow != null) { final JCheckBoxMenuItem showVideoWindow = new JCheckBoxMenuItem(new ToggleVideoWindowAction()); videoWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showVideoWindow.setSelected(false); } }); viewMenu.add(showVideoWindow); } add(viewMenu); JMenu simulatorMenu = new JMenu(""Simulator""); JMenu speedSubMenu = new JMenu(""Clock Speed""); ButtonGroup speedGroup = new ButtonGroup(); makeSpeedMenuItem(1, speedSubMenu, speedGroup); makeSpeedMenuItem(2, speedSubMenu, speedGroup); makeSpeedMenuItem(4, speedSubMenu, speedGroup); makeSpeedMenuItem(8, speedSubMenu, speedGroup); simulatorMenu.add(speedSubMenu); JMenuItem selectMachineItem = new JMenuItem(new SelectMachineAction()); simulatorMenu.add(selectMachineItem); add(simulatorMenu); }",https://www.github.com/sethm/symon/commit/6267d1d77769ce499ef7faadda0ddfe0f69d3599
6267d1d77769ce499ef7faadda0ddfe0f69d3599,Simulator.java,makeFontSizeMenuItem,"private void makeFontSizeMenuItem(int size, JMenu subMenu, ButtonGroup group) { Action action = new SetFontAction(size); JCheckBoxMenuItem item = new JCheckBoxMenuItem(action); item.setSelected(size == DEFAULT_FONT_SIZE); subMenu.add(item); group.add(item); }",https://www.github.com/sethm/symon/commit/6267d1d77769ce499ef7faadda0ddfe0f69d3599
6267d1d77769ce499ef7faadda0ddfe0f69d3599,Simulator.java,makeSpeedMenuItem,"private void makeSpeedMenuItem(int speed, JMenu subMenu, ButtonGroup group) { if (speed < 1 || speed > CLOCK_PERIODS.length - 1) { return; } Action action = new SetSpeedAction(speed); JCheckBoxMenuItem item = new JCheckBoxMenuItem(action); item.setSelected(CLOCK_PERIODS[speed] == Cpu.DEFAULT_CLOCK_PERIOD_IN_NS); subMenu.add(item); group.add(item); }",https://www.github.com/sethm/symon/commit/6267d1d77769ce499ef7faadda0ddfe0f69d3599
df88c54f90397f303bef69928576814c842634de,Main.java,main,"public static void main(String args[]) throws Exception { Class machineClass = SymonMachine.class; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); switch (machine) { case ""symon"": machineClass = SymonMachine.class; break; case ""multicomp"": machineClass = MulticompMachine.class; break; case ""simple"": machineClass = SimpleMachine.class; break; } } } while (true) { if (machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp"", ""Simple""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if (s != null && s.equals(""Multicomp"")) { machineClass = MulticompMachine.class; } else if (s != null && s.equals(""Simple"")) { machineClass = SimpleMachine.class; } else { machineClass = SymonMachine.class; } } final Simulator simulator = new Simulator(machineClass); SwingUtilities.invokeLater(() -> { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } }); Simulator.MainCommand cmd = simulator.waitForCommand(); if (cmd.equals(Simulator.MainCommand.SELECTMACHINE)) { machineClass = null; } else { break; } } }",https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,Simulator.java,waitForCommand,public MainCommand waitForCommand() { synchronized (commandMonitorObject) { try { commandMonitorObject.wait(); } catch (InterruptedException ex) { ex.printStackTrace(); } } return command; },https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,Simulator.java,handleReset,"private void handleReset(boolean isColdReset) { if (runLoop != null && runLoop.isRunning()) { runLoop.requestStop(); runLoop.interrupt(); runLoop = null; } try { logger.debug(""Reset requested. Resetting CPU.""); machine.getCpu().reset(); console.reset(); traceLog.reset(); if (isColdReset) { Memory mem = machine.getRam(); if (mem != null) { mem.fill(0); } } updateVisibleState(); } catch (MemoryAccessException ex) { logger.error(""Exception during simulator reset"", ex); } }",https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,Simulator.java,run,"public void run() { logger.debug(""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(() -> { stepButton.setEnabled(false); stepCountBox.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.error(""Exception in main simulator run thread. Exiting run."", ex); } SwingUtilities.invokeLater(() -> { statusPane.updateState(); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); }); isRunning = false; }",https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,Simulator.java,shouldContinue,private boolean shouldContinue() { return !breakpoints.contains(machine.getCpu().getProgramCounter()) && isRunning && !(preferences.getHaltOnBreak() && machine.getCpu().getInstruction() == 0x00); },https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null) { runLoop.requestStop(); } memoryWindow.dispose(); traceLog.dispose(); if (videoWindow != null) { videoWindow.dispose(); } mainWindow.dispose(); command = MainCommand.SELECTMACHINE; synchronized (commandMonitorObject) { commandMonitorObject.notifyAll(); } },https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { synchronized (breakpointsWindow) { if (breakpointsWindow.isVisible()) { breakpointsWindow.setVisible(false); } else { breakpointsWindow.setVisible(true); } } },https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); fileMenu.add(loadProgramItem); if (machine.getRom() != null) { loadRomItem = new JMenuItem(new LoadRomAction()); fileMenu.add(loadRomItem); } JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); fileMenu.add(prefsItem); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); final JCheckBoxMenuItem showTraceLog = new JCheckBoxMenuItem(new ToggleTraceWindowAction()); traceLog.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); } }); viewMenu.add(showTraceLog); final JCheckBoxMenuItem showMemoryTable = new JCheckBoxMenuItem(new ToggleMemoryWindowAction()); memoryWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); } }); viewMenu.add(showMemoryTable); if (videoWindow != null) { final JCheckBoxMenuItem showVideoWindow = new JCheckBoxMenuItem(new ToggleVideoWindowAction()); videoWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showVideoWindow.setSelected(false); } }); viewMenu.add(showVideoWindow); } add(viewMenu); JMenu simulatorMenu = new JMenu(""Simulator""); JMenuItem selectMachineItem = new JMenuItem(new SelectMachineAction()); simulatorMenu.add(selectMachineItem); JMenu speedSubMenu = new JMenu(""Clock Speed""); ButtonGroup speedGroup = new ButtonGroup(); makeSpeedMenuItem(1, speedSubMenu, speedGroup); makeSpeedMenuItem(2, speedSubMenu, speedGroup); makeSpeedMenuItem(4, speedSubMenu, speedGroup); makeSpeedMenuItem(8, speedSubMenu, speedGroup); simulatorMenu.add(speedSubMenu); final JCheckBoxMenuItem showBreakpoints = new JCheckBoxMenuItem(new ToggleBreakpointWindowAction()); breakpointsWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showBreakpoints.setSelected(false); } }); simulatorMenu.add(showBreakpoints); add(simulatorMenu); }",https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,Simulator.java,windowClosing,public void windowClosing(WindowEvent e) { showBreakpoints.setSelected(false); },https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,BreakpointsWindow.java,getSize,public int getSize() { return breakpoints.size(); },https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,BreakpointsWindow.java,getElementAt,"public String getElementAt(int index) { ArrayList<Integer> values = new ArrayList<>(breakpoints); return ""$"" + HexUtil.wordToHex(values.get(index)); }",https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,BreakpointsWindow.java,addElement,"public void addElement(Integer breakpoint) { breakpoints.add(breakpoint); ArrayList<Integer> values = new ArrayList<>(breakpoints); int index = values.indexOf(breakpoint); fireIntervalAdded(this, index, index); }",https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,BreakpointsWindow.java,removeElement,"public void removeElement(int index) { ArrayList<Integer> values = new ArrayList<>(breakpoints); Integer breakpoint = values.get(index); breakpoints.remove(breakpoint); fireIntervalRemoved(this, index, index); }",https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,BreakpointsWindow.java,createUi,"private void createUi() { setTitle(""Breakpoints""); JPanel breakpointsPanel = new JPanel(); JPanel controlPanel = new JPanel(); breakpointsPanel.setLayout(new BorderLayout()); breakpointsPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); JButton addButton = new JButton(""Add""); JButton removeButton = new JButton(""Del""); removeButton.setEnabled(false); JTextField addTextField = new JTextField(5); BreakpointsListModel listModel = new BreakpointsListModel(breakpoints); JList<String> breakpointsList = new JList<>(listModel); breakpointsList.setFont(new Font(""Monospace"", Font.PLAIN, 14)); breakpointsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); JScrollPane scrollPane = new JScrollPane(breakpointsList); scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); breakpointsPanel.add(scrollPane, BorderLayout.CENTER); breakpointsList.addListSelectionListener(le -> { int idx = breakpointsList.getSelectedIndex(); if (idx == -1) { removeButton.setEnabled(false); } else { removeButton.setEnabled(true); } }); addButton.addActionListener(e -> { int value = -1; String newBreakpoint = addTextField.getText(); if (newBreakpoint == null || newBreakpoint.isEmpty()) { return; } try { value = Integer.parseInt(addTextField.getText(), 16); } catch (NumberFormatException ex) { logger.warn(""Can't parse page number {}"", newBreakpoint); return; } if (value < 0) { return; } listModel.addElement(value); logger.debug(""Added breakpoint ${}"", HexUtil.wordToHex(value)); addTextField.setText(EMPTY_STRING); }); removeButton.addActionListener(e -> listModel.removeElement(breakpointsList.getSelectedIndex())); controlPanel.add(addTextField); controlPanel.add(addButton); controlPanel.add(removeButton); setLayout(new BorderLayout()); getContentPane().add(breakpointsPanel, BorderLayout.CENTER); getContentPane().add(controlPanel, BorderLayout.SOUTH); setMinimumSize(FRAME_SIZE); setMaximumSize(FRAME_SIZE); setPreferredSize(FRAME_SIZE); setLocationRelativeTo(mainWindow); setResizable(false); pack(); }",https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
df88c54f90397f303bef69928576814c842634de,MemoryWindow.java,actionPerformed,"public void actionPerformed(ActionEvent e) { if (e.getSource() == previousPageButton) { int currentPage = getPageNumber(); if (currentPage > 0x00) { setPageNumber(currentPage - 1); updateControls(); updateState(); } } else if (e.getSource() == nextPageButton) { int currentPage = getPageNumber(); if (currentPage < 0xff) { setPageNumber(currentPage + 1); updateControls(); updateState(); } } else if (e.getSource() == pageNumberTextField) { String pageNumberInput = pageNumberTextField.getText(); try { int newPageNumber = Integer.parseInt(pageNumberInput, 16); setPageNumber(newPageNumber & 0xff); updateState(); } catch (NumberFormatException ex) { logger.warn(""Can't parse page number {}"", pageNumberInput); } updateControls(); } }",https://www.github.com/sethm/symon/commit/df88c54f90397f303bef69928576814c842634de
3530e9e99a97d1c599f16189653a5cb86998ce97,BreakpointsWindow.java,createUi,"private void createUi() { setTitle(""Breakpoints""); JPanel breakpointsPanel = new JPanel(); JPanel controlPanel = new JPanel(); breakpointsPanel.setLayout(new BorderLayout()); breakpointsPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); JButton addButton = new JButton(""Add""); JButton removeButton = new JButton(""Del""); removeButton.setEnabled(false); JTextField addTextField = new JTextField(5); BreakpointsListModel listModel = new BreakpointsListModel(breakpoints); JList<String> breakpointsList = new JList<>(listModel); breakpointsList.setFont(new Font(""Monospace"", Font.PLAIN, 14)); breakpointsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); JScrollPane scrollPane = new JScrollPane(breakpointsList); scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); breakpointsPanel.add(scrollPane, BorderLayout.CENTER); breakpointsList.addListSelectionListener(le -> { int idx = breakpointsList.getSelectedIndex(); if (idx == -1) { removeButton.setEnabled(false); } else { removeButton.setEnabled(true); } }); ActionListener addBreakpointListener = e -> { int value = -1; String newBreakpoint = addTextField.getText(); if (newBreakpoint == null || newBreakpoint.isEmpty()) { return; } try { value = (Integer.parseInt(addTextField.getText(), 16) & 0xffff); } catch (NumberFormatException ex) { logger.warn(""Can't parse page number {}"", newBreakpoint); return; } if (value < 0) { return; } listModel.addElement(value); logger.debug(""Added breakpoint ${}"", HexUtil.wordToHex(value)); addTextField.setText(EMPTY_STRING); }; addButton.addActionListener(addBreakpointListener); addTextField.addActionListener(addBreakpointListener); removeButton.addActionListener(e -> listModel.removeElement(breakpointsList.getSelectedIndex())); controlPanel.add(addTextField); controlPanel.add(addButton); controlPanel.add(removeButton); setLayout(new BorderLayout()); getContentPane().add(breakpointsPanel, BorderLayout.CENTER); getContentPane().add(controlPanel, BorderLayout.SOUTH); setMinimumSize(FRAME_SIZE); setMaximumSize(FRAME_SIZE); setPreferredSize(FRAME_SIZE); setLocationRelativeTo(mainWindow); setResizable(false); pack(); }",https://www.github.com/sethm/symon/commit/3530e9e99a97d1c599f16189653a5cb86998ce97
634ea933f1c96caeb142807817aab53a6d098fa4,Breakpoints.java,contains,public boolean contains(int address) { return this.breakpoints.contains(address); },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Breakpoints.java,addBreakpoint,public void addBreakpoint(int address) { this.breakpoints .add(address); fireTableDataChanged(); },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Breakpoints.java,removeBreakpoint,public void removeBreakpoint(int address) { this.breakpoints.remove(address); fireTableDataChanged(); },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Breakpoints.java,removeBreakpointAtIndex,public void removeBreakpointAtIndex(int index) { if (index < 0) { return; } ArrayList<Integer> values = new ArrayList<>(breakpoints); int value = values.get(index); this.breakpoints.remove(value); fireTableDataChanged(); },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Breakpoints.java,refresh,public void refresh() { fireTableDataChanged(); },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Breakpoints.java,getColumnName,"public String getColumnName(int index) { if (index == 0) { return ""Address""; } else { return ""Inst""; } }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Breakpoints.java,getRowCount,public int getRowCount() { return breakpoints.size(); },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Breakpoints.java,getColumnCount,public int getColumnCount() { return 2; },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Breakpoints.java,getValueAt,"public Object getValueAt(int rowIndex, int columnIndex) { ArrayList<Integer> values = new ArrayList<>(breakpoints); if (columnIndex == 0) { return ""$"" + Utils.wordToHex(values.get(rowIndex)); } else if (columnIndex == 1) { int address = values.get(rowIndex); try { return simulator.disassembleOpAtAddress(address); } catch (MemoryAccessException ex) { return ""???""; } } else { return null; } }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,reset,"public void reset() throws MemoryAccessException { state.sp = 0xff; state.pc = Utils.address(bus.read(RST_VECTOR_L), bus.read(RST_VECTOR_H)); state.ir = 0; state.carryFlag = false; state.zeroFlag = false; state.irqDisableFlag = false; state.decimalModeFlag = false; state.breakFlag = false; state.overflowFlag = false; state.negativeFlag = false; state.irqAsserted = false; state.opTrap = false; state.stepCounter = 0L; state.a = 0; state.x = 0; state.y = 0; peekAhead(); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,step,"public void step() throws MemoryAccessException { opBeginTime = System.nanoTime(); state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(state.pc); } state.ir = bus.read(state.pc); int irAddressMode = (state.ir >> 2) & 0x07; int irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc); incrementPC(); } state.stepCounter++; int effectiveAddress = 0; int tmp; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = Utils.address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = Utils.address(bus.read(tmp), bus.read(tmp + 1)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = Utils.address(state.args[0], state.args[1]); break; case 4: tmp = Utils.address(bus.read(state.args[0]), bus.read((state.args[0] + 1) & 0xff)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: if (!getIrqDisableFlag()) { handleIrq(state.pc + 1); } break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = Utils.address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); int lo = stackPop(); int hi = stackPop(); setProgramCounter(Utils.address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((Utils.address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = Utils.address(state.args[0], state.args[1]); break; case 0x6c: lo = Utils.address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = Utils.address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = Utils.address(bus.read(lo), bus.read(hi)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = adc(state.a, bus.read(effectiveAddress)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress)); } else { state.a = sbc(state.a, bus.read(effectiveAddress)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); peekAhead(); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,handleInterrupt,"private void handleInterrupt(int returnPc, int vectorLow, int vectorHigh) throws MemoryAccessException { setBreakFlag(); stackPush((returnPc >> 8) & 0xff); stackPush(returnPc & 0xff); stackPush(state.getStatusFlag()); setIrqDisableFlag(); state.pc = Utils.address(bus.read(vectorLow), bus.read(vectorHigh)); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,getAccumulatorStatus,"public String getAccumulatorStatus() { return ""$"" + Utils.byteToHex(state.a); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,getXRegisterStatus,"public String getXRegisterStatus() { return ""$"" + Utils.byteToHex(state.x); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,getYRegisterStatus,"public String getYRegisterStatus() { return ""$"" + Utils.byteToHex(state.y); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,getProgramCounterStatus,"public String getProgramCounterStatus() { return ""$"" + Utils.wordToHex(state.pc); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,getStackPointerStatus,"public String getStackPointerStatus() { return ""$"" + Utils.byteToHex(state.sp); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,xAddress,"int xAddress(int lowByte, int hiByte) { return (Utils.address(lowByte, hiByte) + state.x) & 0xffff; }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,yAddress,"int yAddress(int lowByte, int hiByte) { return (Utils.address(lowByte, hiByte) + state.y) & 0xffff; }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,disassembleOp,"public static String disassembleOp(int opCode, int[] args) { String mnemonic = opcodeNames[opCode]; if (mnemonic == null) { return ""???""; } StringBuilder sb = new StringBuilder(mnemonic); switch (instructionModes[opCode]) { case ABS: sb.append("" $"").append(Utils.wordToHex(Utils.address(args[0], args[1]))); break; case ABX: sb.append("" $"").append(Utils.wordToHex(Utils.address(args[0], args[1]))).append("",X""); break; case ABY: sb.append("" $"").append(Utils.wordToHex(Utils.address(args[0], args[1]))).append("",Y""); break; case IMM: sb.append("" #$"").append(Utils.byteToHex(args[0])); break; case IND: sb.append("" ($"").append(Utils.wordToHex(Utils.address(args[0], args[1]))).append("")""); break; case XIN: sb.append("" ($"").append(Utils.byteToHex(args[0])).append("",X)""); break; case INY: sb.append("" ($"").append(Utils.byteToHex(args[0])).append(""),Y""); break; case REL: case ZPG: sb.append("" $"").append(Utils.byteToHex(args[0])); break; case ZPX: sb.append("" $"").append(Utils.byteToHex(args[0])).append("",X""); break; case ZPY: sb.append("" $"").append(Utils.byteToHex(args[0])).append("",Y""); break; } return sb.toString(); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,disassembleNextOp,"public String disassembleNextOp() { return Cpu.disassembleOp(state.nextIr, state.nextArgs); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Cpu.java,disassembleOpAtAddress,"public String disassembleOpAtAddress(int address) throws MemoryAccessException { int opCode = bus.read(address); int args[] = new int[2]; int size = Cpu.instructionSizes[opCode]; for (int i = 1; i < size; i++) { int nextRead = (address + i) % bus.endAddress(); args[i-1] = bus.read(nextRead); } return disassembleOp(opCode, args); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,CpuState.java,toTraceEvent,"public String toTraceEvent() { String opcode = Cpu.disassembleOp(ir, args); return getInstructionByteStatus() + "" "" + String.format(""%-14s"", opcode) + ""A:"" + Utils.byteToHex(a) + "" "" + ""X:"" + Utils.byteToHex(x) + "" "" + ""Y:"" + Utils.byteToHex(y) + "" "" + ""F:"" + Utils.byteToHex(getStatusFlag()) + "" "" + ""S:1"" + Utils.byteToHex(sp) + "" "" + getProcessorStatusString() + ""\n""; }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,CpuState.java,getStatusFlag,public int getStatusFlag() { int status = 0x20; if (carryFlag) { status |= Cpu.P_CARRY; } if (zeroFlag) { status |= Cpu.P_ZERO; } if (irqDisableFlag) { status |= Cpu.P_IRQ_DISABLE; } if (decimalModeFlag) { status |= Cpu.P_DECIMAL; } if (breakFlag) { status |= Cpu.P_BREAK; } if (overflowFlag) { status |= Cpu.P_OVERFLOW; } if (negativeFlag) { status |= Cpu.P_NEGATIVE; } return status; },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,CpuState.java,getInstructionByteStatus,"public String getInstructionByteStatus() { switch (Cpu.instructionSizes[ir]) { case 0: case 1: return Utils.wordToHex(lastPc) + "" "" + Utils.byteToHex(ir) + "" ""; case 2: return Utils.wordToHex(lastPc) + "" "" + Utils.byteToHex(ir) + "" "" + Utils.byteToHex(args[0]) + "" ""; case 3: return Utils.wordToHex(lastPc) + "" "" + Utils.byteToHex(ir) + "" "" + Utils.byteToHex(args[0]) + "" "" + Utils.byteToHex(args[1]); default: return null; } }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Simulator.java,disassembleOpAtAddress,public String disassembleOpAtAddress(int address) throws MemoryAccessException { return machine.getCpu().disassembleOpAtAddress(address); },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > machine.getMemorySize()) { throw new IOException(""File will not fit in "" + ""available memory ($"" + Integer.toString(machine.getMemorySize(), 16) + "" bytes)""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } loadProgram(program, preferences.getProgramStartAddress()); SwingUtilities.invokeLater(() -> { console.reset(); breakpoints.refresh(); }); JOptionPane.showMessageDialog(mainWindow, ""Loaded Successfully At "" + String.format(""$%04X"", preferences.getProgramStartAddress()), ""OK"", JOptionPane.PLAIN_MESSAGE); } } } } catch (IOException ex) { logger.error(""Unable to read program file."", ex); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryAccessException ex) { logger.error(""Memory access error loading program"", ex); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File romFile = fileChooser.getSelectedFile(); if (romFile.canRead()) { long fileSize = romFile.length(); if (fileSize != machine.getRomSize()) { throw new IOException(""ROM file must be exactly "" + String.valueOf(machine.getRomSize()) + "" bytes.""); } Memory rom = Memory.makeROM(machine.getRomBase(), machine.getRomBase() + machine.getRomSize() - 1, romFile); machine.setRom(rom); machine.getCpu().reset(); updateVisibleState(); breakpoints.refresh(); logger.info(""ROM File `{}' loaded at {}"", romFile.getName(), String.format(""0x%04X"", machine.getRomBase())); JOptionPane.showMessageDialog(mainWindow, ""Loaded Successfully At "" + String.format(""$%04X"", machine.getRomBase()), ""OK"", JOptionPane.PLAIN_MESSAGE); } } } catch (IOException ex) { logger.error(""Unable to read ROM file: {}"", ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryRangeException ex) { logger.error(""Memory range error while loading ROM file: {}"", ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryAccessException ex) { logger.error(""Memory access error while loading ROM file: {}"", ex.getMessage()); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,BreakpointsWindow.java,createUi,"private void createUi() { setTitle(""Breakpoints""); JPanel breakpointsPanel = new JPanel(); JPanel controlPanel = new JPanel(); breakpointsPanel.setLayout(new BorderLayout()); breakpointsPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); JButton addButton = new JButton(""Add""); JButton removeButton = new JButton(""Del""); removeButton.setEnabled(false); JTextField addTextField = new JTextField(4); JTable breakpointsTable = new JTable(breakpoints); breakpointsTable.setShowGrid(true); breakpointsTable.setGridColor(Color.LIGHT_GRAY); breakpointsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); breakpointsTable.getSelectionModel().addListSelectionListener(e -> { if (e.getFirstIndex() > -1) { removeButton.setEnabled(true); } else { removeButton.setEnabled(false); } }); JScrollPane scrollPane = new JScrollPane(breakpointsTable); scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); breakpointsPanel.add(scrollPane, BorderLayout.CENTER); ActionListener addBreakpointListener = e -> { int value = -1; String newBreakpoint = addTextField.getText(); if (newBreakpoint == null || newBreakpoint.isEmpty()) { return; } try { value = (Integer.parseInt(addTextField.getText(), 16) & 0xffff); } catch (NumberFormatException ex) { logger.warn(""Can't parse page number {}"", newBreakpoint); return; } if (value < 0) { return; } breakpoints.addBreakpoint(value); logger.debug(""Added breakpoint ${}"", Utils.wordToHex(value)); addTextField.setText(EMPTY_STRING); }; addButton.addActionListener(addBreakpointListener); addTextField.addActionListener(addBreakpointListener); removeButton.addActionListener(e -> breakpoints.removeBreakpointAtIndex(breakpointsTable.getSelectedRow())); controlPanel.add(addTextField); controlPanel.add(addButton); controlPanel.add(removeButton); setLayout(new BorderLayout()); getContentPane().add(breakpointsPanel, BorderLayout.CENTER); getContentPane().add(controlPanel, BorderLayout.SOUTH); setMinimumSize(FRAME_SIZE); setMaximumSize(FRAME_SIZE); setPreferredSize(FRAME_SIZE); setLocationRelativeTo(mainWindow); setResizable(false); pack(); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,MemoryWindow.java,updateControls,private void updateControls() { int pageNumber = getPageNumber(); previousPageButton.setEnabled(pageNumber > 0x00); nextPageButton.setEnabled(pageNumber < 0xff); pageNumberTextField.setText(Utils.byteToHex(pageNumber)); },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,MemoryWindow.java,getValueAt,"public Object getValueAt(int row, int column) { try { if (column == 0) { return Utils.wordToHex(fullAddress(row, 1)); } else if (column < 9) { return Utils.byteToHex(bus.read(fullAddress(row, column))); } else { return Utils.byteToAscii(bus.read(fullAddress(row, column - 8))); } } catch (MemoryAccessException ex) { return ""??""; } }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,StatusPanel.java,updateState,"public void updateState() { Cpu cpu = machine.getCpu(); CpuState cpuState = cpu.getCpuState(); int status = cpuState.getStatusFlag(); carryFlagLabel.setIcon(iconForFlag(status, 0)); zeroFlagLabel.setIcon(iconForFlag(status, 1)); irqDisableFlagLabel.setIcon(iconForFlag(status, 2)); decimalModeFlagLabel.setIcon(iconForFlag(status, 3)); breakFlagLabel.setIcon(iconForFlag(status, 4)); overflowFlagLabel.setIcon(iconForFlag(status, 6)); negativeFlagLabel.setIcon(iconForFlag(status, 7)); opcodeField.setText(cpu.disassembleNextOp()); pcField.setText(cpu.getProgramCounterStatus()); spField.setText(cpu.getStackPointerStatus()); aField.setText(cpu.getAccumulatorStatus()); xField.setText(cpu.getXRegisterStatus()); yField.setText(cpu.getYRegisterStatus()); repaint(); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,TraceLog.java,refresh,public void refresh() { StringBuilder logString = new StringBuilder(); synchronized(traceLog) { for (CpuState state : traceLog) { logString.append(state.toTraceEvent()); } } synchronized(traceLogTextArea) { traceLogTextArea.setText(logString.toString()); } },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,TraceLog.java,append,public void append(CpuState state) { synchronized(traceLog) { traceLog.push(new CpuState(state)); } },https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,Utils.java,address,"public static int address(int lowByte, int hiByte) { return ((hiByte << 8) | lowByte) & 0xffff; }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,CpuTest.java,testAddress,"public void testAddress() { assertEquals(0xf1ea, Utils.address(0xea, 0xf1)); assertEquals(0x00ea, Utils.address(0xea, 0x00)); assertEquals(0xf100, Utils.address(0x00, 0xf1)); assertEquals(0x1234, Utils.address(0x34, 0x12)); assertEquals(0xffff, Utils.address(0xff, 0xff)); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,UtilsTest.java,testByteToHex,"public void testByteToHex() { assertEquals(""FE"", Utils.byteToHex(0xfe)); assertEquals(""00"", Utils.byteToHex(0)); assertEquals(""0A"", Utils.byteToHex(10)); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,UtilsTest.java,testByteToHexIgnoresSign,"public void testByteToHexIgnoresSign() { assertEquals(""FF"", Utils.byteToHex(-1)); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,UtilsTest.java,testByteToHexMasksLowByte,"public void testByteToHexMasksLowByte() { assertEquals(""FE"", Utils.byteToHex(0xfffe)); assertEquals(""00"", Utils.byteToHex(0xff00)); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,UtilsTest.java,testWordToHex,"public void testWordToHex() { assertEquals(""0000"", Utils.wordToHex(0)); assertEquals(""FFFF"", Utils.wordToHex(65535)); assertEquals(""FFFE"", Utils.wordToHex(65534)); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,UtilsTest.java,testWordToHexIgnoresSign,"public void testWordToHexIgnoresSign() { assertEquals(""FFFF"", Utils.wordToHex(-1)); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,UtilsTest.java,testWordToHexMasksTwoLowBytes,"public void testWordToHexMasksTwoLowBytes() { assertEquals(""FFFE"", Utils.wordToHex(0xfffffe)); assertEquals(""FF00"", Utils.wordToHex(0xffff00)); }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
634ea933f1c96caeb142807817aab53a6d098fa4,UtilsTest.java,testAllBytesAreCorrect,"public void testAllBytesAreCorrect() { for (int i = 0; i <= 0xff; i++) { assertEquals(String.format(""%02X"", i), Utils.byteToHex(i)); } }",https://www.github.com/sethm/symon/commit/634ea933f1c96caeb142807817aab53a6d098fa4
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Bus.java,getDevices,public SortedSet<Device> getDevices() { SortedSet<Device> devices = new TreeSet<>(); List<Integer> priorities = new ArrayList<>(deviceMap.keySet()); Collections.sort(priorities); for (int priority : priorities) { SortedSet<Device> deviceSet = deviceMap.get(priority); for (Device device : deviceSet) { devices.add(device); } } return devices; },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Main.java,main,"public static void main(String args[]) throws Exception { Class machineClass = SymonMachine.class; for(int i = 0; i < args.length; ++i) { String arg = args[i].toLowerCase(Locale.ENGLISH); if(arg.equals(""-machine"") && (i+1) < args.length) { String machine = args[i+1].trim().toLowerCase(Locale.ENGLISH); switch (machine) { case ""symon"": machineClass = SymonMachine.class; break; case ""multicomp"": machineClass = MulticompMachine.class; break; case ""simple"": machineClass = SimpleMachine.class; break; } } } while (true) { if (machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp"", ""Simple""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if (s != null && s.equals(""Multicomp"")) { machineClass = MulticompMachine.class; } else if (s != null && s.equals(""Simple"")) { machineClass = SimpleMachine.class; } else { machineClass = SymonMachine.class; } } final Simulator simulator = new Simulator(machineClass); SwingUtilities.invokeLater(new Runnable() { @Override public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } } }); Simulator.MainCommand cmd = simulator.waitForCommand(); if (cmd.equals(Simulator.MainCommand.SELECTMACHINE)) { machineClass = null; } else { break; } } }",https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""6502 Simulator - "" + machine.getName()); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT, false); this.statusPane = new StatusPanel(machine); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); JButton softResetButton = new JButton(""Soft Reset""); JButton hardResetButton = new JButton(""Hard Reset""); stepCountBox = new JComboBox<>(STEPS); stepCountBox.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(softResetButton); buttonContainer.add(hardResetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { Simulator.this.handleStop(); } else { Simulator.this.handleStart(); } } }); stepButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { Simulator.this.handleStep(stepsPerClick); } }); softResetButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { Simulator.this.handleReset(false); } }); hardResetButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { Simulator.this.handleReset(true); } }); mainWindow.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); handleReset(false); }",https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { Simulator.this.handleStop(); } else { Simulator.this.handleStart(); } },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { Simulator.this.handleStep(stepsPerClick); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { Simulator.this.handleReset(false); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { Simulator.this.handleReset(true); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,run,"public void run() { logger.debug(""Starting main run loop.""); isRunning = true; SwingUtilities.invokeLater(new Runnable() { @Override public void run() { stepButton.setEnabled(false); stepCountBox.setEnabled(false); menuBar.simulatorDidStart(); runStopButton.setText(""Stop""); } }); try { do { step(); } while (shouldContinue()); } catch (SymonException ex) { logger.error(""Exception in main simulator run thread. Exiting run."", ex); } SwingUtilities.invokeLater(new Runnable() { @Override public void run() { statusPane.updateState(); memoryWindow.updateState(); runStopButton.setText(""Run""); stepButton.setEnabled(true); stepCountBox.setEnabled(true); if (traceLog.isVisible()) { traceLog.refresh(); } menuBar.simulatorDidStop(); traceLog.simulatorDidStop(); } }); isRunning = false; }",https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { try { int retVal = fileChooser.showOpenDialog(mainWindow); if (retVal == JFileChooser.APPROVE_OPTION) { File f = fileChooser.getSelectedFile(); if (f.canRead()) { long fileSize = f.length(); if (fileSize > machine.getMemorySize()) { throw new IOException(""File will not fit in "" + ""available memory ($"" + Integer.toString(machine.getMemorySize(), 16) + "" bytes)""); } else { byte[] program = new byte[(int) fileSize]; int i = 0; FileInputStream fis = new FileInputStream(f); BufferedInputStream bis = new BufferedInputStream(fis); DataInputStream dis = new DataInputStream(bis); while (dis.available() != 0) { program[i++] = dis.readByte(); } loadProgram(program, preferences.getProgramStartAddress()); SwingUtilities.invokeLater(new Runnable() { @Override public void run() { console.reset(); breakpoints.refresh(); } }); JOptionPane.showMessageDialog(mainWindow, ""Loaded Successfully At "" + String.format(""$%04X"", preferences.getProgramStartAddress()), ""OK"", JOptionPane.PLAIN_MESSAGE); } } } } catch (IOException ex) { logger.error(""Unable to read program file."", ex); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } catch (MemoryAccessException ex) { logger.error(""Memory access error loading program"", ex); JOptionPane.showMessageDialog(mainWindow, ex.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE); } }",https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,run,public void run() { console.reset(); breakpoints.refresh(); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,actionPerformed,"public void actionPerformed(ActionEvent actionEvent) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { console.setFont(new Font(""Monospaced"", Font.PLAIN, size)); mainWindow.pack(); } }); }",https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Simulator.java,updateVisibleState,private void updateVisibleState() { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { statusPane.updateState(); memoryWindow.updateState(); if (traceLog.shouldUpdate()) { traceLog.refresh(); } } }); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Device.java,notifyListeners,public void notifyListeners() { deviceChangeListeners.forEach(new Consumer<DeviceChangeListener>() { @Override public void accept(DeviceChangeListener deviceChangeListener) { deviceChangeListener.deviceStateChanged(); } }); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,Device.java,accept,public void accept(DeviceChangeListener deviceChangeListener) { deviceChangeListener.deviceStateChanged(); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,BreakpointsWindow.java,createUi,"private void createUi() { setTitle(""Breakpoints""); JPanel breakpointsPanel = new JPanel(); JPanel controlPanel = new JPanel(); breakpointsPanel.setLayout(new BorderLayout()); breakpointsPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); final JButton addButton = new JButton(""Add""); final JButton removeButton = new JButton(""Del""); removeButton.setEnabled(false); final JTextField addTextField = new JTextField(4); final JTable breakpointsTable = new JTable(breakpoints); breakpointsTable.setShowGrid(true); breakpointsTable.setGridColor(Color.LIGHT_GRAY); breakpointsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); breakpointsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() { @Override public void valueChanged(ListSelectionEvent e) { if (e.getFirstIndex() > -1) { removeButton.setEnabled(true); } else { removeButton.setEnabled(false); } } }); JScrollPane scrollPane = new JScrollPane(breakpointsTable); scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS); breakpointsPanel.add(scrollPane, BorderLayout.CENTER); ActionListener addBreakpointListener = new ActionListener() { @Override public void actionPerformed(ActionEvent e) { int value; String newBreakpoint = addTextField.getText(); if (newBreakpoint == null || newBreakpoint.isEmpty()) { return; } try { value = (Integer.parseInt(addTextField.getText(), 16) & 0xffff); } catch (NumberFormatException ex) { logger.warn(""Can't parse page number {}"", newBreakpoint); return; } if (value < 0) { return; } breakpoints.addBreakpoint(value); logger.debug(""Added breakpoint ${}"", Utils.wordToHex(value)); addTextField.setText(EMPTY_STRING); } }; addButton.addActionListener(addBreakpointListener); addTextField.addActionListener(addBreakpointListener); removeButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { breakpoints.removeBreakpointAtIndex(breakpointsTable.getSelectedRow()); } }); controlPanel.add(addTextField); controlPanel.add(addButton); controlPanel.add(removeButton); setLayout(new BorderLayout()); getContentPane().add(breakpointsPanel, BorderLayout.CENTER); getContentPane().add(controlPanel, BorderLayout.SOUTH); setMinimumSize(FRAME_SIZE); setMaximumSize(FRAME_SIZE); setPreferredSize(FRAME_SIZE); setLocationRelativeTo(mainWindow); setResizable(false); pack(); }",https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,BreakpointsWindow.java,valueChanged,public void valueChanged(ListSelectionEvent e) { if (e.getFirstIndex() > -1) { removeButton.setEnabled(true); } else { removeButton.setEnabled(false); } },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,BreakpointsWindow.java,actionPerformed,"public void actionPerformed(ActionEvent e) { int value; String newBreakpoint = addTextField.getText(); if (newBreakpoint == null || newBreakpoint.isEmpty()) { return; } try { value = (Integer.parseInt(addTextField.getText(), 16) & 0xffff); } catch (NumberFormatException ex) { logger.warn(""Can't parse page number {}"", newBreakpoint); return; } if (value < 0) { return; } breakpoints.addBreakpoint(value); logger.debug(""Added breakpoint ${}"", Utils.wordToHex(value)); addTextField.setText(EMPTY_STRING); }",https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,BreakpointsWindow.java,actionPerformed,public void actionPerformed(ActionEvent e) { breakpoints.removeBreakpointAtIndex(breakpointsTable.getSelectedRow()); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,PreferencesDialog.java,createUi,"private void createUi() { dialog.setTitle(""Preferences""); Container contents = dialog.getContentPane(); JPanel settingsContainer = new JPanel(); JPanel buttonsContainer = new JPanel(); GridBagLayout layout = new GridBagLayout(); settingsContainer.setLayout(layout); final JLabel haltOnBreakLabel = new JLabel(""Halt on BRK""); final JLabel programLoadAddressLabel = new JLabel(""Program Load Address""); haltOnBreakCheckBox = new JCheckBox(); programLoadAddressField = new JTextField(8); programLoadAddressLabel.setLabelFor(programLoadAddressField); GridBagConstraints constraints = new GridBagConstraints(); constraints.insets = new Insets(5, 5, 5, 5); constraints.fill = GridBagConstraints.HORIZONTAL; constraints.gridx = 0; constraints.gridy = 0; settingsContainer.add(haltOnBreakLabel, constraints); constraints.gridx = 1; settingsContainer.add(haltOnBreakCheckBox, constraints); constraints.gridy = 1; constraints.gridx = 0; settingsContainer.add(programLoadAddressLabel, constraints); constraints.gridx = 1; settingsContainer.add(programLoadAddressField, constraints); JButton applyButton = new JButton(""Apply""); JButton cancelButton = new JButton(""Cancel""); cancelButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { PreferencesDialog.this.updateUi(); dialog.setVisible(false); } }); applyButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { haltOnBreak = haltOnBreakCheckBox.isSelected(); programLoadAddress = PreferencesDialog.this.hexToInt(programLoadAddressField.getText()); PreferencesDialog.this.updateUi(); PreferencesDialog.this.setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); } }); buttonsContainer.add(applyButton); buttonsContainer.add(cancelButton); contents.add(settingsContainer, BorderLayout.PAGE_START); contents.add(buttonsContainer, BorderLayout.PAGE_END); dialog.pack(); }",https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,PreferencesDialog.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { PreferencesDialog.this.updateUi(); dialog.setVisible(false); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,PreferencesDialog.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { haltOnBreak = haltOnBreakCheckBox.isSelected(); programLoadAddress = PreferencesDialog.this.hexToInt(programLoadAddressField.getText()); PreferencesDialog.this.updateUi(); PreferencesDialog.this.setChanged(); PreferencesDialog.this.notifyObservers(); dialog.setVisible(false); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,StatusPanel.java,createUi,"private void createUi() { Border emptyBorder = BorderFactory.createEmptyBorder(EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER, EMPTY_BORDER); Border etchedBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED); setBorder(BorderFactory.createCompoundBorder(emptyBorder, etchedBorder)); GridBagLayout layout = new GridBagLayout(); GridBagConstraints constraints = new GridBagConstraints(); setLayout(layout); JPanel statusFlagsPanel = new JPanel(); statusFlagsPanel.setAlignmentX(LEFT_ALIGNMENT); carryOn = new ImageIcon(this.getClass().getResource(""/C_on.png"")); carryOff = new ImageIcon(this.getClass().getResource(""/C_off.png"")); zeroOn = new ImageIcon(this.getClass().getResource(""/Z_on.png"")); zeroOff = new ImageIcon(this.getClass().getResource(""/Z_off.png"")); irqOn = new ImageIcon(this.getClass().getResource(""/I_on.png"")); irqOff = new ImageIcon(this.getClass().getResource(""/I_off.png"")); decimalOn = new ImageIcon(this.getClass().getResource(""/D_on.png"")); decimalOff = new ImageIcon(this.getClass().getResource(""/D_off.png"")); breakOn = new ImageIcon(this.getClass().getResource(""/B_on.png"")); breakOff = new ImageIcon(this.getClass().getResource(""/B_off.png"")); overflowOn = new ImageIcon(this.getClass().getResource(""/O_on.png"")); overflowOff = new ImageIcon(this.getClass().getResource(""/O_off.png"")); negativeOn = new ImageIcon(this.getClass().getResource(""/N_on.png"")); negativeOff = new ImageIcon(this.getClass().getResource(""/N_off.png"")); carryFlagLabel = new JLabel(carryOff, JLabel.CENTER); zeroFlagLabel = new JLabel(zeroOff, JLabel.CENTER); irqDisableFlagLabel = new JLabel(irqOff, JLabel.CENTER); decimalModeFlagLabel = new JLabel(decimalOff, JLabel.CENTER); breakFlagLabel = new JLabel(breakOff, JLabel.CENTER); overflowFlagLabel = new JLabel(overflowOff, JLabel.CENTER); negativeFlagLabel = new JLabel(negativeOff, JLabel.CENTER); carryFlagLabel.setToolTipText(""Carry: The last operation caused an overflow "" + ""from bit 7 of the result or an underflow from bit 0""); zeroFlagLabel.setToolTipText(""Zero: The result of the last operation was 0""); irqDisableFlagLabel.setToolTipText(""Interrupt Disable: Processor will not respond to IRQ""); decimalModeFlagLabel.setToolTipText(""Decimal Mode""); breakFlagLabel.setToolTipText(""Break: BRK instruction occurred""); overflowFlagLabel.setToolTipText(""Overflow: The result of the last operation was "" + ""an invalid 2's complement result""); negativeFlagLabel.setToolTipText(""Negative: The result of the last operation set bit 7""); statusFlagsPanel.add(negativeFlagLabel); statusFlagsPanel.add(overflowFlagLabel); statusFlagsPanel.add(breakFlagLabel); statusFlagsPanel.add(decimalModeFlagLabel); statusFlagsPanel.add(irqDisableFlagLabel); statusFlagsPanel.add(zeroFlagLabel); statusFlagsPanel.add(carryFlagLabel); JLabel statusFlagsLabel = makeLabel(""Flags""); JLabel opcodeLabel = makeLabel(""Next IR""); JLabel pcLabel = makeLabel(""PC""); JLabel spLabel = makeLabel(""SP""); JLabel aLabel = makeLabel(""A""); JLabel xLabel = makeLabel(""X""); JLabel yLabel = makeLabel(""Y""); statusFlagsLabel.setToolTipText(""6502 Processor Status Flags""); opcodeLabel.setToolTipText(""Instruction Register""); pcLabel.setToolTipText(""Program Counter""); spLabel.setToolTipText(""Stack Pointer""); opcodeField = makeTextField(LARGE_TEXT_FIELD_SIZE, false); pcField = makeTextField(LARGE_TEXT_FIELD_SIZE, true); spField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); aField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); xField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); yField = makeTextField(SMALL_TEXT_FIELD_SIZE, true); pcField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(pcField) & 0xffff; machine.getCpu().setProgramCounter(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); } }); spField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(spField) & 0xff; machine.getCpu().setStackPointer(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); } }); aField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(aField) & 0xff; machine.getCpu().setAccumulator(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); } }); xField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(xField) & 0xff; machine.getCpu().setXRegister(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); } }); yField.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(yField) & 0xff; machine.getCpu().setYRegister(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); } }); constraints.anchor = GridBagConstraints.LINE_START; constraints.gridwidth = 2; constraints.gridx = 0; constraints.gridy = 0; add(statusFlagsLabel, constraints); constraints.gridy = 1; add(statusFlagsPanel, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 2; add(opcodeLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 3; add(opcodeField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridy = 4; add(pcLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridy = 5; add(pcField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridwidth = 1; constraints.gridy = 6; add(spLabel, constraints); constraints.gridx = 1; add(aLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 7; add(spField, constraints); constraints.gridx = 1; add(aField, constraints); constraints.insets = new Insets(5, 0, 0, 0); constraints.gridx = 0; constraints.gridy = 8; add(xLabel, constraints); constraints.gridx = 1; add(yLabel, constraints); constraints.insets = new Insets(2, 2, 2, 2); constraints.gridx = 0; constraints.gridy = 9; add(xField, constraints); constraints.gridx = 1; add(yField, constraints); }",https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(pcField) & 0xffff; machine.getCpu().setProgramCounter(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(spField) & 0xff; machine.getCpu().setStackPointer(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(aField) & 0xff; machine.getCpu().setAccumulator(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(xField) & 0xff; machine.getCpu().setXRegister(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,StatusPanel.java,actionPerformed,public void actionPerformed(ActionEvent e) { try { int newVal = StatusPanel.this.getHexVal(yField) & 0xff; machine.getCpu().setYRegister(newVal); } catch (Exception ex) { } StatusPanel.this.updateState(); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,VideoWindow.java,run,public void run() { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { if (cursorBlinkRate > 0) { hideCursor = !hideCursor; VideoWindow.this.repaint(); } } }); },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65,VideoWindow.java,run,public void run() { if (cursorBlinkRate > 0) { hideCursor = !hideCursor; VideoWindow.this.repaint(); } },https://www.github.com/sethm/symon/commit/66c52c8826dfcf8a6ba395fe9a672bdb1be4ed65
eff98118d5ccbeec7676a8aa6c003f475e916bb6,Device.java,notifyListeners,public void notifyListeners() { for (DeviceChangeListener listener : deviceChangeListeners) { listener.deviceStateChanged(); } },https://www.github.com/sethm/symon/commit/eff98118d5ccbeec7676a8aa6c003f475e916bb6
5a2e057e6942409e8f2f42215c0e19e3b4951074,Bus.java,buildDeviceAddressArray,private void buildDeviceAddressArray() { int size = (this.endAddress - this.startAddress) + 1; deviceAddressArray = new Device[size]; for (Device device : getDevices()) { MemoryRange range = device.getMemoryRange(); for (int address = range.startAddress; address <= range.endAddress; ++address) { deviceAddressArray[address - this.startAddress] = device; } } },https://www.github.com/sethm/symon/commit/5a2e057e6942409e8f2f42215c0e19e3b4951074
5a2e057e6942409e8f2f42215c0e19e3b4951074,Bus.java,removeDevice,public void removeDevice(Device device) { for (SortedSet<Device> deviceSet : deviceMap.values()) { deviceSet.remove(device); } buildDeviceAddressArray(); },https://www.github.com/sethm/symon/commit/5a2e057e6942409e8f2f42215c0e19e3b4951074
5a2e057e6942409e8f2f42215c0e19e3b4951074,Bus.java,isComplete,public boolean isComplete() { if (deviceAddressArray == null) { buildDeviceAddressArray(); } for (int address = startAddress; address <= endAddress; ++address) { if (deviceAddressArray[address - startAddress] == null) { return false; } } return true; },https://www.github.com/sethm/symon/commit/5a2e057e6942409e8f2f42215c0e19e3b4951074
5a2e057e6942409e8f2f42215c0e19e3b4951074,Bus.java,read,"public int read(int address) throws MemoryAccessException { Device d = deviceAddressArray[address - this.startAddress]; if (d != null) { MemoryRange range = d.getMemoryRange(); int devAddr = address - range.startAddress(); return d.read(devAddr) & 0xff; } throw new MemoryAccessException(""Bus read failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/5a2e057e6942409e8f2f42215c0e19e3b4951074
5a2e057e6942409e8f2f42215c0e19e3b4951074,Bus.java,write,"public void write(int address, int value) throws MemoryAccessException { Device d = deviceAddressArray[address - this.startAddress]; if (d != null) { MemoryRange range = d.getMemoryRange(); int devAddr = address - range.startAddress(); d.write(devAddr, value); return; } throw new MemoryAccessException(""Bus write failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/5a2e057e6942409e8f2f42215c0e19e3b4951074
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Bus.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { Device d = deviceAddressArray[address - this.startAddress]; if (d != null) { MemoryRange range = d.getMemoryRange(); int devAddr = address - range.startAddress(); return d.read(devAddr, cpuAccess) & 0xff; } throw new MemoryAccessException(""Bus read failed. No device at address "" + String.format(""$%04X"", address)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Cpu.java,reset,"public void reset() throws MemoryAccessException { state.sp = 0xff; state.pc = Utils.address(bus.read(RST_VECTOR_L, true), bus.read(RST_VECTOR_H, true)); state.ir = 0; state.carryFlag = false; state.zeroFlag = false; state.irqDisableFlag = false; state.decimalModeFlag = false; state.breakFlag = false; state.overflowFlag = false; state.negativeFlag = false; state.irqAsserted = false; state.opTrap = false; state.stepCounter = 0L; state.a = 0; state.x = 0; state.y = 0; peekAhead(); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Cpu.java,step,"public void step() throws MemoryAccessException { opBeginTime = System.nanoTime(); state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(state.pc); } state.ir = bus.read(state.pc, true); int irAddressMode = (state.ir >> 2) & 0x07; int irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc, true); incrementPC(); } state.stepCounter++; int effectiveAddress = 0; int tmp; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = Utils.address(state.args[0], state.args[1]); break; case 5: if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = Utils.address(bus.read(tmp, true), bus.read(tmp + 1, true)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = Utils.address(state.args[0], state.args[1]); break; case 4: tmp = Utils.address(bus.read(state.args[0], true), bus.read((state.args[0] + 1) & 0xff, true)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: handleBrk(state.pc + 1); break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = Utils.address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); int lo = stackPop(); int hi = stackPop(); setProgramCounter(Utils.address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((Utils.address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0x4c: state.pc = Utils.address(state.args[0], state.args[1]); break; case 0x6c: lo = Utils.address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_WITH_INDIRECT_JMP_BUG || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = Utils.address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = Utils.address(bus.read(lo, true), bus.read(hi, true)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x24: case 0x2c: tmp = bus.read(effectiveAddress, true); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress, true)); } else { state.a = adc(state.a, bus.read(effectiveAddress, true)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress, true); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress, true); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress, true)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress, true)); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress, true) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress, true)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress, true)); } else { state.a = sbc(state.a, bus.read(effectiveAddress, true)); } break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress, true) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; default: setOpTrap(); break; } delayLoop(state.ir); peekAhead(); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Cpu.java,peekAhead,"private void peekAhead() throws MemoryAccessException { state.nextIr = bus.read(state.pc, true); int nextInstSize = Cpu.instructionSizes[state.nextIr]; for (int i = 1; i < nextInstSize; i++) { int nextRead = (state.pc + i) % bus.endAddress(); state.nextArgs[i-1] = bus.read(nextRead, true); } }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Cpu.java,handleInterrupt,"private void handleInterrupt(int returnPc, int vectorLow, int vectorHigh, boolean isBreak) throws MemoryAccessException { if (isBreak) { setBreakFlag(); } else { clearBreakFlag(); } stackPush((returnPc >> 8) & 0xff); stackPush(returnPc & 0xff); stackPush(state.getStatusFlag()); setIrqDisableFlag(); state.pc = Utils.address(bus.read(vectorLow, true), bus.read(vectorHigh, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Cpu.java,stackPop,"int stackPop() throws MemoryAccessException { if (state.sp == 0xff) { state.sp = 0x00; } else { ++state.sp; } return bus.read(0x100 + state.sp, true); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Cpu.java,stackPeek,"int stackPeek() throws MemoryAccessException { return bus.read(0x100 + state.sp + 1, true); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Cpu.java,disassembleOpAtAddress,"public String disassembleOpAtAddress(int address) throws MemoryAccessException { int opCode = bus.read(address, true); int args[] = new int[2]; int size = Cpu.instructionSizes[opCode]; for (int i = 1; i < size; i++) { int nextRead = (address + i) % bus.endAddress(); args[i-1] = bus.read(nextRead, true); } return disassembleOp(opCode, args); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Simulator.java,step,"private void step() throws MemoryAccessException { machine.getCpu().step(); traceLog.append(machine.getCpu().getCpuState()); if (machine.getAcia() != null && machine.getAcia().hasTxChar()) { console.print(Character.toString((char) machine.getAcia().txRead(true))); console.repaint(); } try { if (machine.getAcia() != null && console.hasInput()) { machine.getAcia().rxWrite((int) console.readInputChar()); } } catch (FifoUnderrunException ex) { logger.error(""Console type-ahead buffer underrun!""); } if (videoWindow != null && stepsSinceLastCrtcRefresh++ > STEPS_BETWEEN_CRTC_REFRESHES) { stepsSinceLastCrtcRefresh = 0; if (videoWindow.isVisible()) { videoWindow.repaint(); } } if (stepsSinceLastUpdate++ > MAX_STEPS_BETWEEN_UPDATES) { updateVisibleState(); stepsSinceLastUpdate = 0; } }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Acia.java,rxRead,public synchronized int rxRead(boolean cpuAccess) { if (cpuAccess) { lastRxRead = System.nanoTime(); overrun = false; rxFull = false; } return rxChar; },https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Acia.java,txRead,public synchronized int txRead(boolean cpuAccess) { if (cpuAccess) { txEmpty = true; if (transmitIrqEnabled) { getBus().assertIrq(); } } return txChar; },https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Acia6551.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { switch (address) { case DATA_REG: return rxRead(cpuAccess); case STAT_REG: return statusReg(); case CMND_REG: return commandRegister; case CTRL_REG: return controlRegister; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Acia6850.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { switch (address) { case RX_REG: return rxRead(cpuAccess); case STAT_REG: return statusReg(); default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Crtc.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { switch (address) { case REGISTER_RW: switch (currentRegister) { case CURSOR_POSITION_LOW: return cursorPosition & 0xff; case CURSOR_POSITION_HIGH: return cursorPosition >> 8; default: return 0; } default: return 0; } }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Crtc.java,getCharAtAddress,"public int getCharAtAddress(int address) throws MemoryAccessException { return memory.read(address, false); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Device.java,read,"public abstract int read(int address, boolean cpuAccess) throws MemoryAccessException;",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Memory.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { return this.mem[address]; }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,SdController.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { switch (address) { case 0: return readData(); case 1: return readStatus(); default: return 0; } }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,Via6522.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { Register[] registers = Register.values(); if (address >= registers.length) { throw new MemoryAccessException(""Unknown register: "" + address); } Register r = registers[address]; switch (r) { case ORA: case ORB: case DDRA: case DDRB: case T1C_L: case T1C_H: case T1L_L: case T1L_H: case T2C_L: case T2C_H: case SR: case ACR: case PCR: case IFR: case IER: case ORA_H: default: } return 0; }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,MemoryWindow.java,getValueAt,"public Object getValueAt(int row, int column) { try { if (column == 0) { return Utils.wordToHex(fullAddress(row, 1)); } else if (column < 9) { return Utils.byteToHex(bus.read(fullAddress(row, column), false)); } else { return Utils.byteToAscii(bus.read(fullAddress(row, column - 8), false)); } } catch (MemoryAccessException ex) { return ""??""; } }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest.java,shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled,"public void shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x06); acia.write(0, 'a'); verify(mockBus, never()).assertIrq(); acia.txRead(true); verify(mockBus, atLeastOnce()).assertIrq(); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest.java,shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled,"public void shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x02); acia.write(0, 'a'); acia.txRead(true); verify(mockBus, never()).assertIrq(); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest.java,newAciaShouldHaveTxEmptyStatus,"public void newAciaShouldHaveTxEmptyStatus() throws Exception { Acia acia = new Acia6551(0x000); assertEquals(0x10, acia.read(0x0001, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest.java,aciaShouldHaveTxEmptyStatusOffIfTxHasData,"public void aciaShouldHaveTxEmptyStatusOffIfTxHasData() throws Exception { Acia acia = new Acia6551(0x000); acia.txWrite('a'); assertEquals(0x00, acia.read(0x0001, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest.java,aciaShouldHaveRxFullStatusOffIfRxHasData,"public void aciaShouldHaveRxFullStatusOffIfRxHasData() throws Exception { Acia acia = new Acia6551(0x000); acia.rxWrite('a'); assertEquals(0x18, acia.read(0x0001, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest.java,aciaShouldOverrunAndMemoryWindowReadShouldNotReset,public void aciaShouldOverrunAndMemoryWindowReadShouldNotReset(),https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest.java,A,public void A(),https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest6850.java,shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled,"public void shouldTriggerInterruptOnTxEmptyIfTxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x20); acia.write(1, 'a'); verify(mockBus, never()).assertIrq(); acia.txRead(true); verify(mockBus, atLeastOnce()).assertIrq(); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest6850.java,shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled,"public void shouldNotTriggerInterruptOnTxEmptyIfTxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x02); acia.write(DATA_REG, 'a'); acia.txRead(true); verify(mockBus, never()).assertIrq(); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest6850.java,newAciaShouldHaveTxEmptyStatus,"public void newAciaShouldHaveTxEmptyStatus() throws Exception { Acia acia = newAcia(); assertEquals(0x02, acia.read(CMD_STAT_REG, true) & 0x02); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest6850.java,aciaShouldHaveTxEmptyStatusOffIfTxHasData,"public void aciaShouldHaveTxEmptyStatusOffIfTxHasData() throws Exception { Acia acia = newAcia(); acia.txWrite('a'); assertEquals(0x00, acia.read(CMD_STAT_REG, true) & 0x02); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,AciaTest6850.java,aciaShouldHaveRxFullStatusOnIfRxHasData,"public void aciaShouldHaveRxFullStatusOnIfRxHasData() throws Exception { Acia acia = newAcia(); acia.rxWrite('a'); assertEquals(0x01, acia.read(CMD_STAT_REG, true) & 0x01); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.write(0x7f00, 0x00); bus.write(0x7f01, 0x01); bus.write(0x3502, 0x02); bus.write(0x3503, 0x44); bus.write(0x1204, 0x80); bus.loadProgram(0x0e, 0x00, 0x7f, 0x0e, 0x01, 0x7f, 0x0e, 0x02, 0x35, 0x0e, 0x03, 0x35, 0x0e, 0x04, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x7f00, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x7f01, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x3502, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x3503, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1204, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_JSR,"public void test_JSR() throws MemoryAccessException { bus.loadProgram(0xea, 0xea, 0x20, 0x00, 0x34); cpu.step(3); assertEquals(0x3400, cpu.getProgramCounter()); assertEquals(0x02, bus.read(0x1ff, true)); assertEquals(0x04, bus.read(0x1fe, true)); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.write(0x1200, 0x00); bus.write(0x1201, 0x01); bus.loadProgram(0x2e, 0x00, 0x12, 0x2e, 0x01, 0x12, 0x38, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12, 0x2e, 0x01, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1200, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1201, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x1201, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x1201, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x1201, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x1201, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x1201, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x1201, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1201, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x1201, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.write(0x1200, 0x00); bus.write(0x1201, 0x01); bus.write(0x1202, 0x02); bus.write(0x1203, 0x44); bus.write(0x1204, 0x80); bus.write(0x1205, 0x02); bus.loadProgram(0x4e, 0x00, 0x12, 0x4e, 0x01, 0x12, 0x4e, 0x02, 0x12, 0x4e, 0x03, 0x12, 0x4e, 0x04, 0x12, 0x38, 0x4e, 0x05, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1200, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1201, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x1202, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0x1203, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1204, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x1205, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x10); bus.loadProgram(0x6e, 0x10, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12, 0x6e, 0x11, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0x1211, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x1211, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1211, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x1211, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1211, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0x1211, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1211, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0x1211, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0x1211, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setYRegister(0x00); bus.loadProgram(0x8c, 0x10, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x8c, 0x10, 0x12); cpu.step(); assertEquals(0x0f, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x8c, 0x10, 0x12); cpu.step(); assertEquals(0x80, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setAccumulator(0x00); bus.loadProgram(0x8d, 0x10, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x8d, 0x10, 0x12); cpu.step(); assertEquals(0x0f, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x8d, 0x10, 0x12); cpu.step(); assertEquals(0x80, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_STX,"public void test_STX() throws MemoryAccessException { cpu.setXRegister(0x00); bus.loadProgram(0x8e, 0x10, 0x12); cpu.step(); assertEquals(0x00, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x0f); bus.loadProgram(0x8e, 0x10, 0x12); cpu.step(); assertEquals(0x0f, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x80); bus.loadProgram(0x8e, 0x10, 0x12); cpu.step(); assertEquals(0x80, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_DEC,"public void test_DEC() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x01); bus.write(0x1212, 0x80); bus.write(0x1213, 0xff); bus.loadProgram(0xce, 0x10, 0x12, 0xce, 0x11, 0x12, 0xce, 0x12, 0x12, 0xce, 0x13, 0x12); cpu.step(); assertEquals(0xff, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1211, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0x1212, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0x1213, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteModeTest.java,test_INC,"public void test_INC() throws MemoryAccessException { bus.write(0x1210, 0x00); bus.write(0x1211, 0x7f); bus.write(0x1212, 0xff); bus.loadProgram(0xee, 0x10, 0x12, 0xee, 0x11, 0x12, 0xee, 0x12, 0x12); cpu.step(); assertEquals(0x01, bus.read(0x1210, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0x1211, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x1212, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteXModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.write(0x2c30, 0x00); bus.write(0x2c31, 0x01); bus.write(0x2c32, 0x02); bus.write(0x2c33, 0x44); bus.write(0x2c34, 0x80); cpu.setXRegister(0x30); bus.loadProgram(0x1e, 0x00, 0x2c, 0x1e, 0x01, 0x2c, 0x1e, 0x02, 0x2c, 0x1e, 0x03, 0x2c, 0x1e, 0x04, 0x2c); cpu.step(); assertEquals(0x00, bus.read(0x2c30, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x2c31, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x2c32, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x2c33, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x2c34, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteXModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.write(0x1070, 0x00); bus.write(0x1071, 0x01); cpu.setXRegister(0x70); bus.loadProgram(0x3e, 0x00, 0x10, 0x3e, 0x01, 0x10, 0x38, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10, 0x3e, 0x01, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x1070, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1071, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x1071, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x1071, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x1071, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x1071, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x1071, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x1071, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x1071, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x1071, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteXModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.write(0xab30, 0x00); bus.write(0xab31, 0x01); bus.write(0xab32, 0x02); bus.write(0xab33, 0x44); bus.write(0xab34, 0x80); bus.write(0xab35, 0x02); cpu.setXRegister(0x30); bus.loadProgram(0x5e, 0x00, 0xab, 0x5e, 0x01, 0xab, 0x5e, 0x02, 0xab, 0x5e, 0x03, 0xab, 0x5e, 0x04, 0xab, 0x38, 0x5e, 0x05, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab30, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab31, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0xab32, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0xab33, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0xab34, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0xab35, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteXModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0x10); bus.loadProgram(0x7e, 0x10, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab, 0x7e, 0x11, 0xab); cpu.setXRegister(0x30); cpu.step(); assertEquals(0x00, bus.read(0xab40, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0xab41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0xab41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0xab41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0xab41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab41, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0xab41, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0xab41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0xab41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0xab41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteXModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x0f); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x80); bus.loadProgram(0x9d, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteXModeTest.java,test_DEC,"public void test_DEC() throws MemoryAccessException { bus.write(0xab40, 0x00); bus.write(0xab41, 0x01); bus.write(0xab42, 0x80); bus.write(0xab43, 0xff); bus.loadProgram(0xde, 0x10, 0xab, 0xde, 0x11, 0xab, 0xde, 0x12, 0xab, 0xde, 0x13, 0xab); cpu.setXRegister(0x30); cpu.step(); assertEquals(0xff, bus.read(0xab40, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab41, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0xab42, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0xab43, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteXModeTest.java,test_INC,"public void test_INC() throws MemoryAccessException { bus.write(0xab30, 0x00); bus.write(0xab31, 0x7f); bus.write(0xab32, 0xff); cpu.setXRegister(0x20); bus.loadProgram(0xfe, 0x10, 0xab, 0xfe, 0x11, 0xab, 0xfe, 0x12, 0xab); cpu.step(); assertEquals(0x01, bus.read(0xab30, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0xab31, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0xab32, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuAbsoluteYModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setYRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x00, bus.read(0xab40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setAccumulator(0x0f); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x0f, bus.read(0xab40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setAccumulator(0x80); bus.loadProgram(0x99, 0x10, 0xab); cpu.step(); assertEquals(0x80, bus.read(0xab40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuImpliedModeTest.java,test_BRK,"public void test_BRK() throws MemoryAccessException { cpu.setCarryFlag(); cpu.setOverflowFlag(); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW, cpu.getProcessorStatus()); assertEquals(0x00, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(0xffff, 0x12); bus.write(0xfffe, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff, true)); assertEquals(0x05, bus.read(0x1fe, true)); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK, bus.read(0x1fd, true)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuImpliedModeTest.java,test_BRK_IgnoresIrqDisableFlag,"public void test_BRK_IgnoresIrqDisableFlag() throws MemoryAccessException { cpu.setIrqDisableFlag(); cpu.setCarryFlag(); cpu.setOverflowFlag(); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); assertEquals(0x00, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(0xffff, 0x12); bus.write(0xfffe, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff, true)); assertEquals(0x05, bus.read(0x1fe, true)); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_IRQ_DISABLE, bus.read(0x1fd, true)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuIndexedIndirectModeTest.java,test_ORA,"public void test_ORA() throws Exception { bus.write(0x0012, 0x1f); bus.write(0x0013, 0xc5); bus.write(0xc51f, 0x31); cpu.setXRegister(0x02); cpu.setAccumulator(0x15); bus.loadProgram(0x01, 0x10); cpu.step(1); assertEquals(0x35, cpu.getAccumulator()); assertEquals(0x31, bus.read(0xc51f, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuIndexedIndirectModeTest.java,test_AND,"public void test_AND() throws Exception { bus.write(0x0012, 0x1f); bus.write(0x0013, 0xc5); bus.write(0xc51f, 0x31); cpu.setXRegister(0x02); cpu.setAccumulator(0x15); bus.loadProgram(0x21, 0x10); cpu.step(1); assertEquals(0x11, cpu.getAccumulator()); assertEquals(0x31, bus.read(0xc51f, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuIndirectIndexedModeTest.java,test_ORA,"public void test_ORA() throws Exception { bus.write(0x0014, 0x00); bus.write(0x0015, 0xd8); bus.write(0xd828, 0xe3); cpu.setYRegister(0x28); cpu.setAccumulator(0x32); bus.loadProgram(0x11, 0x14); cpu.step(1); assertEquals(0xf3, cpu.getAccumulator()); assertEquals(0xe3, bus.read(0xd828, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuIndirectIndexedModeTest.java,test_AND,"public void test_AND() throws Exception { bus.write(0x0014, 0x00); bus.write(0x0015, 0xd8); bus.write(0xd828, 0xe3); cpu.setYRegister(0x28); cpu.setAccumulator(0x32); bus.loadProgram(0x31, 0x14); cpu.step(1); assertEquals(0x22, cpu.getAccumulator()); assertEquals(0xe3, bus.read(0xd828, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuTest.java,testStackPush,"public void testStackPush() throws MemoryAccessException { assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x00, bus.read(0x1ff, true)); cpu.stackPush(0x06); assertEquals(0xfe, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff, true)); cpu.stackPush(0x05); assertEquals(0xfd, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff, true)); assertEquals(0x05, bus.read(0x1fe, true)); cpu.stackPush(0x04); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff, true)); assertEquals(0x05, bus.read(0x1fe, true)); assertEquals(0x04, bus.read(0x1fd, true)); cpu.stackPush(0x03); assertEquals(0xfb, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff, true)); assertEquals(0x05, bus.read(0x1fe, true)); assertEquals(0x04, bus.read(0x1fd, true)); assertEquals(0x03, bus.read(0x1fc, true)); cpu.stackPush(0x02); assertEquals(0xfa, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff, true)); assertEquals(0x05, bus.read(0x1fe, true)); assertEquals(0x04, bus.read(0x1fd, true)); assertEquals(0x03, bus.read(0x1fc, true)); assertEquals(0x02, bus.read(0x1fb, true)); cpu.stackPush(0x01); assertEquals(0xf9, cpu.getStackPointer()); assertEquals(0x06, bus.read(0x1ff, true)); assertEquals(0x05, bus.read(0x1fe, true)); assertEquals(0x04, bus.read(0x1fd, true)); assertEquals(0x03, bus.read(0x1fc, true)); assertEquals(0x02, bus.read(0x1fb, true)); assertEquals(0x01, bus.read(0x1fa, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuTest.java,testStackPushWrapsAroundToStackTop,"public void testStackPushWrapsAroundToStackTop() throws MemoryAccessException { cpu.setStackPointer(0x01); cpu.stackPush(0x01); assertEquals(0x01, bus.read(0x101, true)); assertEquals(0x00, cpu.getStackPointer()); cpu.stackPush(0x02); assertEquals(0x02, bus.read(0x100, true)); assertEquals(0xff, cpu.getStackPointer()); cpu.stackPush(0x03); assertEquals(0x03, bus.read(0x1ff, true)); assertEquals(0xfe, cpu.getStackPointer()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.write(0x0000, 0x00); bus.write(0x0001, 0x01); bus.write(0x0002, 0x02); bus.write(0x0003, 0x44); bus.write(0x0004, 0x80); bus.loadProgram(0x06, 0x00, 0x06, 0x01, 0x06, 0x02, 0x06, 0x03, 0x06, 0x04); cpu.step(); assertEquals(0x00, bus.read(0x0000, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x0002, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x0003, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x0004, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.write(0x0000, 0x00); bus.write(0x0001, 0x01); bus.loadProgram(0x26, 0x00, 0x26, 0x01, 0x38, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01, 0x26, 0x01); cpu.step(); assertEquals(0x00, bus.read(0x0000, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x0001, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.write(0x0000, 0x00); bus.write(0x0001, 0x01); bus.write(0x0002, 0x02); bus.write(0x0003, 0x44); bus.write(0x0004, 0x80); bus.write(0x0005, 0x02); bus.loadProgram(0x46, 0x00, 0x46, 0x01, 0x46, 0x02, 0x46, 0x03, 0x46, 0x04, 0x38, 0x46, 0x05); cpu.step(); assertEquals(0x00, bus.read(0x0000, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x0001, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x0002, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0x0003, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x0004, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x0005, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x10); bus.loadProgram(0x66, 0x10, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11, 0x66, 0x11); cpu.step(); assertEquals(0x00, bus.read(0x10, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0x11, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x11, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x11, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x11, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x11, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0x11, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x11, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0x11, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0x11, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setYRegister(0x00); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x0f); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x80); bus.loadProgram(0x84, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setAccumulator(0x00); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x0f); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x80); bus.loadProgram(0x85, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageModeTest.java,test_STX,"public void test_STX() throws MemoryAccessException { cpu.setXRegister(0x00); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x0f); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x80); bus.loadProgram(0x86, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageModeTest.java,test_DEC,"public void test_DEC() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x01); bus.write(0x12, 0x80); bus.write(0x13, 0xff); bus.loadProgram(0xc6, 0x10, 0xc6, 0x11, 0xc6, 0x12, 0xc6, 0x13); cpu.step(); assertEquals(0xff, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x11, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0x12, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0x13, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageModeTest.java,test_INC,"public void test_INC() throws MemoryAccessException { bus.write(0x10, 0x00); bus.write(0x11, 0x7f); bus.write(0x12, 0xff); bus.loadProgram(0xe6, 0x10, 0xe6, 0x11, 0xe6, 0x12); cpu.step(); assertEquals(0x01, bus.read(0x10, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0x11, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x12, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageXModeTest.java,test_ASL,"public void test_ASL() throws MemoryAccessException { bus.write(0x30, 0x00); bus.write(0x31, 0x01); bus.write(0x32, 0x02); bus.write(0x33, 0x44); bus.write(0x34, 0x80); bus.write(0x02, 0x01); cpu.setXRegister(0x30); bus.loadProgram(0x16, 0x00, 0x16, 0x01, 0x16, 0x02, 0x16, 0x03, 0x16, 0x04, 0x16, 0xd2); cpu.step(); assertEquals(0x00, bus.read(0x30, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x31, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x32, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x88, bus.read(0x33, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x34, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x02, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageXModeTest.java,test_ROL,"public void test_ROL() throws MemoryAccessException { bus.write(0x70, 0x00); bus.write(0x71, 0x01); cpu.setXRegister(0x70); bus.loadProgram(0x36, 0x00, 0x36, 0x01, 0x38, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01); cpu.step(); assertEquals(0x00, bus.read(0x70, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x71, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x05, bus.read(0x71, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x0a, bus.read(0x71, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x14, bus.read(0x71, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x28, bus.read(0x71, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x50, bus.read(0x71, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0xa0, bus.read(0x71, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x71, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x81, bus.read(0x71, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageXModeTest.java,test_LSR,"public void test_LSR() throws MemoryAccessException { bus.write(0x30, 0x00); bus.write(0x31, 0x01); bus.write(0x32, 0x02); bus.write(0x33, 0x44); bus.write(0x34, 0x80); bus.write(0x35, 0x02); cpu.setXRegister(0x30); bus.loadProgram(0x56, 0x00, 0x56, 0x01, 0x56, 0x02, 0x56, 0x03, 0x56, 0x04, 0x38, 0x56, 0x05); cpu.step(); assertEquals(0x00, bus.read(0x30, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x31, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x32, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x22, bus.read(0x33, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x34, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(2); assertEquals(0x01, bus.read(0x35, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageXModeTest.java,test_ROR,"public void test_ROR() throws MemoryAccessException { bus.write(0x40, 0x00); bus.write(0x41, 0x10); bus.loadProgram(0x76, 0x10, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11, 0x76, 0x11); cpu.setXRegister(0x30); cpu.step(); assertEquals(0x00, bus.read(0x40, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x08, bus.read(0x41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x04, bus.read(0x41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x02, bus.read(0x41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x01, bus.read(0x41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x00, bus.read(0x41, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertTrue(cpu.getCarryFlag()); cpu.step(); assertEquals(0x80, bus.read(0x41, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x40, bus.read(0x41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x20, bus.read(0x41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); cpu.step(); assertEquals(0x10, bus.read(0x41, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getCarryFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageXModeTest.java,test_STY,"public void test_STY() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setYRegister(0x00); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setYRegister(0x0f); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setYRegister(0x80); bus.loadProgram(0x94, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageXModeTest.java,test_STA,"public void test_STA() throws MemoryAccessException { cpu.setXRegister(0x30); cpu.setAccumulator(0x00); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x0f); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setXRegister(0x30); cpu.setAccumulator(0x80); bus.loadProgram(0x95, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageXModeTest.java,test_DEC,"public void test_DEC() throws MemoryAccessException { bus.write(0x40, 0x00); bus.write(0x41, 0x01); bus.write(0x42, 0x80); bus.write(0x43, 0xff); bus.loadProgram(0xd6, 0x10, 0xd6, 0x11, 0xd6, 0x12, 0xd6, 0x13); cpu.setXRegister(0x30); cpu.step(); assertEquals(0xff, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x41, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x7f, bus.read(0x42, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xfe, bus.read(0x43, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageXModeTest.java,test_INC,"public void test_INC() throws MemoryAccessException { bus.write(0x30, 0x00); bus.write(0x31, 0x7f); bus.write(0x32, 0xff); cpu.setXRegister(0x20); bus.loadProgram(0xf6, 0x10, 0xf6, 0x11, 0xf6, 0x12); cpu.step(); assertEquals(0x01, bus.read(0x30, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x80, bus.read(0x31, true)); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, bus.read(0x32, true)); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CpuZeroPageYModeTest.java,test_STX,"public void test_STX() throws MemoryAccessException { cpu.setYRegister(0x30); cpu.setXRegister(0x00); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x00, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setXRegister(0x0f); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x0f, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setYRegister(0x30); cpu.setXRegister(0x80); bus.loadProgram(0x96, 0x10); cpu.step(); assertEquals(0x80, bus.read(0x40, true)); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CrtcTest.java,readingStartAddressShouldDoNothing,"public void readingStartAddressShouldDoNothing() throws Exception { crtc.write(0, 12); crtc.write(1, 0x03); assertEquals(0, crtc.read(1, true)); crtc.write(1, 0x70); assertEquals(0, crtc.read(1, true)); crtc.write(0, 13); crtc.write(1, 0xff); assertEquals(0, crtc.read(1, true)); crtc.write(1, 0x0e); assertEquals(0, crtc.read(1, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CrtcTest.java,shouldBeAbleToReadCursorPositionHighByte,"public void shouldBeAbleToReadCursorPositionHighByte() throws Exception { crtc.write(0, 14); crtc.write(1, 0x3f); assertEquals(0x3f, crtc.read(1, true)); crtc.write(1, 0x70); assertEquals(0x70, crtc.read(1, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
96819f1bf7bec02fdb6a6a297499a15ffbd011d0,CrtcTest.java,shouldBeAbleToReadCursorPositionLowByte,"public void shouldBeAbleToReadCursorPositionLowByte() throws Exception { crtc.write(0, 15); crtc.write(1, 0x00); assertEquals(0x00, crtc.read(1, true)); crtc.write(1, 0x1f); assertEquals(0x1f, crtc.read(1, true)); crtc.write(1, 0xff); assertEquals(0xff, crtc.read(1, true)); }",https://www.github.com/sethm/symon/commit/96819f1bf7bec02fdb6a6a297499a15ffbd011d0
f2ced29979f441fb911437a2c565cd019e9556b7,Acia.java,statusReg,public abstract int statusReg(boolean statusReg);,https://www.github.com/sethm/symon/commit/f2ced29979f441fb911437a2c565cd019e9556b7
f2ced29979f441fb911437a2c565cd019e9556b7,Acia.java,rxWrite,public synchronized void rxWrite(int data) { if (rxFull) { overrun = true; } rxFull = true; if (receiveIrqEnabled) { interrupt = true; getBus().assertIrq(); } rxChar = data; },https://www.github.com/sethm/symon/commit/f2ced29979f441fb911437a2c565cd019e9556b7
f2ced29979f441fb911437a2c565cd019e9556b7,Acia.java,txRead,public synchronized int txRead(boolean cpuAccess) { if (cpuAccess) { txEmpty = true; if (transmitIrqEnabled) { interrupt = true; getBus().assertIrq(); } } return txChar; },https://www.github.com/sethm/symon/commit/f2ced29979f441fb911437a2c565cd019e9556b7
f2ced29979f441fb911437a2c565cd019e9556b7,Acia6551.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { switch (address) { case DATA_REG: return rxRead(cpuAccess); case STAT_REG: return statusReg(cpuAccess); case CMND_REG: return commandRegister; case CTRL_REG: return controlRegister; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/f2ced29979f441fb911437a2c565cd019e9556b7
f2ced29979f441fb911437a2c565cd019e9556b7,Acia6551.java,statusReg,public int statusReg(boolean cpuAccess) { int stat = 0; if (rxFull && System.nanoTime() >= (lastRxRead + baudRateDelay)) { stat |= 0x08; } if (txEmpty && System.nanoTime() >= (lastTxWrite + baudRateDelay)) { stat |= 0x10; } if (overrun) { stat |= 0x04; } if (interrupt) { stat |= 0x80; } if (cpuAccess) { interrupt = false; } return stat; },https://www.github.com/sethm/symon/commit/f2ced29979f441fb911437a2c565cd019e9556b7
f2ced29979f441fb911437a2c565cd019e9556b7,Acia6551.java,reset,private synchronized void reset() { txChar = 0; txEmpty = true; rxChar = 0; rxFull = false; receiveIrqEnabled = false; transmitIrqEnabled = false; interrupt = false; },https://www.github.com/sethm/symon/commit/f2ced29979f441fb911437a2c565cd019e9556b7
f2ced29979f441fb911437a2c565cd019e9556b7,Acia6850.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { switch (address) { case RX_REG: return rxRead(cpuAccess); case STAT_REG: return statusReg(cpuAccess); default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/f2ced29979f441fb911437a2c565cd019e9556b7
f2ced29979f441fb911437a2c565cd019e9556b7,Acia6850.java,statusReg,public int statusReg(boolean cpuAccess) { int stat = 0; if (rxFull && System.nanoTime() >= (lastRxRead + baudRateDelay)) { stat |= 0x01; } if (txEmpty && System.nanoTime() >= (lastTxWrite + baudRateDelay)) { stat |= 0x02; } if (overrun) { stat |= 0x20; } if (interrupt) { stat |= 0x80; } if (cpuAccess) { interrupt = false; } return stat; },https://www.github.com/sethm/symon/commit/f2ced29979f441fb911437a2c565cd019e9556b7
f2ced29979f441fb911437a2c565cd019e9556b7,Acia6850.java,reset,private synchronized void reset() { overrun = false; rxFull = false; txEmpty = true; interrupt = false; },https://www.github.com/sethm/symon/commit/f2ced29979f441fb911437a2c565cd019e9556b7
356822df711609561168ef0f96bb2ea2f9f04339,Acia.java,statusReg,public abstract int statusReg(boolean cpuAccess);,https://www.github.com/sethm/symon/commit/356822df711609561168ef0f96bb2ea2f9f04339
92f8fe3dd9f5c589c9044a7e473cfbeb3d2c2318,Acia6850.java,read,"public int read(int address, boolean cpuAccess) throws MemoryAccessException { switch (address) { case RX_REG: if (cpuAccess) { interrupt = false; } return rxRead(cpuAccess); case STAT_REG: return statusReg(cpuAccess); default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/92f8fe3dd9f5c589c9044a7e473cfbeb3d2c2318
92f8fe3dd9f5c589c9044a7e473cfbeb3d2c2318,Acia6850.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case TX_REG: if (cpuAccess) { interrupt = false; } txWrite(data); break; case CTRL_REG: setCommandRegister(data); break; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/92f8fe3dd9f5c589c9044a7e473cfbeb3d2c2318
92f8fe3dd9f5c589c9044a7e473cfbeb3d2c2318,Acia6850.java,statusReg,public int statusReg(boolean cpuAccess) { int stat = 0; if (rxFull && System.nanoTime() >= (lastRxRead + baudRateDelay)) { stat |= 0x01; } if (txEmpty && System.nanoTime() >= (lastTxWrite + baudRateDelay)) { stat |= 0x02; } if (overrun) { stat |= 0x20; } if (interrupt) { stat |= 0x80; } return stat; },https://www.github.com/sethm/symon/commit/92f8fe3dd9f5c589c9044a7e473cfbeb3d2c2318
faf5d22660e51e9d4a112b32e62fabc5c699fea2,Acia6850Test.java,shouldTriggerInterruptFlagOnRxFullIfRxIrqEnabled,"public void shouldTriggerInterruptFlagOnRxFullIfRxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x80); acia.rxWrite('a'); assertEquals(0x80, acia.read(0x0000, true) & 0x80); }",https://www.github.com/sethm/symon/commit/faf5d22660e51e9d4a112b32e62fabc5c699fea2
faf5d22660e51e9d4a112b32e62fabc5c699fea2,Acia6850Test.java,shouldNotTriggerInterruptFlagOnRxFullIfRxIrqNotEnabled,"public void shouldNotTriggerInterruptFlagOnRxFullIfRxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x00); acia.rxWrite('a'); assertEquals(0x00, acia.read(0x0000, true) & 0x80); }",https://www.github.com/sethm/symon/commit/faf5d22660e51e9d4a112b32e62fabc5c699fea2
faf5d22660e51e9d4a112b32e62fabc5c699fea2,Acia6850Test.java,shouldTriggerInterruptFlagOnTxEmptyIfTxIrqEnabled,"public void shouldTriggerInterruptFlagOnTxEmptyIfTxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x20); acia.write(1, 'a'); verify(mockBus, never()).assertIrq(); acia.txRead(true); assertEquals(0x80, acia.read(0x0000, true) & 0x80); }",https://www.github.com/sethm/symon/commit/faf5d22660e51e9d4a112b32e62fabc5c699fea2
faf5d22660e51e9d4a112b32e62fabc5c699fea2,Acia6850Test.java,shouldNotTriggerInterruptFlagOnTxEmptyIfTxIrqNotEnabled,"public void shouldNotTriggerInterruptFlagOnTxEmptyIfTxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = newAcia(); acia.setBus(mockBus); acia.write(CMD_STAT_REG, 0x02); acia.write(DATA_REG, 'a'); acia.txRead(true); assertEquals(0x00, acia.read(0x0000, true) & 0x80); }",https://www.github.com/sethm/symon/commit/faf5d22660e51e9d4a112b32e62fabc5c699fea2
faf5d22660e51e9d4a112b32e62fabc5c699fea2,AciaTest.java,shouldTriggerInterruptFlagOnRxFullIfRxIrqEnabled,"public void shouldTriggerInterruptFlagOnRxFullIfRxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x00); acia.rxWrite('a'); assertEquals(0x80, acia.read(0x0001, true) & 0x80); }",https://www.github.com/sethm/symon/commit/faf5d22660e51e9d4a112b32e62fabc5c699fea2
faf5d22660e51e9d4a112b32e62fabc5c699fea2,AciaTest.java,shouldNotTriggerInterruptFlagOnRxFullIfRxIrqNotEnabled,"public void shouldNotTriggerInterruptFlagOnRxFullIfRxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x02); acia.rxWrite('a'); assertEquals(0x00, acia.read(0x0001, true) & 0x80); }",https://www.github.com/sethm/symon/commit/faf5d22660e51e9d4a112b32e62fabc5c699fea2
faf5d22660e51e9d4a112b32e62fabc5c699fea2,AciaTest.java,shouldTriggerInterruptFlagOnTxEmptyIfTxIrqEnabled,"public void shouldTriggerInterruptFlagOnTxEmptyIfTxIrqEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x06); acia.write(0, 'a'); verify(mockBus, never()).assertIrq(); acia.txRead(true); assertEquals(0x80, acia.read(0x0001, true) & 0x80); }",https://www.github.com/sethm/symon/commit/faf5d22660e51e9d4a112b32e62fabc5c699fea2
faf5d22660e51e9d4a112b32e62fabc5c699fea2,AciaTest.java,shouldNotTriggerInterruptFlagOnTxEmptyIfTxIrqNotEnabled,"public void shouldNotTriggerInterruptFlagOnTxEmptyIfTxIrqNotEnabled() throws Exception { Bus mockBus = mock(Bus.class); Acia acia = new Acia6551(0x000); acia.setBus(mockBus); acia.write(2, 0x02); acia.write(0, 'a'); acia.txRead(true); assertEquals(0x00, acia.read(0x0001, true) & 0x80); }",https://www.github.com/sethm/symon/commit/faf5d22660e51e9d4a112b32e62fabc5c699fea2
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu.java,step,"public void step() throws MemoryAccessException { opBeginTime = System.nanoTime(); state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(state.pc); } state.ir = bus.read(state.pc, true); int irAddressMode = (state.ir >> 2) & 0x07; int irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc, true); incrementPC(); } state.stepCounter++; int effectiveAddress = 0; int tmp; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = Utils.address(state.args[0], state.args[1]); break; case 4: if (behavior == CpuBehavior.CMOS_6502 || behavior == CpuBehavior.CMOS_65816) { effectiveAddress = Utils.address(bus.read(state.args[0], true), bus.read((state.args[0] + 1) & 0xff, true)); } break; case 5: if (state.ir == 0x14) { effectiveAddress = state.args[0]; } else if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0x9c || state.ir == 0x1c) { effectiveAddress = Utils.address(state.args[0], state.args[1]); } else if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 3: switch (irAddressMode) { case 1: case 3: case 5: case 7: effectiveAddress = state.args[0]; break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = Utils.address(bus.read(tmp, true), bus.read(tmp + 1, true)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = Utils.address(state.args[0], state.args[1]); break; case 4: tmp = Utils.address(bus.read(state.args[0], true), bus.read((state.args[0] + 1) & 0xff, true)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: handleBrk(state.pc + 1); break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = Utils.address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); int lo = stackPop(); int hi = stackPop(); setProgramCounter(Utils.address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x5a: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } stackPush(state.y); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((Utils.address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x7a: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } state.y = stackPop(); setArithmeticFlags(state.y); break; case 0x80: if (behavior == CpuBehavior.CMOS_6502 || behavior == CpuBehavior.CMOS_65816) { state.pc = relAddress(state.args[0]); } break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xda: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } stackPush(state.x); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0xfa: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } state.x = stackPop(); setArithmeticFlags(state.x); break; case 0x4c: state.pc = Utils.address(state.args[0], state.args[1]); break; case 0x6c: lo = Utils.address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = Utils.address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = Utils.address(bus.read(lo, true), bus.read(hi, true)); break; case 0x7c: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } lo = (((state.args[1] << 8) | state.args[0]) + state.x) & 0xffff; hi = lo + 1; state.pc = Utils.address(bus.read(lo, true), bus.read(hi, true)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x12: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x89: setZeroFlag((state.a & state.args[0]) == 0); break; case 0x34: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x24: case 0x2c: case 0x3c: tmp = bus.read(effectiveAddress, true); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x32: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x52: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x72: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress, true)); } else { state.a = adc(state.a, bus.read(effectiveAddress, true)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x92: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0x64: case 0x74: case 0x9c: case 0x9e: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } bus.write(effectiveAddress, 0); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress, true); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress, true); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xb2: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress, true)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xd2: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress, true)); break; case 0x3a: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } state.a = --state.a & 0xFF; setArithmeticFlags(state.a); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress, true) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress, true)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xf2: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress, true)); } else { state.a = sbc(state.a, bus.read(effectiveAddress, true)); } break; case 0x1a: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } state.a = ++state.a & 0xff; setArithmeticFlags(state.a); break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress, true) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x07: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 0); bus.write(effectiveAddress, tmp); break; case 0x17: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 1); bus.write(effectiveAddress, tmp); break; case 0x27: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 2); bus.write(effectiveAddress, tmp); break; case 0x37: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 3); bus.write(effectiveAddress, tmp); break; case 0x47: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 4); bus.write(effectiveAddress, tmp); break; case 0x57: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 5); bus.write(effectiveAddress, tmp); break; case 0x67: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 6); bus.write(effectiveAddress, tmp); break; case 0x77: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 7); bus.write(effectiveAddress, tmp); break; case 0x87: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1); bus.write(effectiveAddress, tmp); break; case 0x97: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 1); bus.write(effectiveAddress, tmp); break; case 0xa7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 2); bus.write(effectiveAddress, tmp); break; case 0xb7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 3); bus.write(effectiveAddress, tmp); break; case 0xc7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 4); bus.write(effectiveAddress, tmp); break; case 0xd7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 5); bus.write(effectiveAddress, tmp); break; case 0xe7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 6); bus.write(effectiveAddress, tmp); break; case 0xf7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 7); bus.write(effectiveAddress, tmp); break; case 0x14: case 0x1c: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); setZeroFlag((state.a & tmp) == 0); tmp = (tmp &= ~(state.a)) & 0xff; bus.write(effectiveAddress,tmp); break; case 0x04: case 0x0c: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); setZeroFlag((state.a & tmp) == 0); tmp = (tmp |= (state.a)) & 0xff; bus.write(effectiveAddress,tmp); break; case 0x0f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 0) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x1f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 1) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x2f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 2) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x3f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 3) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x4f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 4) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x5f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 5) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x6f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 6) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x7f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 7) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x8f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 0) > 0) { state.pc = relAddress(state.args[1]); } break; case 0x9f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 1) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xaf: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 2) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xbf: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 3) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xcf: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 4) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xdf: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 5) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xef: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 6) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xff: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1 << 7) > 0) { state.pc = relAddress(state.args[1]); } break; default: setOpTrap(); break; } delayLoop(state.ir); peekAhead(); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu.java,handleInterrupt,"private void handleInterrupt(int returnPc, int vectorLow, int vectorHigh, boolean isBreak) throws MemoryAccessException { if (isBreak) { setBreakFlag(); } else { clearBreakFlag(); } stackPush((returnPc >> 8) & 0xff); stackPush(returnPc & 0xff); stackPush(state.getStatusFlag()); setIrqDisableFlag(); if (behavior == CpuBehavior.CMOS_6502|| behavior == CpuBehavior.CMOS_65816) { clearDecimalModeFlag(); } state.pc = Utils.address(bus.read(vectorLow, true), bus.read(vectorHigh, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu.java,adcDecimal,"private int adcDecimal(int acc, int operand) { int l, h, result; l = (acc & 0x0f) + (operand & 0x0f) + getCarryBit(); if ((l & 0xff) > 9) l += 6; h = (acc >> 4) + (operand >> 4) + (l > 15 ? 1 : 0); if ((h & 0xff) > 9) h += 6; result = (l & 0x0f) | (h << 4); result &= 0xff; setCarryFlag(h > 15); setZeroFlag(result == 0); setOverflowFlag(false); if (behavior == CpuBehavior.NMOS_6502|| behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { setNegativeFlag(false); } else { state.negativeFlag = (result & 0x80) != 0; } return result; }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu.java,sbcDecimal,"private int sbcDecimal(int acc, int operand) { int l, h, result; l = (acc & 0x0f) - (operand & 0x0f) - (state.carryFlag ? 0 : 1); if ((l & 0x10) != 0) l -= 6; h = (acc >> 4) - (operand >> 4) - ((l & 0x10) != 0 ? 1 : 0); if ((h & 0x10) != 0) h -= 6; result = (l & 0x0f) | (h << 4) & 0xff; setCarryFlag((h & 0xff) < 15); setZeroFlag(result == 0); setOverflowFlag(false); if (behavior == CpuBehavior.NMOS_6502|| behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { setNegativeFlag(false); } else { state.negativeFlag = (result & 0x80) != 0; } return (result & 0xff); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu.java,delayLoop,"private void delayLoop(int opcode) { final int clockSteps; if (behavior == CpuBehavior.NMOS_WITH_ROR_BUG || behavior == CpuBehavior.NMOS_6502) { clockSteps = Cpu.instructionClocksNmos[0xff & opcode]; } else { clockSteps = Cpu.instructionClocksCmos[0xff & opcode]; } if (clockSteps == 0) { logger.warn(""Opcode {} has clock step of 0!"", String.format(""0x%02x"", opcode)); return; } long interval = clockSteps * clockPeriodInNs; long end; do { end = System.nanoTime(); } while (opBeginTime + interval >= end); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu.java,disassembleOp,"public static String disassembleOp(int opCode, int[] args) { String mnemonic = opcodeNames[opCode]; if (mnemonic == null) { return ""???""; } StringBuilder sb = new StringBuilder(mnemonic); switch (instructionModes[opCode]) { case ABS: sb.append("" $"").append(Utils.wordToHex(Utils.address(args[0], args[1]))); break; case AIX: sb.append("" ($"").append(Utils.wordToHex(Utils.address(args[0], args[1]))).append("",X)""); case ABX: sb.append("" $"").append(Utils.wordToHex(Utils.address(args[0], args[1]))).append("",X""); break; case ABY: sb.append("" $"").append(Utils.wordToHex(Utils.address(args[0], args[1]))).append("",Y""); break; case IMM: sb.append("" #$"").append(Utils.byteToHex(args[0])); break; case IND: sb.append("" ($"").append(Utils.wordToHex(Utils.address(args[0], args[1]))).append("")""); break; case XIN: sb.append("" ($"").append(Utils.byteToHex(args[0])).append("",X)""); break; case INY: sb.append("" ($"").append(Utils.byteToHex(args[0])).append(""),Y""); break; case REL: case ZPR: case ZPG: sb.append("" $"").append(Utils.byteToHex(args[0])); break; case ZPX: sb.append("" $"").append(Utils.byteToHex(args[0])).append("",X""); break; case ZPY: sb.append("" $"").append(Utils.byteToHex(args[0])).append("",Y""); break; } return sb.toString(); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,InstructionTable.java,toString,"public String toString() { return ""Absolute, X-Indexed Indirect""; }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,InstructionTable.java,toString,"public String toString() { return ""Zero Page""; }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,InstructionTable.java,toString,"public String toString() { return ""Zero Page, Relative""; }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,InstructionTable.java,toString,"public String toString() { return ""Zero Page, X-indexed""; }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,InstructionTable.java,toString,"public String toString() { return ""Zero Page, Y-indexed""; }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,InstructionTable.java,toString,"public String toString() { return ""Zero Page Indirect""; }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Simulator.java,actionPerformed,public void actionPerformed(ActionEvent actionEvent) { machine.getCpu().setBehavior(behavior); },https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); fileMenu.add(loadProgramItem); if (machine.getRom() != null) { loadRomItem = new JMenuItem(new LoadRomAction()); fileMenu.add(loadRomItem); } JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); fileMenu.add(prefsItem); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); final JCheckBoxMenuItem showTraceLog = new JCheckBoxMenuItem(new ToggleTraceWindowAction()); traceLog.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); } }); viewMenu.add(showTraceLog); final JCheckBoxMenuItem showMemoryTable = new JCheckBoxMenuItem(new ToggleMemoryWindowAction()); memoryWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); } }); viewMenu.add(showMemoryTable); if (videoWindow != null) { final JCheckBoxMenuItem showVideoWindow = new JCheckBoxMenuItem(new ToggleVideoWindowAction()); videoWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showVideoWindow.setSelected(false); } }); viewMenu.add(showVideoWindow); } add(viewMenu); JMenu simulatorMenu = new JMenu(""Simulator""); JMenuItem selectMachineItem = new JMenuItem(new SelectMachineAction()); simulatorMenu.add(selectMachineItem); JMenu cpuTypeMenu = new JMenu(""CPU""); ButtonGroup cpuGroup = new ButtonGroup(); makeCpuMenuItem(""NMOS 6502"", Cpu.CpuBehavior.NMOS_6502, cpuTypeMenu, cpuGroup); makeCpuMenuItem(""CMOS 65C02"", Cpu.CpuBehavior.CMOS_6502, cpuTypeMenu, cpuGroup); JMenu speedSubMenu = new JMenu(""Clock Speed""); ButtonGroup speedGroup = new ButtonGroup(); makeSpeedMenuItem(1, speedSubMenu, speedGroup); makeSpeedMenuItem(2, speedSubMenu, speedGroup); makeSpeedMenuItem(4, speedSubMenu, speedGroup); makeSpeedMenuItem(8, speedSubMenu, speedGroup); simulatorMenu.add(speedSubMenu); simulatorMenu.add(cpuTypeMenu); final JCheckBoxMenuItem showBreakpoints = new JCheckBoxMenuItem(new ToggleBreakpointWindowAction()); breakpointsWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showBreakpoints.setSelected(false); } }); simulatorMenu.add(showBreakpoints); add(simulatorMenu); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Simulator.java,makeCpuMenuItem,"private void makeCpuMenuItem(String cpu, Cpu.CpuBehavior behavior, JMenu subMenu, ButtonGroup group) { Action action = new SetCpuAction(cpu, behavior); JCheckBoxMenuItem item = new JCheckBoxMenuItem(action); item.setSelected(machine.getCpu().getBehavior() == behavior); subMenu.add(item); group.add(item); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteModeTest.java,makeCmosCpu,private void makeCmosCpu() throws Exception { makeCpu(InstructionTable.CpuBehavior.CMOS_6502); },https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteModeTest.java,makeNmosCpu,private void makeNmosCpu() throws Exception { makeCpu(InstructionTable.CpuBehavior.NMOS_6502); },https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteModeTest.java,makeCpu,"private void makeCpu(InstructionTable.CpuBehavior behavior) throws Exception { this.cpu = new Cpu(behavior); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0xffff); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteModeTest.java,test_STZ,"public void test_STZ() throws Exception { makeCmosCpu(); bus.write(0x0010,0xff); bus.loadProgram(0x9c, 0x10, 0x00); assertEquals(0xff, bus.read(0x0010, true)); cpu.step(); assertEquals(0x00, bus.read(0x0010, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteModeTest.java,test_STZRequiresCmosCpu,"public void test_STZRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.write(0x0010,0xff); bus.loadProgram(0x9c, 0x10, 0x00); assertEquals(0xff, bus.read(0x0010, true)); cpu.step(); assertEquals(0xff, bus.read(0x0010, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteModeTest.java,test_TSB,"public void test_TSB() throws Exception { makeCmosCpu(); bus.loadProgram(0x0c, 0x10, 0x00); bus.write(0x10, 0x01); cpu.setAccumulator(0x01); cpu.step(); assertEquals(0x01,bus.read(0x10,true)); assertFalse(cpu.getZeroFlag()); cpu.reset(); cpu.setAccumulator(0x02); cpu.step(); assertEquals(0x03,bus.read(0x0010,true)); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteModeTest.java,test_TSBRequiresCmosCpu,"public void test_TSBRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.loadProgram(0x0c, 0x10, 0x00); bus.write(0x10, 0x00); cpu.setAccumulator(0x01); cpu.step(); assertEquals(0x00,bus.read(0x0010,true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteModeTest.java,test_TRB,"public void test_TRB() throws Exception { makeCmosCpu(); bus.loadProgram(0x1c, 0x00, 0x01); bus.write(0x0100, 0x03); cpu.setAccumulator(0x01); cpu.step(); assertEquals(0x02,bus.read(0x0100,true)); assertFalse(cpu.getZeroFlag()); cpu.reset(); cpu.setAccumulator(0x01); cpu.step(); assertEquals(0x02,bus.read(0x0100,true)); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteModeTest.java,test_TRBRequiresCmosCpu,"public void test_TRBRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.loadProgram(0x1c, 0x00, 0x01); bus.write(0x0100, 0xff); cpu.setAccumulator(0x01); cpu.step(); assertEquals(0xff,bus.read(0x0100,true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteXModeTest.java,test_STZ,"public void test_STZ() throws Exception { makeCmosCpu(); bus.write(0x0011,0xff); bus.loadProgram(0x9e, 0x10, 0x00); cpu.setXRegister(0x01); assertEquals(0xff, bus.read(0x0011, true)); cpu.step(); assertEquals(0x00, bus.read(0x0011, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteXModeTest.java,test_STZRequiresCmosCpu,"public void test_STZRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.write(0x0011,0xff); bus.loadProgram(0x9e, 0x10, 0x00); cpu.setXRegister(0x01); assertEquals(0xff, bus.read(0x0011, true)); cpu.step(); assertEquals(0xff, bus.read(0x0011, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteXModeTest.java,test_JMP_Indirect_Absolute_X,"public void test_JMP_Indirect_Absolute_X () throws Exception { makeCmosCpu(); bus.write(0x304,00); bus.write(0x0305,04); bus.loadProgram(0x7c, 0x00, 0x03); cpu.setXRegister(0x04); cpu.step(); assertEquals(0x0400,cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02AbsoluteXModeTest.java,test_JMP_Indirect_Absolute_XRequiresCmosCpu,"public void test_JMP_Indirect_Absolute_XRequiresCmosCpu () throws Exception { makeNmosCpu(); bus.write(0x304,00); bus.write(0x0305,04); bus.loadProgram(0x7c, 0x00, 0x03); cpu.setXRegister(0x04); cpu.step(); assertEquals(0x0203,cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImmediateModeTest.java,test_BIT_Immediate,"public void test_BIT_Immediate() throws Exception { makeCmosCpu(); bus.loadProgram(0x89, 0xF1); cpu.setAccumulator(0x02); cpu.step(); assertTrue(cpu.getZeroFlag()); assertEquals(0x02,cpu.getAccumulator()); assertFalse(cpu.getNegativeFlag()); assertFalse(cpu.getOverflowFlag()); cpu.reset(); cpu.setAccumulator(0x01); cpu.step(); assertFalse(cpu.getZeroFlag()); assertEquals(0x01,cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImmediateModeTest.java,test_BIT_ImmediateRequiresCmosCpu,"public void test_BIT_ImmediateRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.loadProgram(0x89, 0xF1); cpu.step(); cpu.setAccumulator(0x01); assertTrue(cpu.getZeroFlag()); assertEquals(0x01,cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_PHX,"public void test_PHX() throws Exception { makeCmosCpu(); cpu.stackPush(0x00); cpu.setXRegister(0xff); bus.loadProgram(0xda); assertEquals(cpu.stackPeek(), 0x00); cpu.step(); assertEquals(cpu.stackPeek(), 0xff); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_PHXRequiresCmosCpu,"public void test_PHXRequiresCmosCpu() throws Exception { makeNmosCpu(); cpu.stackPush(0x00); cpu.setXRegister(0xff); bus.loadProgram(0xda); assertEquals(cpu.stackPeek(), 0x00); cpu.step(); assertEquals(cpu.stackPeek(), 0x00); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_PLX,"public void test_PLX() throws Exception { makeCmosCpu(); cpu.stackPush(0xff); cpu.setXRegister(0x00); bus.loadProgram(0xfa); assertEquals(0x00, cpu.getXRegister()); cpu.step(); assertEquals(0xff, cpu.getXRegister()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_PLXRequiresCmosCpu,"public void test_PLXRequiresCmosCpu() throws Exception { makeNmosCpu(); cpu.stackPush(0xff); cpu.setXRegister(0x00); bus.loadProgram(0xfa); assertEquals(0x00, cpu.getXRegister()); cpu.step(); assertEquals(0x00, cpu.getXRegister()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_PHY,"public void test_PHY() throws Exception { makeCmosCpu(); cpu.stackPush(0x00); cpu.setYRegister(0xff); bus.loadProgram(0x5a); assertEquals(0x00, cpu.stackPeek()); cpu.step(); assertEquals(0xff, cpu.stackPeek()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_PHYRequiresCmosCpu,"public void test_PHYRequiresCmosCpu() throws Exception { makeNmosCpu(); cpu.stackPush(0x00); cpu.setYRegister(0xff); bus.loadProgram(0x5a); assertEquals(0x00, cpu.stackPeek()); cpu.step(); assertEquals(0x00, cpu.stackPeek()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_PLY,"public void test_PLY() throws Exception { makeCmosCpu(); cpu.stackPush(0xff); cpu.setYRegister(0x00); bus.loadProgram(0x7a); assertEquals(0x00, cpu.getYRegister()); cpu.step(); assertEquals(0xff, cpu.getYRegister()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_PLYRequiresCmosCpu,"public void test_PLYRequiresCmosCpu() throws Exception { makeNmosCpu(); cpu.stackPush(0xff); cpu.setYRegister(0x00); bus.loadProgram(0x7a); assertEquals(0x00, cpu.getYRegister()); cpu.step(); assertEquals(0x00, cpu.getYRegister()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_INC_A,"public void test_INC_A() throws Exception { makeCmosCpu(); cpu.setAccumulator(0x10); bus.loadProgram(0x1a); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0xff); cpu.step(); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x7F); cpu.step(); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_INC_ARequiresCmosCpu,"public void test_INC_ARequiresCmosCpu() throws Exception { makeNmosCpu(); cpu.setAccumulator(0x10); bus.loadProgram(0x1a); cpu.step(); assertEquals(0x10, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_DEC_A,"public void test_DEC_A() throws Exception { makeCmosCpu(); cpu.setAccumulator(0x10); bus.loadProgram(0x3a); cpu.step(); assertEquals(0x0F, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x01); cpu.step(); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.reset(); cpu.setAccumulator(0x00); cpu.step(); assertTrue(cpu.getNegativeFlag()); assertFalse(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_DEC_ARequiresCmosCpu,"public void test_DEC_ARequiresCmosCpu() throws Exception { makeNmosCpu(); cpu.setAccumulator(0x10); bus.loadProgram(0x3a); cpu.step(); assertEquals(0x10, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ImpliedModeTest.java,test_BRK_clearsDecimalModeFlag,"public void test_BRK_clearsDecimalModeFlag() throws Exception { makeCmosCpu(); cpu.setDecimalModeFlag(); assertEquals(0x00, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertTrue(cpu.getDecimalModeFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(0xffff, 0x12); bus.write(0xfffe, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); assertTrue(cpu.getDecimalModeFlag()); cpu.step(); assertEquals(0x02, bus.read(0x1ff, true)); assertEquals(0x05, bus.read(0x1fe, true)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertTrue(cpu.getBreakFlag()); assertFalse(cpu.getDecimalModeFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_STZ,"public void test_STZ() throws Exception { makeCmosCpu(); bus.write(0x0000,0xff); bus.loadProgram(0x64,0x00); assertEquals(0xff,bus.read(0x00, true)); cpu.step(); assertEquals(0x00,bus.read(0x00, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_STZRequiresCmosCpu,"public void test_STZRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.write(0x0000,0xff); bus.loadProgram(0x64,0x00); assertEquals(0xff,bus.read(0x00, true)); cpu.step(); assertEquals(0xff,bus.read(0x00, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_SMB,"public void test_SMB() throws Exception { makeCmosCpu(); bus.loadProgram(0x87,0x01, 0x97,0x01, 0xa7,0x01, 0xb7,0x01, 0xc7,0x01, 0xd7,0x01, 0xe7,0x01, 0xf7,0x01); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(1 << 0,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(1 << 1,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(1 << 2,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(1 << 3,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(1 << 4,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(1 << 5,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(1 << 6,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(1 << 7,bus.read(0x0001, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_SMBRequiresCmosCpu,"public void test_SMBRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.loadProgram(0x87,0x01, 0x97,0x01, 0xa7,0x01, 0xb7,0x01, 0xc7,0x01, 0xd7,0x01, 0xe7,0x01, 0xf7,0x01); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(0x00,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(0x00,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(0x00,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(0x00,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(0x00,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(0x00,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(0x00,bus.read(0x0001, true)); bus.write(0x01,0x00); assertEquals(0x00,bus.read(0x0001, true)); cpu.step(); assertEquals(0x00,bus.read(0x0001, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_RMB,"public void test_RMB() throws Exception { makeCmosCpu(); bus.loadProgram(0x07,0x01, 0x17,0x01, 0x27,0x01, 0x37,0x01, 0x47,0x01, 0x57,0x01, 0x67,0x01, 0x77,0x01); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xfe,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xfd,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xfb,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xf7,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xef,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xdf,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xbf,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0x7f,bus.read(0x0001, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_RMBRequiresCmosCpu,"public void test_RMBRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.loadProgram(0x07,0x01, 0x17,0x01, 0x27,0x01, 0x37,0x01, 0x47,0x01, 0x57,0x01, 0x67,0x01, 0x77,0x01); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xff,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xff,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xff,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xff,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xff,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xff,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xff,bus.read(0x0001, true)); bus.write(0x01,0xff); assertEquals(0xff,bus.read(0x0001, true)); cpu.step(); assertEquals(0xff,bus.read(0x0001, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_TSB,"public void test_TSB() throws Exception { makeCmosCpu(); bus.loadProgram(0x04, 0x10); bus.write(0x10, 0x01); cpu.setAccumulator(0x03); cpu.step(); assertEquals(0x03,bus.read(0x10,true)); assertFalse(cpu.getZeroFlag()); cpu.reset(); bus.write(0x10, 0x01); cpu.setAccumulator(0x02); cpu.step(); assertEquals(0x03,bus.read(0x10,true)); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_TSBRequiresCmosCpu,"public void test_TSBRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.loadProgram(0x04, 0x10); bus.write(0x10, 0x01); cpu.setAccumulator(0x03); cpu.step(); assertEquals(0x01,bus.read(0x10,true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_TRB,"public void test_TRB() throws Exception { makeCmosCpu(); cpu.reset(); bus.loadProgram(0x14, 0x40); bus.write(0x0040, 0xff); cpu.setAccumulator(0x01); cpu.step(); assertEquals(0xfe,bus.read(0x0040,true)); assertFalse(cpu.getZeroFlag()); cpu.reset(); cpu.setAccumulator(0x01); cpu.step(); assertEquals(0xfe,bus.read(0x0040,true)); assertTrue(cpu.getZeroFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageModeTest.java,test_TRBRequiresCmosCpu,"public void test_TRBRequiresCmosCpu() throws Exception { makeNmosCpu(); cpu.reset(); bus.loadProgram(0x14, 0x40); bus.write(0x0040, 0xff); cpu.setAccumulator(0x01); cpu.step(); assertEquals(0xff,bus.read(0x0040,true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageRelativeTest.java,test_BRA,"public void test_BRA() throws Exception { makeCmosCpu(); bus.loadProgram(0x80, 0x05); cpu.step(); assertEquals(0x207, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x80, 0xfb); cpu.step(); assertEquals(0x1fd, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageRelativeTest.java,test_BRArequiresCmosCpu,"public void test_BRArequiresCmosCpu() throws Exception { makeNmosCpu(); bus.loadProgram(0x80, 0x05); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); cpu.reset(); bus.loadProgram(0x80, 0xfb); cpu.step(); assertEquals(0x202, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageRelativeTest.java,test_BBR,"public void test_BBR() throws Exception { makeCmosCpu(); cpu.reset(); bus.write(0x0a,0xff); bus.loadProgram(0x0f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xfe); bus.loadProgram(0x0f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xfe); bus.loadProgram(0x0f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xff); bus.loadProgram(0x1f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xfd); bus.loadProgram(0x1f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xfd); bus.loadProgram(0x1f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xff); bus.loadProgram(0x2f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xfb); bus.loadProgram(0x2f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xfb); bus.loadProgram(0x2f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xff); bus.loadProgram(0x3f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xf7); bus.loadProgram(0x3f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xf7); bus.loadProgram(0x3f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xff); bus.loadProgram(0x4f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xef); bus.loadProgram(0x4f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xef); bus.loadProgram(0x4f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xff); bus.loadProgram(0x5f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xdf); bus.loadProgram(0x5f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xdf); bus.loadProgram(0x5f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xff); bus.loadProgram(0x6f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xbf); bus.loadProgram(0x6f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xbf); bus.loadProgram(0x6f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xff); bus.loadProgram(0x7f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x7f); bus.loadProgram(0x7f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x7f); bus.loadProgram(0x7f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageRelativeTest.java,test_BBRNeedsCmosCpu,"public void test_BBRNeedsCmosCpu() throws Exception { makeNmosCpu(); bus.write(0x0a,0xfe); bus.loadProgram(0x0f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xfd); bus.loadProgram(0x1f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xfb); bus.loadProgram(0x2f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xf7); bus.loadProgram(0x3f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xef); bus.loadProgram(0x4f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xdf); bus.loadProgram(0x5f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0xbf); bus.loadProgram(0x6f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x7f); bus.loadProgram(0x7f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageRelativeTest.java,test_BBS,"public void test_BBS() throws Exception { makeCmosCpu(); cpu.reset(); bus.write(0x0a,0x00); bus.loadProgram(0x8f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x01); bus.loadProgram(0x8f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x01); bus.loadProgram(0x8f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x00); bus.loadProgram(0x9f, 0x00, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x02); bus.loadProgram(0x9f, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x02); bus.loadProgram(0x9f, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x00); bus.loadProgram(0xaf, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x04); bus.loadProgram(0xaf, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x04); bus.loadProgram(0xaf, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x00); bus.loadProgram(0xbf, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x08); bus.loadProgram(0xbf, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x08); bus.loadProgram(0xbf, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x00); bus.loadProgram(0xcf, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x10); bus.loadProgram(0xcf, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x10); bus.loadProgram(0xcf, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x00); bus.loadProgram(0xdf, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x20); bus.loadProgram(0xdf, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x20); bus.loadProgram(0xdf, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x00); bus.loadProgram(0xef, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x40); bus.loadProgram(0xef, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x40); bus.loadProgram(0xef, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x00); bus.loadProgram(0xff, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x80); bus.loadProgram(0xff, 0x0a, 0x05); cpu.step(); assertEquals(0x208, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x80); bus.loadProgram(0xff, 0x0a, 0xfb); cpu.step(); assertEquals(0x1fe, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageRelativeTest.java,test_BBSNeedsCmosCpu,"public void test_BBSNeedsCmosCpu() throws Exception { makeNmosCpu(); cpu.reset(); bus.write(0x0a,0x01); bus.loadProgram(0x8f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x02); bus.loadProgram(0x9f, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x04); bus.loadProgram(0xaf, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x08); bus.loadProgram(0xbf, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x10); bus.loadProgram(0xcf, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x20); bus.loadProgram(0xdf, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x40); bus.loadProgram(0xef, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); cpu.reset(); bus.write(0x0a,0x80); bus.loadProgram(0xff, 0x0a, 0x05); cpu.step(); assertEquals(0x203, cpu.getProgramCounter()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageXModeTest.java,test_STZ,"public void test_STZ() throws Exception { makeCmosCpu(); bus.write(0x0002,0xff); bus.loadProgram(0x74,0x01); assertEquals(0xff,bus.read(0x02, true)); cpu.setXRegister(0x01); cpu.step(); assertEquals(0x00,bus.read(0x02, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,Cpu65C02ZeroPageXModeTest.java,test_STZRequiresCmosCpu,"public void test_STZRequiresCmosCpu() throws Exception { makeNmosCpu(); bus.write(0x0002,0xff); bus.loadProgram(0x74,0x01); assertEquals(0xff,bus.read(0x02, true)); cpu.setXRegister(0x01); cpu.step(); assertEquals(0xff,bus.read(0x02, true)); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,CpuIndirectModeTest.java,test_JMP_withIndirectBug,"public void test_JMP_withIndirectBug() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.NMOS_6502); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x2200, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,CpuIndirectModeTest.java,test_JMP_withOutIndirectBug,"public void test_JMP_withOutIndirectBug() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.CMOS_6502); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,CpuIndirectModeTest.java,test_JMP_cmos,"public void test_JMP_cmos() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.CMOS_6502); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x20, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,CpuZeroPageIndirectTest.java,test_ora,"public void test_ora() throws Exception { makeCmosCpu(); bus.write(0x30, 0x00); bus.write(0x31, 0x10); bus.write(0x40, 0x01); bus.write(0x41, 0x10); bus.write(0x50, 0x02); bus.write(0x51, 0x10); bus.write(0x60, 0x03); bus.write(0x61, 0x10); bus.write(0x1000, 0x11); bus.write(0x1001, 0x22); bus.write(0x1002, 0x44); bus.write(0x1003, 0x88); bus.loadProgram(0x12, 0x30, 0x12, 0x40, 0x12, 0x50, 0x12, 0x60); assertEquals(0x00, cpu.getAccumulator()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,CpuZeroPageIndirectTest.java,test_ora_requiresCmosCpu,"public void test_ora_requiresCmosCpu() throws Exception { makeNmosCpu(); bus.write(0x30, 0x00); bus.write(0x31, 0x10); bus.write(0x40, 0x01); bus.write(0x41, 0x10); bus.write(0x50, 0x02); bus.write(0x51, 0x10); bus.write(0x60, 0x03); bus.write(0x61, 0x10); bus.write(0x1000, 0x11); bus.write(0x1001, 0x22); bus.write(0x1002, 0x44); bus.write(0x1003, 0x88); bus.loadProgram(0x12, 0x30, 0x12, 0x40, 0x12, 0x50, 0x12, 0x60); assertEquals(0x00, cpu.getAccumulator()); boolean zState = cpu.getZeroFlag(); boolean nState = cpu.getNegativeFlag(); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertEquals(zState, cpu.getZeroFlag()); assertEquals(nState, cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertEquals(zState, cpu.getZeroFlag()); assertEquals(nState, cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertEquals(zState, cpu.getZeroFlag()); assertEquals(nState, cpu.getNegativeFlag()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); assertEquals(zState, cpu.getZeroFlag()); assertEquals(nState, cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,CpuZeroPageIndirectTest.java,test_and,"public void test_and() throws Exception { makeCmosCpu(); bus.write(0x30, 0x00); bus.write(0x31, 0x10); bus.write(0x40, 0x01); bus.write(0x41, 0x10); bus.write(0x50, 0x02); bus.write(0x51, 0x10); bus.write(0x1000, 0x33); bus.write(0x1001, 0x11); bus.write(0x1002, 0x88); bus.loadProgram(0x32, 0x30, 0x32, 0x40, 0x32, 0x50); cpu.setAccumulator(0xff); cpu.step(); assertEquals(0x33, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0x11, cpu.getAccumulator()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); cpu.step(); assertEquals(0, cpu.getAccumulator()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,CpuZeroPageIndirectTest.java,test_and_requiresCmosCpu,"public void test_and_requiresCmosCpu() throws Exception { makeNmosCpu(); bus.write(0x30, 0x00); bus.write(0x31, 0x10); bus.write(0x40, 0x01); bus.write(0x41, 0x10); bus.write(0x50, 0x02); bus.write(0x51, 0x10); bus.write(0x1000, 0x33); bus.write(0x1001, 0x11); bus.write(0x1002, 0x88); bus.loadProgram(0x32, 0x30, 0x32, 0x40, 0x32, 0x50); cpu.setAccumulator(0xff); boolean zState = cpu.getZeroFlag(); boolean nState = cpu.getNegativeFlag(); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertEquals(zState, cpu.getZeroFlag()); assertEquals(nState, cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertEquals(zState, cpu.getZeroFlag()); assertEquals(nState, cpu.getNegativeFlag()); cpu.step(); assertEquals(0xff, cpu.getAccumulator()); assertEquals(zState, cpu.getZeroFlag()); assertEquals(nState, cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,CpuZeroPageIndirectTest.java,test_eor,"public void test_eor() throws Exception { makeCmosCpu(); bus.write(0x30, 0x00); bus.write(0x31, 0x10); bus.write(0x40, 0x01); bus.write(0x41, 0x10); bus.write(0x50, 0x02); bus.write(0x51, 0x10); bus.write(0x60, 0x03); bus.write(0x61, 0x10); bus.write(0x1000, 0x00); bus.write(0x1001, 0xff); bus.write(0x1002, 0x33); bus.write(0x1003, 0x44); bus.loadProgram(0x52, 0x30, 0x52, 0x40, 0x52, 0x50, 0x52, 0x60); cpu.setAccumulator(0x88); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x77, cpu.getAccumulator()); cpu.step(); assertEquals(0x44, cpu.getAccumulator()); cpu.step(); assertEquals(0x00, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
a9c6d5964f33d560b27f849fa397e13331c58831,CpuZeroPageIndirectTest.java,test_eor_requiresCmosCpu,"public void test_eor_requiresCmosCpu() throws Exception { makeNmosCpu(); bus.write(0x30, 0x00); bus.write(0x31, 0x10); bus.write(0x40, 0x01); bus.write(0x41, 0x10); bus.write(0x50, 0x02); bus.write(0x51, 0x10); bus.write(0x60, 0x03); bus.write(0x61, 0x10); bus.write(0x1000, 0x00); bus.write(0x1001, 0xff); bus.write(0x1002, 0x33); bus.write(0x1003, 0x44); bus.loadProgram(0x52, 0x30, 0x52, 0x40, 0x52, 0x50, 0x52, 0x60); cpu.setAccumulator(0x88); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); cpu.step(); assertEquals(0x88, cpu.getAccumulator()); }",https://www.github.com/sethm/symon/commit/a9c6d5964f33d560b27f849fa397e13331c58831
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AbstractTerminalModel.java,clear,"public void clear() { int rows = getRows(), columns = getColumns(); for (int column = 0; column < columns; column++) { for (int row = 0; row < rows; row++) { setCell(column, row, null); } } }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AbstractTerminalModel.java,moveCursorBack,"public void moveCursorBack(int n) { if (n < 0) { throw new IllegalArgumentException(""n must be positive""); } int cursorColumn = getCursorColumn() - n; if (cursorColumn < 0) { cursorColumn = 0; } setCursorColumn(cursorColumn); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AbstractTerminalModel.java,moveCursorForward,"public void moveCursorForward(int n) { if (n < 0) { throw new IllegalArgumentException(""n must be positive""); } int columns = getColumns(); int cursorColumn = getCursorColumn() + n; if (cursorColumn >= columns) { cursorColumn = columns - 1; } setCursorColumn(cursorColumn); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AbstractTerminalModel.java,moveCursorDown,"public void moveCursorDown(int n) { if (n < 0) { throw new IllegalArgumentException(""n must be positive""); } int bufferSize = getBufferSize(); int cursorRow = getCursorRow() + n; if (cursorRow >= bufferSize) { cursorRow = bufferSize - 1; } setCursorRow(cursorRow); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AbstractTerminalModel.java,moveCursorUp,"public void moveCursorUp(int n) { if (n < 0) { throw new IllegalArgumentException(""n must be positive""); } int cursorRow = getCursorRow() - n; if (cursorRow < 0) { cursorRow = 0; } setCursorRow(cursorRow); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,setBorderWidth,public void setBorderWidth(int borderWidth) { this.borderWidth = borderWidth; revalidate(); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,setFont,public void setFont(Font font) { this.font = font; setCellWidthAndHeight(font); revalidate(); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,getFont,public Font getFont() { return font; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,setModel,"public void setModel(TerminalModel model) { if (model == null) { throw new NullPointerException(""model""); } this.model = model; }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,getModel,public TerminalModel getModel() { return model; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,println,"public void println(String str) { if (str == null) { throw new NullPointerException(""str""); } print(str.concat(""\r\n"")); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,print,public void print(String str) { model.print(str); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,getMinimumSize,"public Dimension getMinimumSize() { return new Dimension(model.getColumns() * cellWidth + borderWidth * 2, model.getRows() * cellHeight + borderWidth * 2); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,getMaximumSize,public Dimension getMaximumSize() { return getMinimumSize(); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,getPreferredSize,public Dimension getPreferredSize() { return getMinimumSize(); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,paint,"public void paint(Graphics g) { g.setFont(font); int width = model.getColumns(); int height = model.getBufferSize(); g.setColor(model.getDefaultBackgroundColor()); g.fillRect(0, 0, width * cellWidth + borderWidth * 2, height * cellHeight + borderWidth * 2); int start = scrollBar == null ? 0 : scrollBar.getValue(); for (int y = start; y < height; y++) { for (int x = 0; x < width; x++) { TerminalCell cell = model.getCell(x, y); boolean cursorHere = (model.getCursorRow() == y) && (model.getCursorColumn() == x); if ((cursorHere) && (cell == null)) { cell = new TerminalCell(' ', model.getDefaultBackgroundColor(), model.getDefaultForegroundColor()); } if (cell != null) { int px = x * cellWidth + borderWidth; int py = (y - start) * cellHeight + borderWidth; g.setColor(cursorHere ? cell.getForegroundColor() : cell.getBackgroundColor()); g.fillRect(px, py, cellWidth, cellHeight); g.setColor(cursorHere ? cell.getBackgroundColor() : cell.getForegroundColor()); g.drawChars(new char[] { cell.getCharacter() }, 0, 1, px, py + cellHeight - maxDescender); } } } }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,init,"private void init() { setLayout(new BorderLayout(0, 0)); int rows = model.getRows(); int bufferSize = model.getBufferSize(); if (bufferSize > rows) { scrollBar = new JScrollBar(1, 0, rows, 0, bufferSize + 1); scrollBar.addAdjustmentListener(new AdjustmentListener() { public void adjustmentValueChanged(AdjustmentEvent evt) { repaint(); } }); add(""After"", scrollBar); } repaint(); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,adjustmentValueChanged,public void adjustmentValueChanged(AdjustmentEvent evt) { repaint(); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,JTerminal.java,setCellWidthAndHeight,private void setCellWidthAndHeight(Font font) { FontMetrics metrics = getFontMetrics(font); cellWidth = metrics.charWidth('W'); cellHeight = metrics.getHeight(); maxDescender = metrics.getMaxDescent(); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalCell.java,getCharacter,public char getCharacter() { return character; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalCell.java,getBackgroundColor,public Color getBackgroundColor() { return backgroundColor; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalCell.java,getForegroundColor,public Color getForegroundColor() { return foregroundColor; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,getBellStrategy,public BellStrategy getBellStrategy();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,setBellStrategy,public void setBellStrategy(BellStrategy strategy);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,clear,public void clear();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,moveCursorBack,public void moveCursorBack(int n);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,moveCursorForward,public void moveCursorForward(int n);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,moveCursorDown,public void moveCursorDown(int n);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,moveCursorUp,public void moveCursorUp(int n);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,setCell,"public void setCell(int column, int row, TerminalCell cell);",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,getCell,"public TerminalCell getCell(int column, int row);",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,print,public void print(String str);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,getColumns,public int getColumns();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,getRows,public int getRows();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,getBufferSize,public int getBufferSize();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,getCursorRow,public int getCursorRow();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,setCursorRow,public void setCursorRow(int row);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,getCursorColumn,public int getCursorColumn();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,setCursorColumn,public void setCursorColumn(int column);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,getDefaultBackgroundColor,public Color getDefaultBackgroundColor();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TerminalModel.java,getDefaultForegroundColor,public Color getDefaultForegroundColor();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,BeepBellStrategy.java,soundBell,public void soundBell() { Toolkit.getDefaultToolkit().beep(); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,BellStrategy.java,soundBell,public void soundBell();,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,NopBellStrategy.java,soundBell,public void soundBell() { },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AnsiControlSequence.java,getCommand,public char getCommand() { return command; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AnsiControlSequence.java,getParameters,public String[] getParameters() { return parameters; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AnsiControlSequenceListener.java,parsedControlSequence,public void parsedControlSequence(AnsiControlSequence seq);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AnsiControlSequenceListener.java,parsedString,public void parsedString(String str);,https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AnsiControlSequenceParser.java,parse,public void parse(String str) { if (buffer.length() > 0) { str = buffer.toString().concat(str); buffer = new StringBuilder(); } Reader reader = new StringReader(str); try { try { parse(reader); } finally { reader.close(); } } catch (IOException ex) { } },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AnsiControlSequenceParser.java,parse,private void parse(Reader reader) throws IOException { StringBuilder text = new StringBuilder(); int character; while ((character = reader.read()) != -1) { boolean introducedControlSequence = false; if (character == SINGLE_CSI) { introducedControlSequence = true; } else if (character == MULTI_CSI[0]) { int nextCharacter = reader.read(); if (nextCharacter == -1) { buffer.append((char) character); break; } else if (nextCharacter == MULTI_CSI[1]) { introducedControlSequence = true; } else { text.append((char) character); text.append((char) nextCharacter); } } else { text.append((char) character); } if (introducedControlSequence) { if (text.length() > 0) { listener.parsedString(text.toString()); text = new StringBuilder(); } parseControlSequence(reader); } } if (text.length() > 0) { listener.parsedString(text.toString()); } },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,AnsiControlSequenceParser.java,parseControlSequence,"private void parseControlSequence(Reader reader) throws IOException { boolean finishedSequence = false; StringBuilder parameters = new StringBuilder(); int character; while ((character = reader.read()) != -1) { if ((character >= 'a' && character <= 'z') || (character >= 'A' && character <= 'Z')) { String[] array = parameters.toString().split("";""); AnsiControlSequence seq = new AnsiControlSequence((char) character, array); listener.parsedControlSequence(seq); finishedSequence = true; break; } else { parameters.append((char) character); } } if (!finishedSequence) { buffer.append((char) SINGLE_CSI); buffer.append(parameters); } }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,parsedControlSequence,"public void parsedControlSequence(AnsiControlSequence seq) { char command = seq.getCommand(); String[] parameters = seq.getParameters(); switch (command) { case 'A': case 'B': case 'C': case 'D': int n = 1; if (parameters.length == 1) { n = Integer.parseInt(parameters[0]); } if (command == 'A') { moveCursorUp(n); } else if (command == 'B') { moveCursorDown(n); } else if (command == 'C') { moveCursorForward(n); } else if (command == 'D') { moveCursorBack(n); } break; case 'E': case 'F': n = 1; if (parameters.length == 1) { n = Integer.parseInt(parameters[0]); } if (command == 'E') { moveCursorDown(n); } else if (command == 'F') { moveCursorUp(n); } setCursorColumn(0); break; case 'G': if (parameters.length == 1) { n = Integer.parseInt(parameters[0]); setCursorColumn(n - 1); } break; case 'H': case 'f': if (parameters.length == 2) { n = 1; int m = 1; if (parameters[0].length() > 0) { n = Integer.parseInt(parameters[0]); } if (parameters[1].length() > 0) { m = Integer.parseInt(parameters[1]); } setCursorRow(n - 1); setCursorColumn(m - 1); } break; case 'J': n = 0; if (parameters.length == 1) { n = Integer.parseInt(parameters[0]); } if (n == 0) { int row = cursorRow; int column = cursorColumn; while(row < rows) { while(column < columns) { cells[row][column] = null; column++; } column = 0; row++; } } else if (n == 1) { int row = cursorRow; int column = cursorColumn; while(row >= 0) { while(column >= 0) { cells[row][column] = null; column--; } column = columns - 1; row--; } } else if (n == 2) { clear(); } break; case 'K': n = 0; if (parameters.length == 1) { n = Integer.parseInt(parameters[0]); } if (n == 0) { for (int row = cursorRow; row < rows; row++) { cells[row][cursorColumn] = null; } } else if (n == 1) { for (int row = cursorRow; row >= 0; row--) { cells[row][cursorColumn] = null; } } else if (n == 2) { for (int column = 0; column < columns; column++) { cells[cursorRow][column] = null; } } break; case 'm': if (parameters.length == 0) { parameters = new String[] { ""0"" }; } for (String parameter : parameters) { if (parameter.equals(""0"")) { foregroundColor = DEFAULT_FOREGROUND_COLOR; backgroundColor = DEFAULT_BACKGROUND_COLOR; backgroundBold = DEFAULT_BACKGROUND_BOLD; foregroundBold = DEFAULT_FOREGROUND_BOLD; } else if (parameter.equals(""2"")) { backgroundBold = true; foregroundBold = true; } else if (parameter.equals(""22"")) { backgroundBold = false; foregroundBold = false; } else if ((parameter.startsWith(""3"") || parameter.startsWith(""4"")) && parameter.length() == 2) { int color = Integer.parseInt(parameter.substring(1)); if (parameter.startsWith(""3"")) { foregroundColor = color; } else if (parameter.startsWith(""4"")) { backgroundColor = color; } } } break; case 'u': if (savedCursorColumn != -1 && savedCursorRow != -1) { cursorColumn = savedCursorColumn; cursorRow = savedCursorRow; } break; case 's': savedCursorColumn = cursorColumn; savedCursorRow = cursorRow; break; } }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,parsedString,"public void parsedString(String str) { for (char ch : str.toCharArray()) { switch (ch) { case '\0': continue; case '\r': cursorColumn = 0; continue; case '\n': cursorRow++; break; case '\t': while ((++cursorColumn % TAB_WIDTH) != 0); continue; case 127: if (cursorColumn > 0) { cells[cursorRow][--cursorColumn] = null; } continue; case 7: bellStrategy.soundBell(); continue; } if (cursorColumn >= columns) { cursorColumn = 0; cursorRow++; } if (cursorRow >= bufferSize) { for (int i = 1; i < bufferSize; i++) { System.arraycopy(cells[i], 0, cells[i - 1], 0, columns); } for (int i = 0; i < columns; i++) { cells[bufferSize - 1][i] = null; } cursorRow--; } Color back = backgroundBold ? SgrColor.COLOR_BRIGHT[backgroundColor] : SgrColor.COLOR_NORMAL[backgroundColor]; Color fore = foregroundBold ? SgrColor.COLOR_BRIGHT[foregroundColor] : SgrColor.COLOR_NORMAL[foregroundColor]; if (ch != '\n') { cells[cursorRow][cursorColumn++] = new TerminalCell(ch, back, fore); } } }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,init,private void init() { cells = new TerminalCell[bufferSize][columns]; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,getCursorRow,public int getCursorRow() { return cursorRow; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,setCursorRow,"public void setCursorRow(int row) { if (row < 0 || row >= bufferSize) { throw new IllegalArgumentException(""row out of range""); } cursorRow = row; }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,getCursorColumn,public int getCursorColumn() { return cursorColumn; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,setCursorColumn,"public void setCursorColumn(int column) { if (column < 0 || column >= columns) { throw new IllegalArgumentException(""column out of range""); } cursorColumn = column; }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,getCell,"public TerminalCell getCell(int column, int row) { if (column < 0 || row < 0 || column >= columns || row >= bufferSize) { throw new IndexOutOfBoundsException(); } return cells[row][column]; }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,setCell,"public void setCell(int column, int row, TerminalCell cell) { if (column < 0 || row < 0 || column >= columns || row >= bufferSize) { throw new IndexOutOfBoundsException(); } cells[row][column] = cell; }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,print,"public void print(String str) { if (str == null) { throw new NullPointerException(""str""); } parser.parse(str); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,getColumns,public int getColumns() { return columns; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,getRows,public int getRows() { return rows; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,getBufferSize,public int getBufferSize() { return bufferSize; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,getBellStrategy,public BellStrategy getBellStrategy() { return bellStrategy; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,setBellStrategy,"public void setBellStrategy(BellStrategy strategy) { if (strategy == null) { throw new NullPointerException(""strategy""); } this.bellStrategy = strategy; }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,getDefaultBackgroundColor,public Color getDefaultBackgroundColor() { final int bg = DEFAULT_BACKGROUND_COLOR; return DEFAULT_BACKGROUND_BOLD ? SgrColor.COLOR_BRIGHT[bg] : SgrColor.COLOR_NORMAL[bg]; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,Vt100TerminalModel.java,getDefaultForegroundColor,public Color getDefaultForegroundColor() { final int fg = DEFAULT_FOREGROUND_COLOR; return DEFAULT_FOREGROUND_BOLD ? SgrColor.COLOR_BRIGHT[fg] : SgrColor.COLOR_NORMAL[fg]; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,setUp,public void setUp() { objects.clear(); parser = new AnsiControlSequenceParser(this); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,testBrokenSingleSequence,"public void testBrokenSingleSequence() { parser.parse(new String(new char[] { 155 })); parser.parse(new String(new char[] { 'u' })); assertEquals(1, objects.size()); Object obj = objects.get(0); assertEquals(AnsiControlSequence.class, obj.getClass()); AnsiControlSequence seq = (AnsiControlSequence) obj; String[] params = seq.getParameters(); assertEquals('u', seq.getCommand()); assertEquals(0, params.length); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,testBrokenDoubleSequence,"public void testBrokenDoubleSequence() { char[] ch1 = { 27 }; char[] ch2 = { '[' }; char[] ch3 = { '3', '0', ';' }; char[] ch4 = { '4', '0', 'm' }; parser.parse(new String(ch1)); parser.parse(new String(ch2)); parser.parse(new String(ch3)); parser.parse(new String(ch4)); assertEquals(1, objects.size()); Object obj = objects.get(0); assertEquals(AnsiControlSequence.class, obj.getClass()); AnsiControlSequence seq = (AnsiControlSequence) obj; String[] params = seq.getParameters(); assertEquals('m', seq.getCommand()); assertEquals(2, params.length); assertEquals(""30"", params[0]); assertEquals(""40"", params[1]); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,testEmpty,"public void testEmpty() { parser.parse(""""); assertEquals(0, objects.size()); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,testTextAndSequence,"public void testTextAndSequence() { char[] ch = { 'h', 'i', 155, 'u', 'b', 'y', 'e' }; parser.parse(new String(ch)); assertEquals(3, objects.size()); Object o1 = objects.get(0); Object o2 = objects.get(1); Object o3 = objects.get(2); assertEquals(String.class, o1.getClass()); assertEquals(AnsiControlSequence.class, o2.getClass()); assertEquals(String.class, o3.getClass()); assertEquals(""hi"", o1); assertEquals(""bye"", o3); AnsiControlSequence seq = (AnsiControlSequence) o2; String[] params = seq.getParameters(); assertEquals(0, params.length); assertEquals('u', seq.getCommand()); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,testParameters,"public void testParameters() { char[] ch = { 155, '3', '0', ';', '4', '0', 'm' }; parser.parse(new String(ch)); assertEquals(1, objects.size()); Object obj = objects.get(0); assertEquals(AnsiControlSequence.class, obj.getClass()); AnsiControlSequence seq = (AnsiControlSequence) obj; String[] params = seq.getParameters(); assertEquals('m', seq.getCommand()); assertEquals(2, params.length); assertEquals(""30"", params[0]); assertEquals(""40"", params[1]); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,testText,"public void testText() { parser.parse(""Hello, World!""); assertEquals(1, objects.size()); Object obj = objects.get(0); assertEquals(String.class, obj.getClass()); assertEquals(obj, ""Hello, World!""); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,testSingleCsi,"public void testSingleCsi() { char[] ch = { 155, '6', 'n' }; parser.parse(new String(ch)); assertEquals(1, objects.size()); Object obj = objects.get(0); assertEquals(AnsiControlSequence.class, obj.getClass()); AnsiControlSequence seq = (AnsiControlSequence) obj; String[] params = seq.getParameters(); assertEquals('n', seq.getCommand()); assertEquals(1, params.length); assertEquals(""6"", params[0]); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,testDoubleCsi,"public void testDoubleCsi() { char[] ch = { 27, '[', 's' }; parser.parse(new String(ch)); assertEquals(1, objects.size()); Object obj = objects.get(0); assertEquals(AnsiControlSequence.class, obj.getClass()); AnsiControlSequence seq = (AnsiControlSequence) obj; String[] params = seq.getParameters(); assertEquals('s', seq.getCommand()); assertEquals(0, params.length); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,parsedControlSequence,public void parsedControlSequence(AnsiControlSequence seq) { objects.add(seq); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestAnsiControlSequenceParser.java,parsedString,public void parsedString(String str) { objects.add(str); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,setUp,public void setUp(){ model = new Vt100TerminalModel(); },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,testWordWrapping,"public void testWordWrapping() { int width = model.getColumns(); for (int i = 0; i < (width + 1); i++) { model.print(""h""); } assertEquals('h', model.getCell(0, 1).getCharacter()); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,testSpecialCharacters,"public void testSpecialCharacters() { model.print(""\u0000""); assertNull(model.getCell(0, 0)); model.print(""a\rb\rc""); assertEquals('c', model.getCell(0, 0).getCharacter()); model.print(""\na""); assertEquals('c', model.getCell(0, 0).getCharacter()); assertEquals('a', model.getCell(1, 1).getCharacter()); model.print(""\u007F""); assertNull(model.getCell(0, 1)); model.print(""A\tB""); assertEquals('B', model.getCell(8, 1).getCharacter()); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,testBuffer,"public void testBuffer() { model = new Vt100TerminalModel(model.getColumns(), 2, 2); model.print(""This is line one.\r\n""); model.print(""This is line two. XXXXXX\r\n""); model.print(""And this is line three!""); assertEquals('A', model.getCell(0, 1).getCharacter()); assertNull(model.getCell(23, 1)); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,testErase,"public void testErase() { model.print(""Hello""); model.print(""\u009B2J""); for (int i = 0; i < 5; i++) { assertNull(model.getCell(i, 0)); } }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,testMoveCursor,"public void testMoveCursor() { model.print(""\u009B5B""); assertEquals(5, model.getCursorRow()); model.print(""\u009B3A""); assertEquals(2, model.getCursorRow()); model.print(""\u009B7C""); assertEquals(7, model.getCursorColumn()); model.print(""\u009B4D""); assertEquals(3, model.getCursorColumn()); model.setCursorColumn(15); model.setCursorRow(0); model.print(""\u009B3E""); assertEquals(0, model.getCursorColumn()); assertEquals(3, model.getCursorRow()); model.setCursorColumn(7); model.print(""\u009BF""); assertEquals(0, model.getCursorColumn()); assertEquals(2, model.getCursorRow()); model.print(""\u009B4;8H""); assertEquals(3, model.getCursorRow()); assertEquals(7, model.getCursorColumn()); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,testSgr,"public void testSgr() { model.print(""\u009B2;33;41mX""); TerminalCell cell = model.getCell(0, 0); assertNotNull(cell); assertEquals('X', cell.getCharacter()); assertEquals(Color.RED, cell.getBackgroundColor()); assertEquals(Color.YELLOW, cell.getForegroundColor()); model.print(""\u009B0m\rX""); cell = model.getCell(0, 0); assertNotNull(cell); assertEquals('X', cell.getCharacter()); assertEquals(model.getDefaultBackgroundColor(), cell.getBackgroundColor()); assertEquals(model.getDefaultForegroundColor(), cell.getForegroundColor()); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,testSaveAndRestoreCursor,"public void testSaveAndRestoreCursor() { model.setCursorColumn(3); model.setCursorRow(17); model.print(""\u009Bs""); model.setCursorColumn(5); model.setCursorRow(23); model.print(""\u009Bu""); assertEquals(3, model.getCursorColumn()); assertEquals(17, model.getCursorRow()); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,testPrint,"public void testPrint() { model.print(""Hi""); assertEquals('H', model.getCell(0, 0).getCharacter()); assertEquals('i', model.getCell(1, 0).getCharacter()); assertNull(model.getCell(2, 0)); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,testBell,"public void testBell() { final int[] counter = new int[1]; BellStrategy strategy = new BellStrategy() { @Override public void soundBell() { counter[0]++; } }; model.setBellStrategy(strategy); model.print(""\u0007""); assertEquals(1, counter[0]); model.print(""Hello, \u0007World!\u0007\r\n""); assertEquals(3, counter[0]); }",https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff,TestVt100TerminalModel.java,soundBell,public void soundBell() { counter[0]++; },https://www.github.com/sethm/symon/commit/be72c2ff0967e0b0cfa6be7d4dd60ed21909e0ff
73c474d6060fb9d742bd0f8184a7aaf18f3a30bf,Console.java,keyTyped,public void keyTyped(KeyEvent keyEvent) { char keyTyped = keyEvent.getKeyChar(); if (SWAP_CR_AND_LF) { if (keyTyped == 0x0a) { keyTyped = 0x0d; } else if (keyTyped == 0x0d) { keyTyped = 0x0a; } } if (sendCrForLf && (keyTyped == 0x0d)) { typeAheadBuffer.push((char) 0x0d); typeAheadBuffer.push((char) 0x0a); } else { typeAheadBuffer.push(keyTyped); } keyEvent.consume(); },https://www.github.com/sethm/symon/commit/73c474d6060fb9d742bd0f8184a7aaf18f3a30bf
0aeb97bb56e1309ac75d9e055002acf6ecec7da2,Main.java,main,"public static void main(String[] args) throws Exception { Class machineClass = SymonMachine.class; Options options = new Options(); options.addOption(new Option(""m"", ""machine"", true, ""Specify machine type."")); options.addOption(new Option(""c"", ""cpu"", true, ""Specify CPU type."")); options.addOption(new Option(""r"", ""rom"", true, ""Specify ROM file."")); CommandLineParser parser = new DefaultParser(); try { CommandLine line = parser.parse(options, args); InstructionTable.CpuBehavior cpuBehavior = null; String romFile = null; if (line.hasOption(""machine"")) { String machine = line.getOptionValue(""machine"").toLowerCase(Locale.ENGLISH); switch (machine) { case ""multicomp"": machineClass = MulticompMachine.class; break; case ""simple"": machineClass = SimpleMachine.class; break; case ""symon"": machineClass = SymonMachine.class; break; default: System.err.println(""Could not start Symon. Unknown machine type "" + machine); return; } } if (line.hasOption(""cpu"")) { String cpu = line.getOptionValue(""cpu"").toLowerCase(Locale.ENGLISH); switch (cpu) { case ""6502"": cpuBehavior = InstructionTable.CpuBehavior.NMOS_6502; break; case ""65c02"": cpuBehavior = InstructionTable.CpuBehavior.CMOS_6502; break; case ""65c816"": cpuBehavior = InstructionTable.CpuBehavior.CMOS_65816; break; default: System.err.println(""Could not start Symon. Unknown cpu type "" + cpu); return; } } if (line.hasOption(""rom"")) { romFile = line.getOptionValue(""rom""); } while (true) { if (machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp"", ""Simple""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if (s != null && s.equals(""Multicomp"")) { machineClass = MulticompMachine.class; } else if (s != null && s.equals(""Simple"")) { machineClass = SimpleMachine.class; } else { machineClass = SymonMachine.class; } } if (cpuBehavior == null) { cpuBehavior = InstructionTable.CpuBehavior.NMOS_6502; } final Simulator simulator = new Simulator(machineClass, cpuBehavior, romFile); SwingUtilities.invokeLater(new Runnable() { @Override public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } } }); Simulator.MainCommand cmd = simulator.waitForCommand(); if (cmd.equals(Simulator.MainCommand.SELECTMACHINE)) { machineClass = null; } else { break; } } } catch (ParseException ex) { System.err.println(""Could not start Symon. Reason: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/0aeb97bb56e1309ac75d9e055002acf6ecec7da2
0aeb97bb56e1309ac75d9e055002acf6ecec7da2,Simulator.java,initMenu,"private void initMenu() { JMenu fileMenu = new JMenu(""File""); loadProgramItem = new JMenuItem(new LoadProgramAction()); fileMenu.add(loadProgramItem); if (machine.getRom() != null) { loadRomItem = new JMenuItem(new LoadRomAction()); fileMenu.add(loadRomItem); } JMenuItem prefsItem = new JMenuItem(new ShowPrefsAction()); fileMenu.add(prefsItem); JMenuItem quitItem = new JMenuItem(new QuitAction()); fileMenu.add(quitItem); add(fileMenu); JMenu viewMenu = new JMenu(""View""); JMenu fontSubMenu = new JMenu(""Console Font Size""); ButtonGroup fontSizeGroup = new ButtonGroup(); makeFontSizeMenuItem(10, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(11, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(12, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(13, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(14, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(15, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(16, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(17, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(18, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(19, fontSubMenu, fontSizeGroup); makeFontSizeMenuItem(20, fontSubMenu, fontSizeGroup); viewMenu.add(fontSubMenu); final JCheckBoxMenuItem showTraceLog = new JCheckBoxMenuItem(new ToggleTraceWindowAction()); traceLog.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showTraceLog.setSelected(false); } }); viewMenu.add(showTraceLog); final JCheckBoxMenuItem showMemoryTable = new JCheckBoxMenuItem(new ToggleMemoryWindowAction()); memoryWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showMemoryTable.setSelected(false); } }); viewMenu.add(showMemoryTable); if (videoWindow != null) { final JCheckBoxMenuItem showVideoWindow = new JCheckBoxMenuItem(new ToggleVideoWindowAction()); videoWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showVideoWindow.setSelected(false); } }); viewMenu.add(showVideoWindow); } add(viewMenu); JMenu simulatorMenu = new JMenu(""Simulator""); JMenuItem selectMachineItem = new JMenuItem(new SelectMachineAction()); simulatorMenu.add(selectMachineItem); JMenu cpuTypeMenu = new JMenu(""CPU""); ButtonGroup cpuGroup = new ButtonGroup(); makeCpuMenuItem(""6502"", Cpu.CpuBehavior.NMOS_6502, cpuTypeMenu, cpuGroup); makeCpuMenuItem(""65C02"", Cpu.CpuBehavior.CMOS_6502, cpuTypeMenu, cpuGroup); makeCpuMenuItem(""65C816"", Cpu.CpuBehavior.CMOS_65816, cpuTypeMenu, cpuGroup); JMenu speedSubMenu = new JMenu(""Clock Speed""); ButtonGroup speedGroup = new ButtonGroup(); makeSpeedMenuItem(1, speedSubMenu, speedGroup); makeSpeedMenuItem(2, speedSubMenu, speedGroup); makeSpeedMenuItem(4, speedSubMenu, speedGroup); makeSpeedMenuItem(8, speedSubMenu, speedGroup); simulatorMenu.add(speedSubMenu); simulatorMenu.add(cpuTypeMenu); final JCheckBoxMenuItem showBreakpoints = new JCheckBoxMenuItem(new ToggleBreakpointWindowAction()); breakpointsWindow.addWindowListener(new WindowAdapter() { @Override public void windowClosing(WindowEvent e) { showBreakpoints.setSelected(false); } }); simulatorMenu.add(showBreakpoints); add(simulatorMenu); }",https://www.github.com/sethm/symon/commit/0aeb97bb56e1309ac75d9e055002acf6ecec7da2
087ba28b821593c843d7ed2c57e1f8287316fb33,StatusPanel.java,makeTextField,"private JTextField makeTextField(Dimension size, boolean editable) { JTextField textField = new JTextField(""""); textField.setAlignmentX(LEFT_ALIGNMENT); textField.setEditable(editable); textField.setMinimumSize(size); textField.setMaximumSize(size); textField.setPreferredSize(size); textField.setBackground(Color.WHITE); textField.setUI(new MetalTextFieldUI()); return textField; }",https://www.github.com/sethm/symon/commit/087ba28b821593c843d7ed2c57e1f8287316fb33
b36b442b14cc2d3591ce9ae757c6f2de15b5f00e,Cpu.java,step,"public void step() throws MemoryAccessException { opBeginTime = System.nanoTime(); state.lastPc = state.pc; if (state.nmiAsserted) { handleNmi(); } else if (state.irqAsserted && !getIrqDisableFlag()) { handleIrq(state.pc); } state.ir = bus.read(state.pc, true); int irAddressMode = (state.ir >> 2) & 0x07; int irOpMode = state.ir & 0x03; incrementPC(); clearOpTrap(); state.instSize = Cpu.instructionSizes[state.ir]; for (int i = 0; i < state.instSize - 1; i++) { state.args[i] = bus.read(state.pc, true); incrementPC(); } state.stepCounter++; int effectiveAddress = 0; int tmp; switch (irOpMode) { case 0: case 2: switch (irAddressMode) { case 0: break; case 1: effectiveAddress = state.args[0]; break; case 2: break; case 3: effectiveAddress = Utils.address(state.args[0], state.args[1]); break; case 4: if (behavior == CpuBehavior.CMOS_6502 || behavior == CpuBehavior.CMOS_65816) { effectiveAddress = Utils.address(bus.read(state.args[0], true), bus.read((state.args[0] + 1) & 0xff, true)); } break; case 5: if (state.ir == 0x14) { effectiveAddress = state.args[0]; } else if (state.ir == 0x96 || state.ir == 0xb6) { effectiveAddress = zpyAddress(state.args[0]); } else { effectiveAddress = zpxAddress(state.args[0]); } break; case 7: if (state.ir == 0x9c || state.ir == 0x1c) { effectiveAddress = Utils.address(state.args[0], state.args[1]); } else if (state.ir == 0xbe) { effectiveAddress = yAddress(state.args[0], state.args[1]); } else { effectiveAddress = xAddress(state.args[0], state.args[1]); } break; } break; case 3: switch (irAddressMode) { case 1: case 3: case 5: case 7: effectiveAddress = state.args[0]; break; } break; case 1: switch (irAddressMode) { case 0: tmp = (state.args[0] + state.x) & 0xff; effectiveAddress = Utils.address(bus.read(tmp, true), bus.read(tmp + 1, true)); break; case 1: effectiveAddress = state.args[0]; break; case 2: effectiveAddress = -1; break; case 3: effectiveAddress = Utils.address(state.args[0], state.args[1]); break; case 4: tmp = Utils.address(bus.read(state.args[0], true), bus.read((state.args[0] + 1) & 0xff, true)); effectiveAddress = (tmp + state.y) & 0xffff; break; case 5: effectiveAddress = zpxAddress(state.args[0]); break; case 6: effectiveAddress = yAddress(state.args[0], state.args[1]); break; case 7: effectiveAddress = xAddress(state.args[0], state.args[1]); break; } break; } switch (state.ir) { case 0x00: handleBrk(state.pc + 1); break; case 0x08: stackPush(state.getStatusFlag() | 0x10); break; case 0x10: if (!getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x18: clearCarryFlag(); break; case 0x20: stackPush((state.pc - 1 >> 8) & 0xff); stackPush(state.pc - 1 & 0xff); state.pc = Utils.address(state.args[0], state.args[1]); break; case 0x28: setProcessorStatus(stackPop()); break; case 0x30: if (getNegativeFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x38: setCarryFlag(); break; case 0x40: setProcessorStatus(stackPop()); int lo = stackPop(); int hi = stackPop(); setProgramCounter(Utils.address(lo, hi)); break; case 0x48: stackPush(state.a); break; case 0x50: if (!getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x58: clearIrqDisableFlag(); break; case 0x5a: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } stackPush(state.y); break; case 0x60: lo = stackPop(); hi = stackPop(); setProgramCounter((Utils.address(lo, hi) + 1) & 0xffff); break; case 0x68: state.a = stackPop(); setArithmeticFlags(state.a); break; case 0x70: if (getOverflowFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x78: setIrqDisableFlag(); break; case 0x7a: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } state.y = stackPop(); setArithmeticFlags(state.y); break; case 0x80: if (behavior == CpuBehavior.CMOS_6502 || behavior == CpuBehavior.CMOS_65816) { state.pc = relAddress(state.args[0]); } break; case 0x88: state.y = --state.y & 0xff; setArithmeticFlags(state.y); break; case 0x8a: state.a = state.x; setArithmeticFlags(state.a); break; case 0x90: if (!getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0x98: state.a = state.y; setArithmeticFlags(state.a); break; case 0x9a: setStackPointer(state.x); break; case 0xa8: state.y = state.a; setArithmeticFlags(state.y); break; case 0xaa: state.x = state.a; setArithmeticFlags(state.x); break; case 0xb0: if (getCarryFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xb8: clearOverflowFlag(); break; case 0xba: state.x = getStackPointer(); setArithmeticFlags(state.x); break; case 0xc8: state.y = ++state.y & 0xff; setArithmeticFlags(state.y); break; case 0xca: state.x = --state.x & 0xff; setArithmeticFlags(state.x); break; case 0xd0: if (!getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xd8: clearDecimalModeFlag(); break; case 0xda: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } stackPush(state.x); break; case 0xe8: state.x = ++state.x & 0xff; setArithmeticFlags(state.x); break; case 0xea: break; case 0xf0: if (getZeroFlag()) { state.pc = relAddress(state.args[0]); } break; case 0xf8: setDecimalModeFlag(); break; case 0xfa: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } state.x = stackPop(); setArithmeticFlags(state.x); break; case 0x4c: state.pc = Utils.address(state.args[0], state.args[1]); break; case 0x6c: lo = Utils.address(state.args[0], state.args[1]); if (state.args[0] == 0xff && (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG)) { hi = Utils.address(0x00, state.args[1]); } else { hi = lo + 1; } state.pc = Utils.address(bus.read(lo, true), bus.read(hi, true)); break; case 0x7c: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } lo = (((state.args[1] << 8) | state.args[0]) + state.x) & 0xffff; hi = lo + 1; state.pc = Utils.address(bus.read(lo, true), bus.read(hi, true)); break; case 0x09: state.a |= state.args[0]; setArithmeticFlags(state.a); break; case 0x12: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x01: case 0x05: case 0x0d: case 0x11: case 0x15: case 0x19: case 0x1d: state.a |= bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0x0a: state.a = asl(state.a); setArithmeticFlags(state.a); break; case 0x06: case 0x0e: case 0x16: case 0x1e: tmp = asl(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x89: setZeroFlag((state.a & state.args[0]) == 0); break; case 0x34: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x24: case 0x2c: case 0x3c: tmp = bus.read(effectiveAddress, true); setZeroFlag((state.a & tmp) == 0); setNegativeFlag((tmp & 0x80) != 0); setOverflowFlag((tmp & 0x40) != 0); break; case 0x29: state.a &= state.args[0]; setArithmeticFlags(state.a); break; case 0x32: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x21: case 0x25: case 0x2d: case 0x31: case 0x35: case 0x39: case 0x3d: state.a &= bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0x2a: state.a = rol(state.a); setArithmeticFlags(state.a); break; case 0x26: case 0x2e: case 0x36: case 0x3e: tmp = rol(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x49: state.a ^= state.args[0]; setArithmeticFlags(state.a); break; case 0x52: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x41: case 0x45: case 0x4d: case 0x51: case 0x55: case 0x59: case 0x5d: state.a ^= bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0x4a: state.a = lsr(state.a); setArithmeticFlags(state.a); break; case 0x46: case 0x4e: case 0x56: case 0x5e: tmp = lsr(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x69: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, state.args[0]); } else { state.a = adc(state.a, state.args[0]); } break; case 0x72: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x61: case 0x65: case 0x6d: case 0x71: case 0x75: case 0x79: case 0x7d: if (state.decimalModeFlag) { state.a = adcDecimal(state.a, bus.read(effectiveAddress, true)); } else { state.a = adc(state.a, bus.read(effectiveAddress, true)); } break; case 0x6a: state.a = ror(state.a); setArithmeticFlags(state.a); break; case 0x66: case 0x6e: case 0x76: case 0x7e: tmp = ror(bus.read(effectiveAddress, true)); bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x92: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0x81: case 0x85: case 0x8d: case 0x91: case 0x95: case 0x99: case 0x9d: bus.write(effectiveAddress, state.a); break; case 0x84: case 0x8c: case 0x94: bus.write(effectiveAddress, state.y); break; case 0x86: case 0x8e: case 0x96: bus.write(effectiveAddress, state.x); break; case 0x64: case 0x74: case 0x9c: case 0x9e: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } bus.write(effectiveAddress, 0); break; case 0xa0: state.y = state.args[0]; setArithmeticFlags(state.y); break; case 0xa4: case 0xac: case 0xb4: case 0xbc: state.y = bus.read(effectiveAddress, true); setArithmeticFlags(state.y); break; case 0xa2: state.x = state.args[0]; setArithmeticFlags(state.x); break; case 0xa6: case 0xae: case 0xb6: case 0xbe: state.x = bus.read(effectiveAddress, true); setArithmeticFlags(state.x); break; case 0xa9: state.a = state.args[0]; setArithmeticFlags(state.a); break; case 0xb2: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0xa1: case 0xa5: case 0xad: case 0xb1: case 0xb5: case 0xb9: case 0xbd: state.a = bus.read(effectiveAddress, true); setArithmeticFlags(state.a); break; case 0xc0: cmp(state.y, state.args[0]); break; case 0xc4: case 0xcc: cmp(state.y, bus.read(effectiveAddress, true)); break; case 0xc9: cmp(state.a, state.args[0]); break; case 0xd2: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0xc1: case 0xc5: case 0xcd: case 0xd1: case 0xd5: case 0xd9: case 0xdd: cmp(state.a, bus.read(effectiveAddress, true)); break; case 0x3a: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } state.a = --state.a & 0xFF; setArithmeticFlags(state.a); break; case 0xc6: case 0xce: case 0xd6: case 0xde: tmp = (bus.read(effectiveAddress, true) - 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0xe0: cmp(state.x, state.args[0]); break; case 0xe4: case 0xec: cmp(state.x, bus.read(effectiveAddress, true)); break; case 0xe9: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, state.args[0]); } else { state.a = sbc(state.a, state.args[0]); } break; case 0xf2: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } case 0xe1: case 0xe5: case 0xed: case 0xf1: case 0xf5: case 0xf9: case 0xfd: if (state.decimalModeFlag) { state.a = sbcDecimal(state.a, bus.read(effectiveAddress, true)); } else { state.a = sbc(state.a, bus.read(effectiveAddress, true)); } break; case 0x1a: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } state.a = ++state.a & 0xff; setArithmeticFlags(state.a); break; case 0xe6: case 0xee: case 0xf6: case 0xfe: tmp = (bus.read(effectiveAddress, true) + 1) & 0xff; bus.write(effectiveAddress, tmp); setArithmeticFlags(tmp); break; case 0x07: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~1; bus.write(effectiveAddress, tmp); break; case 0x17: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 1); bus.write(effectiveAddress, tmp); break; case 0x27: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 2); bus.write(effectiveAddress, tmp); break; case 0x37: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 3); bus.write(effectiveAddress, tmp); break; case 0x47: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 4); bus.write(effectiveAddress, tmp); break; case 0x57: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 5); bus.write(effectiveAddress, tmp); break; case 0x67: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 6); bus.write(effectiveAddress, tmp); break; case 0x77: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp &= ~(1 << 7); bus.write(effectiveAddress, tmp); break; case 0x87: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= 1; bus.write(effectiveAddress, tmp); break; case 0x97: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 1); bus.write(effectiveAddress, tmp); break; case 0xa7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 2); bus.write(effectiveAddress, tmp); break; case 0xb7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 3); bus.write(effectiveAddress, tmp); break; case 0xc7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 4); bus.write(effectiveAddress, tmp); break; case 0xd7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 5); bus.write(effectiveAddress, tmp); break; case 0xe7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 6); bus.write(effectiveAddress, tmp); break; case 0xf7: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true) & 0xff; tmp |= (1 << 7); bus.write(effectiveAddress, tmp); break; case 0x14: case 0x1c: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); setZeroFlag((state.a & tmp) == 0); tmp &= ~(state.a); tmp &= 0xff; bus.write(effectiveAddress, tmp); break; case 0x04: case 0x0c: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); setZeroFlag((state.a & tmp) == 0); tmp |= state.a; tmp = tmp & 0xff; bus.write(effectiveAddress,tmp); break; case 0x0f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x1f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 1)) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x2f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 2)) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x3f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 3)) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x4f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 4)) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x5f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 5)) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x6f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 6)) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x7f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 7)) == 0) { state.pc = relAddress(state.args[1]); } break; case 0x8f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & 1) != 0) { state.pc = relAddress(state.args[1]); } break; case 0x9f: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 1)) != 0) { state.pc = relAddress(state.args[1]); } break; case 0xaf: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 2)) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xbf: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 3)) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xcf: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 4)) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xdf: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 5)) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xef: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 6)) > 0) { state.pc = relAddress(state.args[1]); } break; case 0xff: if (behavior == CpuBehavior.NMOS_6502 || behavior == CpuBehavior.NMOS_WITH_ROR_BUG) { break; } tmp = bus.read(effectiveAddress, true); if ((tmp & (1 << 7)) > 0) { state.pc = relAddress(state.args[1]); } break; default: setOpTrap(); break; } delayLoop(state.ir); peekAhead(); }",https://www.github.com/sethm/symon/commit/b36b442b14cc2d3591ce9ae757c6f2de15b5f00e
b36b442b14cc2d3591ce9ae757c6f2de15b5f00e,Cpu.java,disassembleOpAtAddress,"public String disassembleOpAtAddress(int address) throws MemoryAccessException { int opCode = bus.read(address, true); int[] args = new int[2]; int size = Cpu.instructionSizes[opCode]; for (int i = 1; i < size; i++) { int nextRead = (address + i) % bus.endAddress(); args[i-1] = bus.read(nextRead, true); } return disassembleOp(opCode, args); }",https://www.github.com/sethm/symon/commit/b36b442b14cc2d3591ce9ae757c6f2de15b5f00e
0bad9912ce1988c0b6af3f22a9adf3f175fd6879,VideoWindow.java,run,public void run() { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { if (cursorBlinkRate > 0) { hideCursor = !hideCursor; } } }); },https://www.github.com/sethm/symon/commit/0bad9912ce1988c0b6af3f22a9adf3f175fd6879
0bad9912ce1988c0b6af3f22a9adf3f175fd6879,VideoWindow.java,run,public void run() { if (cursorBlinkRate > 0) { hideCursor = !hideCursor; } },https://www.github.com/sethm/symon/commit/0bad9912ce1988c0b6af3f22a9adf3f175fd6879
0bad9912ce1988c0b6af3f22a9adf3f175fd6879,VideoWindow.java,run,public void run() { SwingUtilities.invokeLater(new Runnable () { @Override public void run() { if (VideoWindow.this.isVisible()) { VideoWindow.this.repaint(); } } }); },https://www.github.com/sethm/symon/commit/0bad9912ce1988c0b6af3f22a9adf3f175fd6879
0bad9912ce1988c0b6af3f22a9adf3f175fd6879,VideoWindow.java,run,public void run() { if (VideoWindow.this.isVisible()) { VideoWindow.this.repaint(); } },https://www.github.com/sethm/symon/commit/0bad9912ce1988c0b6af3f22a9adf3f175fd6879
b5a470d3ba98c231279f43ff384c96df145a1c1a,Cpu.java,reset,"public void reset() throws MemoryAccessException { state.sp = 0xff; state.pc = Utils.address(bus.read(RST_VECTOR_L, true), bus.read(RST_VECTOR_H, true)); state.ir = 0; state.carryFlag = false; state.zeroFlag = false; state.irqDisableFlag = true; state.decimalModeFlag = false; state.breakFlag = false; state.overflowFlag = false; state.negativeFlag = false; state.irqAsserted = false; state.opTrap = false; state.stepCounter = 0L; state.a = 0; state.x = 0; state.y = 0; peekAhead(); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuAbsoluteModeTest.java,setUp,"protected void setUp() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0xffff); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuAbsoluteModeTest.java,test_JSR,"public void test_JSR() throws MemoryAccessException { bus.loadProgram(0xea, 0xea, 0x20, 0x00, 0x34); cpu.step(3); assertEquals(0x3400, cpu.getProgramCounter()); assertEquals(0x02, bus.read(0x1ff, true)); assertEquals(0x04, bus.read(0x1fe, true)); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuAbsoluteModeTest.java,test_JMP,"public void test_JMP() throws MemoryAccessException { bus.loadProgram(0x4c, 0x00, 0x34); cpu.step(); assertEquals(0x3400, cpu.getProgramCounter()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuAccumulatorModeTest.java,setUp,"public void setUp() throws MemoryRangeException, MemoryAccessException { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0xffff); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuImpliedModeTest.java,test_BRK,"public void test_BRK() throws MemoryAccessException { cpu.setCarryFlag(); cpu.setOverflowFlag(); cpu.clearIrqDisableFlag(); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW, cpu.getProcessorStatus()); assertEquals(0x00, cpu.stackPeek()); assertFalse(cpu.getBreakFlag()); assertEquals(0x0200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); bus.write(0xffff, 0x12); bus.write(0xfffe, 0x34); bus.loadProgram(0xea, 0xea, 0xea, 0x00, 0xea, 0xea); cpu.step(3); assertEquals(0x203, cpu.getProgramCounter()); cpu.step(); assertEquals(0x02, bus.read(0x1ff, true)); assertEquals(0x05, bus.read(0x1fe, true)); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK, bus.read(0x1fd, true)); assertEquals(0x1234, cpu.getProgramCounter()); assertEquals(0xfc, cpu.getStackPointer()); assertEquals(0x20 | Cpu.P_CARRY | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_IRQ_DISABLE, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuImpliedModeTest.java,test_NOP,"public void test_NOP() throws MemoryAccessException { bus.loadProgram(0xea); cpu.step(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x201, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuImpliedModeTest.java,test_RTS,"public void test_RTS() throws MemoryAccessException { cpu.stackPush(0x0f); cpu.stackPush(0x11); bus.loadProgram(0x60); cpu.step(); assertEquals(0x0f12, cpu.getProgramCounter()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuIndexedIndirectModeTest.java,runBeforeEveryTest,"public void runBeforeEveryTest() throws Exception { this.cpu = new Cpu(); this.bus = new Bus(0x0000, 0xffff); this.mem = new Memory(0x0000, 0xffff); bus.addCpu(cpu); bus.addDevice(mem); bus.write(0xfffc, Bus.DEFAULT_LOAD_ADDRESS & 0x00ff); bus.write(0xfffd, (Bus.DEFAULT_LOAD_ADDRESS & 0xff00) >>> 8); cpu.reset(); assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x200, cpu.getProgramCounter()); assertEquals(0xff, cpu.getStackPointer()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuIndirectModeTest.java,test_JMP_notOnPageBoundary,"public void test_JMP_notOnPageBoundary() throws MemoryAccessException { bus.write(0x3400, 0x00); bus.write(0x3401, 0x54); bus.loadProgram(0x6c, 0x00, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuIndirectModeTest.java,test_JMP_with_ROR_Bug,"public void test_JMP_with_ROR_Bug() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.NMOS_WITH_ROR_BUG); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x2200, cpu.getProgramCounter()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuIndirectModeTest.java,test_JMP_withIndirectBug,"public void test_JMP_withIndirectBug() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.NMOS_6502); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x2200, cpu.getProgramCounter()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuIndirectModeTest.java,test_JMP_withOutIndirectBug,"public void test_JMP_withOutIndirectBug() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.CMOS_6502); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuIndirectModeTest.java,test_JMP_cmos,"public void test_JMP_cmos() throws MemoryAccessException { cpu.setBehavior(Cpu.CpuBehavior.CMOS_6502); bus.write(0x3400, 0x22); bus.write(0x34ff, 0x00); bus.write(0x3500, 0x54); bus.loadProgram(0x6c, 0xff, 0x34); cpu.step(); assertEquals(0x5400, cpu.getProgramCounter()); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuTest.java,testReset,"public void testReset() { assertEquals(0, cpu.getAccumulator()); assertEquals(0, cpu.getXRegister()); assertEquals(0, cpu.getYRegister()); assertEquals(0x0200, cpu.getProgramCounter()); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuTest.java,testGetProcessorStatus,"public void testGetProcessorStatus() { assertEquals(0x24, cpu.getProcessorStatus()); cpu.setCarryFlag(); assertEquals(0x25, cpu.getProcessorStatus()); cpu.setZeroFlag(); assertEquals(0x27, cpu.getProcessorStatus()); cpu.setDecimalModeFlag(); assertEquals(0x2f, cpu.getProcessorStatus()); cpu.setBreakFlag(); assertEquals(0x3f, cpu.getProcessorStatus()); cpu.setOverflowFlag(); assertEquals(0x7f, cpu.getProcessorStatus()); cpu.setNegativeFlag(); assertEquals(0xff, cpu.getProcessorStatus()); cpu.clearCarryFlag(); assertEquals(0xfe, cpu.getProcessorStatus()); cpu.clearZeroFlag(); assertEquals(0xfc, cpu.getProcessorStatus()); cpu.clearIrqDisableFlag(); assertEquals(0xf8, cpu.getProcessorStatus()); cpu.clearDecimalModeFlag(); assertEquals(0xf0, cpu.getProcessorStatus()); cpu.clearBreakFlag(); assertEquals(0xe0, cpu.getProcessorStatus()); cpu.clearOverflowFlag(); assertEquals(0xa0, cpu.getProcessorStatus()); cpu.clearNegativeFlag(); assertEquals(0x20, cpu.getProcessorStatus()); cpu.setIrqDisableFlag(); assertEquals(0x24, cpu.getProcessorStatus()); }",https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
b5a470d3ba98c231279f43ff384c96df145a1c1a,CpuTest.java,testSetProcessorStatus,public void testSetProcessorStatus() { assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getZeroFlag()); assertTrue(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE); assertTrue(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO | Cpu.P_OVERFLOW); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO | Cpu.P_OVERFLOW | Cpu.P_BREAK); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertTrue(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_DECIMAL); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertTrue(cpu.getDecimalModeFlag()); assertTrue(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20 | Cpu.P_CARRY | Cpu.P_NEGATIVE | Cpu.P_ZERO | Cpu.P_OVERFLOW | Cpu.P_BREAK | Cpu.P_DECIMAL | Cpu.P_IRQ_DISABLE); assertTrue(cpu.getCarryFlag()); assertTrue(cpu.getZeroFlag()); assertTrue(cpu.getIrqDisableFlag()); assertTrue(cpu.getDecimalModeFlag()); assertTrue(cpu.getBreakFlag()); assertTrue(cpu.getOverflowFlag()); assertTrue(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x20); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); cpu.setProcessorStatus(0x00); assertFalse(cpu.getCarryFlag()); assertFalse(cpu.getZeroFlag()); assertFalse(cpu.getIrqDisableFlag()); assertFalse(cpu.getDecimalModeFlag()); assertFalse(cpu.getBreakFlag()); assertFalse(cpu.getOverflowFlag()); assertFalse(cpu.getNegativeFlag()); },https://www.github.com/sethm/symon/commit/b5a470d3ba98c231279f43ff384c96df145a1c1a
66a92f4196cf2297f8f6fd2c9de140a6fc6535a2,Acia6551.java,write,"public void write(int address, int data) throws MemoryAccessException { switch (address) { case DATA_REG: txWrite(data); break; case STAT_REG: reset(); break; case CMND_REG: setCommandRegister(data); break; case CTRL_REG: setControlRegister(data); break; default: throw new MemoryAccessException(""No register.""); } }",https://www.github.com/sethm/symon/commit/66a92f4196cf2297f8f6fd2c9de140a6fc6535a2
d076046f5770f7acdca7dab6d3b8389d0787b1fa,AciaTest.java,statusRegisterInitializedAtHardwareReset,"public void statusRegisterInitializedAtHardwareReset() throws Exception { Acia6551 acia = new Acia6551(0x0000); assertEquals(0x10, acia.read(0x0001, false)); }",https://www.github.com/sethm/symon/commit/d076046f5770f7acdca7dab6d3b8389d0787b1fa
d076046f5770f7acdca7dab6d3b8389d0787b1fa,AciaTest.java,commandRegisterInitializedAtHardwareReset,"public void commandRegisterInitializedAtHardwareReset() throws Exception { Acia6551 acia = new Acia6551(0x0000); assertEquals(0x02, acia.read(0x0002, false)); }",https://www.github.com/sethm/symon/commit/d076046f5770f7acdca7dab6d3b8389d0787b1fa
d076046f5770f7acdca7dab6d3b8389d0787b1fa,AciaTest.java,controlRegisterInitializedAtHardwareReset,"public void controlRegisterInitializedAtHardwareReset() throws Exception { Acia6551 acia = new Acia6551(0x0000); assertEquals(0x00, acia.read(0x0003, false)); }",https://www.github.com/sethm/symon/commit/d076046f5770f7acdca7dab6d3b8389d0787b1fa
5df775bbb02c84f237aae50b0279c9fca2ea85da,Acia6551.java,reset,private synchronized void reset() { setCommandRegister((commandRegister & 0xe0) | 0x02); overrun = false; },https://www.github.com/sethm/symon/commit/5df775bbb02c84f237aae50b0279c9fca2ea85da
5df775bbb02c84f237aae50b0279c9fca2ea85da,AciaTest.java,programResetClearsOverrunStatus,"public void programResetClearsOverrunStatus() throws Exception { Acia6551 acia = new Acia6551(0x0000); Bus bus = new Bus(acia.ACIA_SIZE); acia.setBus(bus); acia.write(0x0002, 0x00); acia.rxWrite('a'); acia.rxWrite('b'); acia.write(0x0000, 'c'); assertEquals(0x8C, acia.read(0x0001, false)); acia.write(0x0001, 0xFF); assertEquals(0x88, acia.read(0x0001, false)); }",https://www.github.com/sethm/symon/commit/5df775bbb02c84f237aae50b0279c9fca2ea85da
5df775bbb02c84f237aae50b0279c9fca2ea85da,AciaTest.java,programResetKeepsParitySettings,"public void programResetKeepsParitySettings() throws Exception { Acia6551 acia = new Acia6551(0x0000); acia.write(0x0002, 0xFF); acia.write(0x0001, 0xFF); assertEquals(0xE2, acia.read(0x0002, false)); }",https://www.github.com/sethm/symon/commit/5df775bbb02c84f237aae50b0279c9fca2ea85da
5df775bbb02c84f237aae50b0279c9fca2ea85da,AciaTest.java,programResetLeavesControlRegisterUnchanged,"public void programResetLeavesControlRegisterUnchanged() throws Exception { Acia6551 acia = new Acia6551(0x0000); acia.write(0x0003, 0xFF); acia.write(0x0001, 0xFF); assertEquals(0xFF, acia.read(0x0003, false)); }",https://www.github.com/sethm/symon/commit/5df775bbb02c84f237aae50b0279c9fca2ea85da
44236238169b0371ae91b799fc22012a8bce8682,Acia6551.java,setControlRegister,private void setControlRegister(int data) { controlRegister = data; int rate = 0; int baudSelector = data & 0x0f; switch (baudSelector) { case 0: rate = 0; break; case 1: rate = 50; break; case 2: rate = 75; break; case 3: rate = 110; break; case 4: rate = 135; break; case 5: rate = 150; break; case 6: rate = 300; break; case 7: rate = 600; break; case 8: rate = 1200; break; case 9: rate = 1800; break; case 10: rate = 2400; break; case 11: rate = 3600; break; case 12: rate = 4800; break; case 13: rate = 7200; break; case 14: rate = 9600; break; case 15: rate = 19200; break; } setBaudRate(rate); },https://www.github.com/sethm/symon/commit/44236238169b0371ae91b799fc22012a8bce8682
67f5e17f78b0576aba9d54fc482cd719b123a8f7,Main.java,main,"public static void main(String[] args) throws Exception { Class machineClass = SymonMachine.class; Options options = new Options(); options.addOption(new Option(""m"", ""machine"", true, ""Specify machine type."")); options.addOption(new Option(""c"", ""cpu"", true, ""Specify CPU type."")); options.addOption(new Option(""r"", ""rom"", true, ""Specify ROM file."")); CommandLineParser parser = new DefaultParser(); try { CommandLine line = parser.parse(options, args); InstructionTable.CpuBehavior cpuBehavior = null; String romFile = null; if (line.hasOption(""machine"")) { String machine = line.getOptionValue(""machine"").toLowerCase(Locale.ENGLISH); switch (machine) { case ""multicomp"": machineClass = MulticompMachine.class; break; case ""simple"": machineClass = SimpleMachine.class; break; case ""symon"": machineClass = SymonMachine.class; break; case ""beneater"": machineClass = BenEaterMachine.class; break; default: System.err.println(""Could not start Symon. Unknown machine type "" + machine); return; } } if (line.hasOption(""cpu"")) { String cpu = line.getOptionValue(""cpu"").toLowerCase(Locale.ENGLISH); switch (cpu) { case ""6502"": cpuBehavior = InstructionTable.CpuBehavior.NMOS_6502; break; case ""65c02"": cpuBehavior = InstructionTable.CpuBehavior.CMOS_6502; break; case ""65c816"": cpuBehavior = InstructionTable.CpuBehavior.CMOS_65816; break; default: System.err.println(""Could not start Symon. Unknown cpu type "" + cpu); return; } } if (line.hasOption(""rom"")) { romFile = line.getOptionValue(""rom""); } while (true) { if (machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp"", ""Simple"", ""BenEater""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if (s != null && s.equals(""Multicomp"")) { machineClass = MulticompMachine.class; } else if (s != null && s.equals(""Simple"")) { machineClass = SimpleMachine.class; } else if (s != null && s.equals(""BenEater"")) { machineClass = BenEaterMachine.class; } else { machineClass = SymonMachine.class; } } if (cpuBehavior == null) { cpuBehavior = InstructionTable.CpuBehavior.NMOS_6502; } final Simulator simulator = new Simulator(machineClass, cpuBehavior, romFile); SwingUtilities.invokeLater(new Runnable() { @Override public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } } }); Simulator.MainCommand cmd = simulator.waitForCommand(); if (cmd.equals(Simulator.MainCommand.SELECTMACHINE)) { machineClass = null; } else { break; } } } catch (ParseException ex) { System.err.println(""Could not start Symon. Reason: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/67f5e17f78b0576aba9d54fc482cd719b123a8f7
67f5e17f78b0576aba9d54fc482cd719b123a8f7,BenEaterMachine.java,getName,"public String getName() { return ""benEater""; }",https://www.github.com/sethm/symon/commit/67f5e17f78b0576aba9d54fc482cd719b123a8f7
5e56627f32e4aff13517e12e2e470188051659ce,Vt100TerminalModel.java,parsedString,"public void parsedString(String str) { for (char ch : str.toCharArray()) { switch (ch) { case '\0': continue; case '\r': cursorColumn = 0; continue; case '\n': cursorRow++; break; case '\t': while ((++cursorColumn % TAB_WIDTH) != 0); continue; case 8: case 127: if (cursorColumn > 0) { cells[cursorRow][--cursorColumn] = null; } continue; case 7: bellStrategy.soundBell(); continue; } if (cursorColumn >= columns) { cursorColumn = 0; cursorRow++; } if (cursorRow >= bufferSize) { for (int i = 1; i < bufferSize; i++) { System.arraycopy(cells[i], 0, cells[i - 1], 0, columns); } for (int i = 0; i < columns; i++) { cells[bufferSize - 1][i] = null; } cursorRow--; } Color back = backgroundBold ? SgrColor.COLOR_BRIGHT[backgroundColor] : SgrColor.COLOR_NORMAL[backgroundColor]; Color fore = foregroundBold ? SgrColor.COLOR_BRIGHT[foregroundColor] : SgrColor.COLOR_NORMAL[foregroundColor]; if (ch != '\n') { cells[cursorRow][cursorColumn++] = new TerminalCell(ch, back, fore); } } }",https://www.github.com/sethm/symon/commit/5e56627f32e4aff13517e12e2e470188051659ce
0c026e38ddce684118e3dff57fc49c85631210c7,Main.java,main,"public static void main(String[] args) throws Exception { Class machineClass = SymonMachine.class; Options options = new Options(); options.addOption(new Option(""m"", ""machine"", true, ""Specify machine type."")); options.addOption(new Option(""c"", ""cpu"", true, ""Specify CPU type."")); options.addOption(new Option(""r"", ""rom"", true, ""Specify ROM file."")); options.addOption(new Option(""b"", ""brk"", false, ""Halt on BRK"")); CommandLineParser parser = new DefaultParser(); try { CommandLine line = parser.parse(options, args); InstructionTable.CpuBehavior cpuBehavior = null; String romFile = null; boolean haltOnBreak = false; if (line.hasOption(""machine"")) { String machine = line.getOptionValue(""machine"").toLowerCase(Locale.ENGLISH); switch (machine) { case ""multicomp"": machineClass = MulticompMachine.class; break; case ""simple"": machineClass = SimpleMachine.class; break; case ""symon"": machineClass = SymonMachine.class; break; case ""beneater"": machineClass = BenEaterMachine.class; break; default: System.err.println(""Could not start Symon. Unknown machine type "" + machine); return; } } if (line.hasOption(""cpu"")) { String cpu = line.getOptionValue(""cpu"").toLowerCase(Locale.ENGLISH); switch (cpu) { case ""6502"": cpuBehavior = InstructionTable.CpuBehavior.NMOS_6502; break; case ""65c02"": cpuBehavior = InstructionTable.CpuBehavior.CMOS_6502; break; case ""65c816"": cpuBehavior = InstructionTable.CpuBehavior.CMOS_65816; break; default: System.err.println(""Could not start Symon. Unknown cpu type "" + cpu); return; } } if (line.hasOption(""rom"")) { romFile = line.getOptionValue(""rom""); } if (line.hasOption(""brk"")) { haltOnBreak = true; } while (true) { if (machineClass == null) { Object[] possibilities = {""Symon"", ""Multicomp"", ""Simple"", ""BenEater""}; String s = (String)JOptionPane.showInputDialog( null, ""Please choose the machine type to be emulated:"", ""Machine selection"", JOptionPane.PLAIN_MESSAGE, null, possibilities, ""Symon""); if (s != null && s.equals(""Multicomp"")) { machineClass = MulticompMachine.class; } else if (s != null && s.equals(""Simple"")) { machineClass = SimpleMachine.class; } else if (s != null && s.equals(""BenEater"")) { machineClass = BenEaterMachine.class; } else { machineClass = SymonMachine.class; } } if (cpuBehavior == null) { cpuBehavior = InstructionTable.CpuBehavior.NMOS_6502; } final Simulator simulator = new Simulator(machineClass, cpuBehavior, romFile, haltOnBreak); SwingUtilities.invokeLater(new Runnable() { @Override public void run() { try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); simulator.createAndShowUi(); } catch (Exception e) { e.printStackTrace(); } } }); Simulator.MainCommand cmd = simulator.waitForCommand(); if (cmd.equals(Simulator.MainCommand.SELECTMACHINE)) { machineClass = null; } else { break; } } } catch (ParseException ex) { System.err.println(""Could not start Symon. Reason: "" + ex.getMessage()); } }",https://www.github.com/sethm/symon/commit/0c026e38ddce684118e3dff57fc49c85631210c7
0c026e38ddce684118e3dff57fc49c85631210c7,Simulator.java,createAndShowUi,"public void createAndShowUi() throws IOException { mainWindow = new JFrame(); mainWindow.setTitle(""6502 Simulator - "" + machine.getName()); mainWindow.setResizable(false); mainWindow.getContentPane().setLayout(new BorderLayout()); this.console = new com.loomcom.symon.ui.Console(80, 25, DEFAULT_FONT, false); this.statusPane = new StatusPanel(machine); console.setBorderWidth(CONSOLE_BORDER_WIDTH); fileChooser = new JFileChooser(System.getProperty(""user.dir"")); preferences = new PreferencesDialog(mainWindow, true, haltOnBreak); JPanel consoleContainer = new JPanel(); JPanel buttonContainer = new JPanel(); consoleContainer.setLayout(new BorderLayout()); consoleContainer.setBorder(new EmptyBorder(10, 10, 10, 0)); buttonContainer.setLayout(new FlowLayout()); runStopButton = new JButton(""Run""); stepButton = new JButton(""Step""); JButton softResetButton = new JButton(""Soft Reset""); JButton hardResetButton = new JButton(""Hard Reset""); stepCountBox = new JComboBox<>(STEPS); stepCountBox.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { try { JComboBox cb = (JComboBox) actionEvent.getSource(); stepsPerClick = Integer.parseInt((String) cb.getSelectedItem()); } catch (NumberFormatException ex) { stepsPerClick = 1; stepCountBox.setSelectedIndex(0); } } }); buttonContainer.add(runStopButton); buttonContainer.add(stepButton); buttonContainer.add(stepCountBox); buttonContainer.add(softResetButton); buttonContainer.add(hardResetButton); consoleContainer.add(console, BorderLayout.CENTER); mainWindow.getContentPane().add(consoleContainer, BorderLayout.LINE_START); mainWindow.getContentPane().add(statusPane, BorderLayout.LINE_END); mainWindow.getContentPane().add(buttonContainer, BorderLayout.PAGE_END); runStopButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { if (runLoop != null && runLoop.isRunning()) { Simulator.this.handleStop(); } else { Simulator.this.handleStart(); } } }); stepButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { Simulator.this.handleStep(stepsPerClick); } }); softResetButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { Simulator.this.handleReset(false); } }); hardResetButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent actionEvent) { Simulator.this.handleReset(true); } }); mainWindow.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); menuBar = new SimulatorMenu(); mainWindow.setJMenuBar(menuBar); mainWindow.pack(); mainWindow.setVisible(true); console.requestFocus(); handleReset(false); }",https://www.github.com/sethm/symon/commit/0c026e38ddce684118e3dff57fc49c85631210c7
